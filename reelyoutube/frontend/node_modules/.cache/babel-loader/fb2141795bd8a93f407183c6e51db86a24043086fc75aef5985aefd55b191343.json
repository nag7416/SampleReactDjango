{"ast":null,"code":"const menbtn = document.querySelector('.menu button');\nconst overlay = document.querySelector('.hiddensidebar');\nconst hiddenclose = document.getElementById('hiddensidebarclose');\nconst overlayclose = document.getElementById('closebtn');\nif (menbtn) {\n  menbtn.addEventListener('click', function () {\n    overlay.classList.toggle('active');\n    hiddenclose.classList.toggle('active');\n    overlayclose.classList.toggle('active');\n  });\n}\nif (hiddenclose) {\n  hiddenclose.addEventListener('click', function () {\n    overlay.classList.toggle('active');\n    overlayclose.classList.toggle('active');\n    hiddenclose.classList.toggle('active');\n  });\n}\nif (overlayclose) {\n  overlayclose.addEventListener('click', function () {\n    overlay.classList.toggle('active');\n    overlayclose.classList.toggle('active');\n    hiddenclose.classList.toggle('active');\n  });\n}\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  // Get all img elements with the \"lazy-img\" class\n  const lazyImages = document.querySelectorAll(\".lazy-img\");\n\n  // Create an Intersection Observer\n  const observer = new IntersectionObserver((entries, observer) => {\n    entries.forEach(entry => {\n      if (entry.isIntersecting) {\n        // When an image becomes visible, delay setting the 'src' attribute\n        const img = entry.target;\n        setTimeout(() => {\n          img.src = img.getAttribute(\"data-real-src\");\n\n          // Remove the 'lazy-img' class to prevent it from being observed again\n          img.classList.remove(\"lazy-img\");\n\n          // Stop observing this image once it's loaded\n          observer.unobserve(img);\n        }, 1000); // Adjust the delay time as needed (in milliseconds)\n      }\n    });\n  });\n\n  // Start observing all lazy images\n  lazyImages.forEach(img => {\n    observer.observe(img);\n  });\n});","map":{"version":3,"names":["menbtn","document","querySelector","overlay","hiddenclose","getElementById","overlayclose","addEventListener","classList","toggle","lazyImages","querySelectorAll","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","img","target","setTimeout","src","getAttribute","remove","unobserve","observe"],"sources":["C:/Users/babu7/OneDrive/Desktop/React/frontend/src/assets/script.js"],"sourcesContent":["const menbtn = document.querySelector('.menu button');\r\nconst overlay = document.querySelector('.hiddensidebar');\r\nconst hiddenclose = document.getElementById('hiddensidebarclose');\r\nconst overlayclose = document.getElementById('closebtn');\r\n\r\nif(menbtn){\r\n\tmenbtn.addEventListener('click', function(){\r\n\t\toverlay.classList.toggle('active');\r\n\t\thiddenclose.classList.toggle('active');\r\n\t\toverlayclose.classList.toggle('active');\r\n\t})\r\n}\r\n\r\nif(hiddenclose){\r\n\thiddenclose.addEventListener('click', function(){\r\n\t\toverlay.classList.toggle('active');\r\n\t\toverlayclose.classList.toggle('active');\r\n\t\thiddenclose.classList.toggle('active');\r\n\t})\r\n}\r\nif(overlayclose){\r\n\toverlayclose.addEventListener('click', function(){\r\n\t\toverlay.classList.toggle('active');\r\n\t\toverlayclose.classList.toggle('active');\r\n\t\thiddenclose.classList.toggle('active');\r\n\t})\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", function() {\r\n\t// Get all img elements with the \"lazy-img\" class\r\n\tconst lazyImages = document.querySelectorAll(\".lazy-img\");\r\n  \r\n\t// Create an Intersection Observer\r\n\tconst observer = new IntersectionObserver((entries, observer) => {\r\n\t  entries.forEach((entry) => {\r\n\t\tif (entry.isIntersecting) {\r\n\t\t  // When an image becomes visible, delay setting the 'src' attribute\r\n\t\t  const img = entry.target;\r\n\t\t  setTimeout(() => {\r\n\t\t\timg.src = img.getAttribute(\"data-real-src\");\r\n\t\t\t\r\n\t\t\t// Remove the 'lazy-img' class to prevent it from being observed again\r\n\t\t\timg.classList.remove(\"lazy-img\");\r\n\t\t\t\r\n\t\t\t// Stop observing this image once it's loaded\r\n\t\t\tobserver.unobserve(img);\r\n\t\t  }, 1000); // Adjust the delay time as needed (in milliseconds)\r\n\t\t}\r\n\t  });\r\n\t});\r\n  \r\n\t// Start observing all lazy images\r\n\tlazyImages.forEach((img) => {\r\n\t  observer.observe(img);\r\n\t});\r\n  });\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,QAAQ,CAACC,aAAa,CAAC,cAAc,CAAC;AACrD,MAAMC,OAAO,GAAGF,QAAQ,CAACC,aAAa,CAAC,gBAAgB,CAAC;AACxD,MAAME,WAAW,GAAGH,QAAQ,CAACI,cAAc,CAAC,oBAAoB,CAAC;AACjE,MAAMC,YAAY,GAAGL,QAAQ,CAACI,cAAc,CAAC,UAAU,CAAC;AAExD,IAAGL,MAAM,EAAC;EACTA,MAAM,CAACO,gBAAgB,CAAC,OAAO,EAAE,YAAU;IAC1CJ,OAAO,CAACK,SAAS,CAACC,MAAM,CAAC,QAAQ,CAAC;IAClCL,WAAW,CAACI,SAAS,CAACC,MAAM,CAAC,QAAQ,CAAC;IACtCH,YAAY,CAACE,SAAS,CAACC,MAAM,CAAC,QAAQ,CAAC;EACxC,CAAC,CAAC;AACH;AAEA,IAAGL,WAAW,EAAC;EACdA,WAAW,CAACG,gBAAgB,CAAC,OAAO,EAAE,YAAU;IAC/CJ,OAAO,CAACK,SAAS,CAACC,MAAM,CAAC,QAAQ,CAAC;IAClCH,YAAY,CAACE,SAAS,CAACC,MAAM,CAAC,QAAQ,CAAC;IACvCL,WAAW,CAACI,SAAS,CAACC,MAAM,CAAC,QAAQ,CAAC;EACvC,CAAC,CAAC;AACH;AACA,IAAGH,YAAY,EAAC;EACfA,YAAY,CAACC,gBAAgB,CAAC,OAAO,EAAE,YAAU;IAChDJ,OAAO,CAACK,SAAS,CAACC,MAAM,CAAC,QAAQ,CAAC;IAClCH,YAAY,CAACE,SAAS,CAACC,MAAM,CAAC,QAAQ,CAAC;IACvCL,WAAW,CAACI,SAAS,CAACC,MAAM,CAAC,QAAQ,CAAC;EACvC,CAAC,CAAC;AACH;AAQAR,QAAQ,CAACM,gBAAgB,CAAC,kBAAkB,EAAE,YAAW;EACxD;EACA,MAAMG,UAAU,GAAGT,QAAQ,CAACU,gBAAgB,CAAC,WAAW,CAAC;;EAEzD;EACA,MAAMC,QAAQ,GAAG,IAAIC,oBAAoB,CAAC,CAACC,OAAO,EAAEF,QAAQ,KAAK;IAC/DE,OAAO,CAACC,OAAO,CAAEC,KAAK,IAAK;MAC5B,IAAIA,KAAK,CAACC,cAAc,EAAE;QACxB;QACA,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM;QACxBC,UAAU,CAAC,MAAM;UAClBF,GAAG,CAACG,GAAG,GAAGH,GAAG,CAACI,YAAY,CAAC,eAAe,CAAC;;UAE3C;UACAJ,GAAG,CAACV,SAAS,CAACe,MAAM,CAAC,UAAU,CAAC;;UAEhC;UACAX,QAAQ,CAACY,SAAS,CAACN,GAAG,CAAC;QACtB,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;MACZ;IACC,CAAC,CAAC;EACJ,CAAC,CAAC;;EAEF;EACAR,UAAU,CAACK,OAAO,CAAEG,GAAG,IAAK;IAC1BN,QAAQ,CAACa,OAAO,CAACP,GAAG,CAAC;EACvB,CAAC,CAAC;AACD,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}