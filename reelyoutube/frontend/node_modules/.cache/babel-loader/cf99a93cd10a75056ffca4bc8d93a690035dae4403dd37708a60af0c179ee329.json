{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nvar _component = require('./component.js');\nvar _component2 = _interopRequireDefault(_component);\nvar _document = require('global/document');\nvar _document2 = _interopRequireDefault(_document);\nvar _window = require('global/window');\nvar _window2 = _interopRequireDefault(_window);\nvar _events = require('./utils/events.js');\nvar Events = _interopRequireWildcard(_events);\nvar _dom = require('./utils/dom.js');\nvar Dom = _interopRequireWildcard(_dom);\nvar _fn = require('./utils/fn.js');\nvar Fn = _interopRequireWildcard(_fn);\nvar _guid = require('./utils/guid.js');\nvar Guid = _interopRequireWildcard(_guid);\nvar _browser = require('./utils/browser.js');\nvar browser = _interopRequireWildcard(_browser);\nvar _log = require('./utils/log.js');\nvar _log2 = _interopRequireDefault(_log);\nvar _toTitleCase = require('./utils/to-title-case.js');\nvar _toTitleCase2 = _interopRequireDefault(_toTitleCase);\nvar _timeRanges = require('./utils/time-ranges.js');\nvar _buffer = require('./utils/buffer.js');\nvar _stylesheet = require('./utils/stylesheet.js');\nvar stylesheet = _interopRequireWildcard(_stylesheet);\nvar _fullscreenApi = require('./fullscreen-api.js');\nvar _fullscreenApi2 = _interopRequireDefault(_fullscreenApi);\nvar _mediaError = require('./media-error.js');\nvar _mediaError2 = _interopRequireDefault(_mediaError);\nvar _tuple = require('safe-json-parse/tuple');\nvar _tuple2 = _interopRequireDefault(_tuple);\nvar _obj = require('./utils/obj');\nvar _mergeOptions = require('./utils/merge-options.js');\nvar _mergeOptions2 = _interopRequireDefault(_mergeOptions);\nvar _textTrackListConverter = require('./tracks/text-track-list-converter.js');\nvar _textTrackListConverter2 = _interopRequireDefault(_textTrackListConverter);\nvar _modalDialog = require('./modal-dialog');\nvar _modalDialog2 = _interopRequireDefault(_modalDialog);\nvar _tech = require('./tech/tech.js');\nvar _tech2 = _interopRequireDefault(_tech);\nvar _audioTrackList = require('./tracks/audio-track-list.js');\nvar _audioTrackList2 = _interopRequireDefault(_audioTrackList);\nvar _videoTrackList = require('./tracks/video-track-list.js');\nvar _videoTrackList2 = _interopRequireDefault(_videoTrackList);\nrequire('./tech/loader.js');\nrequire('./tech/flash.js');\nrequire('./poster-image.js');\nrequire('./tracks/text-track-display.js');\nrequire('./loading-spinner.js');\nrequire('./big-play-button.js');\nrequire('./close-button.js');\nrequire('./control-bar/control-bar.js');\nrequire('./error-display.js');\nrequire('./tracks/text-track-settings.js');\nrequire('./tech/html5.js');\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n    newObj['default'] = obj;\n    return newObj;\n  }\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n} /**\n   * @file player.js\n   */\n// Subclasses Component\n\n// The following imports are used only to ensure that the corresponding modules\n// are always included in the video.js package. Importing the modules will\n// execute them and they will register themselves with video.js.\n\n// Import Html5 tech, at least for disposing the original video tag.\n\n// The following tech events are simply re-triggered\n// on the player when they happen\nvar TECH_EVENTS_RETRIGGER = [\n/**\n * Fired while the user agent is downloading media data.\n *\n * @event Player#progress\n * @type {EventTarget~Event}\n */\n/**\n * Retrigger the `progress` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechProgress_\n * @fires Player#progress\n * @listens Tech#progress\n */\n'progress',\n/**\n * Fires when the loading of an audio/video is aborted.\n *\n * @event Player#abort\n * @type {EventTarget~Event}\n */\n/**\n * Retrigger the `abort` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechAbort_\n * @fires Player#abort\n * @listens Tech#abort\n */\n'abort',\n/**\n * Fires when the browser is intentionally not getting media data.\n *\n * @event Player#suspend\n * @type {EventTarget~Event}\n */\n/**\n * Retrigger the `suspend` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechSuspend_\n * @fires Player#suspend\n * @listens Tech#suspend\n */\n'suspend',\n/**\n * Fires when the current playlist is empty.\n *\n * @event Player#emptied\n * @type {EventTarget~Event}\n */\n/**\n * Retrigger the `emptied` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechEmptied_\n * @fires Player#emptied\n * @listens Tech#emptied\n */\n'emptied',\n/**\n * Fires when the browser is trying to get media data, but data is not available.\n *\n * @event Player#stalled\n * @type {EventTarget~Event}\n */\n/**\n * Retrigger the `stalled` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechStalled_\n * @fires Player#stalled\n * @listens Tech#stalled\n */\n'stalled',\n/**\n * Fires when the browser has loaded meta data for the audio/video.\n *\n * @event Player#loadedmetadata\n * @type {EventTarget~Event}\n */\n/**\n * Retrigger the `stalled` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechLoadedmetadata_\n * @fires Player#loadedmetadata\n * @listens Tech#loadedmetadata\n */\n'loadedmetadata',\n/**\n * Fires when the browser has loaded the current frame of the audio/video.\n *\n * @event player#loadeddata\n * @type {event}\n */\n/**\n * Retrigger the `loadeddata` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechLoaddeddata_\n * @fires Player#loadeddata\n * @listens Tech#loadeddata\n */\n'loadeddata',\n/**\n * Fires when the current playback position has changed.\n *\n * @event player#timeupdate\n * @type {event}\n */\n/**\n * Retrigger the `timeupdate` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechTimeUpdate_\n * @fires Player#timeupdate\n * @listens Tech#timeupdate\n */\n'timeupdate',\n/**\n * Fires when the playing speed of the audio/video is changed\n *\n * @event player#ratechange\n * @type {event}\n */\n/**\n * Retrigger the `ratechange` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechRatechange_\n * @fires Player#ratechange\n * @listens Tech#ratechange\n */\n'ratechange',\n/**\n * Fires when the volume has been changed\n *\n * @event player#volumechange\n * @type {event}\n */\n/**\n * Retrigger the `volumechange` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechVolumechange_\n * @fires Player#volumechange\n * @listens Tech#volumechange\n */\n'volumechange',\n/**\n * Fires when the text track has been changed\n *\n * @event player#texttrackchange\n * @type {event}\n */\n/**\n * Retrigger the `texttrackchange` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechTexttrackchange_\n * @fires Player#texttrackchange\n * @listens Tech#texttrackchange\n */\n'texttrackchange'];\n\n/**\n * An instance of the `Player` class is created when any of the Video.js setup methods\n * are used to initialize a video.\n *\n * After an instance has been created it can be accessed globally in two ways:\n * 1. By calling `videojs('example_video_1');`\n * 2. By using it directly via  `videojs.players.example_video_1;`\n *\n * @extends Component\n */\n\nvar Player = function (_Component) {\n  _inherits(Player, _Component);\n\n  /**\n   * Create an instance of this class.\n   *\n   * @param {Element} tag\n   *        The original video DOM element used for configuring options.\n   *\n   * @param {Object} [options]\n   *        Object of option names and values.\n   *\n   * @param {Component~ReadyCallback} [ready]\n   *        Ready callback function.\n   */\n  function Player(tag, options, ready) {\n    _classCallCheck(this, Player);\n\n    // Make sure tag ID exists\n    tag.id = tag.id || 'vjs_video_' + Guid.newGUID();\n\n    // Set Options\n    // The options argument overrides options set in the video tag\n    // which overrides globally set options.\n    // This latter part coincides with the load order\n    // (tag must exist before Player)\n    options = (0, _obj.assign)(Player.getTagSettings(tag), options);\n\n    // Delay the initialization of children because we need to set up\n    // player properties first, and can't use `this` before `super()`\n    options.initChildren = false;\n\n    // Same with creating the element\n    options.createEl = false;\n\n    // we don't want the player to report touch activity on itself\n    // see enableTouchActivity in Component\n    options.reportTouchActivity = false;\n\n    // If language is not set, get the closest lang attribute\n    if (!options.language) {\n      if (typeof tag.closest === 'function') {\n        var closest = tag.closest('[lang]');\n        if (closest) {\n          options.language = closest.getAttribute('lang');\n        }\n      } else {\n        var element = tag;\n        while (element && element.nodeType === 1) {\n          if (Dom.getElAttributes(element).hasOwnProperty('lang')) {\n            options.language = element.getAttribute('lang');\n            break;\n          }\n          element = element.parentNode;\n        }\n      }\n    }\n\n    // Run base component initializing with new options\n\n    // if the global option object was accidentally blown away by\n    // someone, bail early with an informative error\n    var _this = _possibleConstructorReturn(this, _Component.call(this, null, options, ready));\n    if (!_this.options_ || !_this.options_.techOrder || !_this.options_.techOrder.length) {\n      throw new Error('No techOrder specified. Did you overwrite ' + 'videojs.options instead of just changing the ' + 'properties you want to override?');\n    }\n\n    // Store the original tag used to set options\n    _this.tag = tag;\n\n    // Store the tag attributes used to restore html5 element\n    _this.tagAttributes = tag && Dom.getElAttributes(tag);\n\n    // Update current language\n    _this.language(_this.options_.language);\n\n    // Update Supported Languages\n    if (options.languages) {\n      // Normalise player option languages to lowercase\n      var languagesToLower = {};\n      Object.getOwnPropertyNames(options.languages).forEach(function (name) {\n        languagesToLower[name.toLowerCase()] = options.languages[name];\n      });\n      _this.languages_ = languagesToLower;\n    } else {\n      _this.languages_ = Player.prototype.options_.languages;\n    }\n\n    // Cache for video property values.\n    _this.cache_ = {};\n\n    // Set poster\n    _this.poster_ = options.poster || '';\n\n    // Set controls\n    _this.controls_ = !!options.controls;\n\n    // Original tag settings stored in options\n    // now remove immediately so native controls don't flash.\n    // May be turned back on by HTML5 tech if nativeControlsForTouch is true\n    tag.controls = false;\n\n    /*\n     * Store the internal state of scrubbing\n     *\n     * @private\n     * @return {Boolean} True if the user is scrubbing\n     */\n    _this.scrubbing_ = false;\n    _this.el_ = _this.createEl();\n\n    // We also want to pass the original player options to each component and plugin\n    // as well so they don't need to reach back into the player for options later.\n    // We also need to do another copy of this.options_ so we don't end up with\n    // an infinite loop.\n    var playerOptionsCopy = (0, _mergeOptions2['default'])(_this.options_);\n\n    // Load plugins\n    if (options.plugins) {\n      var plugins = options.plugins;\n      Object.getOwnPropertyNames(plugins).forEach(function (name) {\n        if (typeof this[name] === 'function') {\n          this[name](plugins[name]);\n        } else {\n          _log2['default'].error('Unable to find plugin:', name);\n        }\n      }, _this);\n    }\n    _this.options_.playerOptions = playerOptionsCopy;\n    _this.initChildren();\n\n    // Set isAudio based on whether or not an audio tag was used\n    _this.isAudio(tag.nodeName.toLowerCase() === 'audio');\n\n    // Update controls className. Can't do this when the controls are initially\n    // set because the element doesn't exist yet.\n    if (_this.controls()) {\n      _this.addClass('vjs-controls-enabled');\n    } else {\n      _this.addClass('vjs-controls-disabled');\n    }\n\n    // Set ARIA label and region role depending on player type\n    _this.el_.setAttribute('role', 'region');\n    if (_this.isAudio()) {\n      _this.el_.setAttribute('aria-label', 'audio player');\n    } else {\n      _this.el_.setAttribute('aria-label', 'video player');\n    }\n    if (_this.isAudio()) {\n      _this.addClass('vjs-audio');\n    }\n    if (_this.flexNotSupported_()) {\n      _this.addClass('vjs-no-flex');\n    }\n\n    // TODO: Make this smarter. Toggle user state between touching/mousing\n    // using events, since devices can have both touch and mouse events.\n    // if (browser.TOUCH_ENABLED) {\n    //   this.addClass('vjs-touch-enabled');\n    // }\n\n    // iOS Safari has broken hover handling\n    if (!browser.IS_IOS) {\n      _this.addClass('vjs-workinghover');\n    }\n\n    // Make player easily findable by ID\n    Player.players[_this.id_] = _this;\n\n    // Add a major version class to aid css in plugins\n    var majorVersion = '5.20.5'.split('.')[0];\n    _this.addClass('vjs-v' + majorVersion);\n\n    // When the player is first initialized, trigger activity so components\n    // like the control bar show themselves if needed\n    _this.userActive(true);\n    _this.reportUserActivity();\n    _this.listenForUserActivity_();\n    _this.on('fullscreenchange', _this.handleFullscreenChange_);\n    _this.on('stageclick', _this.handleStageClick_);\n    return _this;\n  }\n\n  /**\n   * Destroys the video player and does any necessary cleanup.\n   *\n   * This is especially helpful if you are dynamically adding and removing videos\n   * to/from the DOM.\n   *\n   * @fires Player#dispose\n   */\n\n  Player.prototype.dispose = function dispose() {\n    /**\n     * Called when the player is being disposed of.\n     *\n     * @event Player#dispose\n     * @type {EventTarget~Event}\n     */\n    this.trigger('dispose');\n    // prevent dispose from being called twice\n    this.off('dispose');\n    if (this.styleEl_ && this.styleEl_.parentNode) {\n      this.styleEl_.parentNode.removeChild(this.styleEl_);\n    }\n\n    // Kill reference to this player\n    Player.players[this.id_] = null;\n    if (this.tag && this.tag.player) {\n      this.tag.player = null;\n    }\n    if (this.el_ && this.el_.player) {\n      this.el_.player = null;\n    }\n    if (this.tech_) {\n      this.tech_.dispose();\n    }\n    _Component.prototype.dispose.call(this);\n  };\n\n  /**\n   * Create the `Player`'s DOM element.\n   *\n   * @return {Element}\n   *         The DOM element that gets created.\n   */\n\n  Player.prototype.createEl = function createEl() {\n    var tag = this.tag;\n    var el = void 0;\n    var playerElIngest = this.playerElIngest_ = tag.parentNode && tag.parentNode.hasAttribute && tag.parentNode.hasAttribute('data-vjs-player');\n    if (playerElIngest) {\n      el = this.el_ = tag.parentNode;\n    } else {\n      el = this.el_ = _Component.prototype.createEl.call(this, 'div');\n    }\n\n    // set tabindex to -1 so we could focus on the player element\n    tag.setAttribute('tabindex', '-1');\n\n    // Remove width/height attrs from tag so CSS can make it 100% width/height\n    tag.removeAttribute('width');\n    tag.removeAttribute('height');\n\n    // Copy over all the attributes from the tag, including ID and class\n    // ID will now reference player box, not the video tag\n    var attrs = Dom.getElAttributes(tag);\n    Object.getOwnPropertyNames(attrs).forEach(function (attr) {\n      // workaround so we don't totally break IE7\n      // http://stackoverflow.com/questions/3653444/css-styles-not-applied-on-dynamic-elements-in-internet-explorer-7\n      if (attr === 'class') {\n        el.className += ' ' + attrs[attr];\n      } else {\n        el.setAttribute(attr, attrs[attr]);\n      }\n    });\n\n    // Update tag id/class for use as HTML5 playback tech\n    // Might think we should do this after embedding in container so .vjs-tech class\n    // doesn't flash 100% width/height, but class only applies with .video-js parent\n    tag.playerId = tag.id;\n    tag.id += '_html5_api';\n    tag.className = 'vjs-tech';\n\n    // Make player findable on elements\n    tag.player = el.player = this;\n    // Default state of video is paused\n    this.addClass('vjs-paused');\n\n    // Add a style element in the player that we'll use to set the width/height\n    // of the player in a way that's still overrideable by CSS, just like the\n    // video element\n    if (_window2['default'].VIDEOJS_NO_DYNAMIC_STYLE !== true) {\n      this.styleEl_ = stylesheet.createStyleElement('vjs-styles-dimensions');\n      var defaultsStyleEl = Dom.$('.vjs-styles-defaults');\n      var head = Dom.$('head');\n      head.insertBefore(this.styleEl_, defaultsStyleEl ? defaultsStyleEl.nextSibling : head.firstChild);\n    }\n\n    // Pass in the width/height/aspectRatio options which will update the style el\n    this.width(this.options_.width);\n    this.height(this.options_.height);\n    this.fluid(this.options_.fluid);\n    this.aspectRatio(this.options_.aspectRatio);\n\n    // Hide any links within the video/audio tag, because IE doesn't hide them completely.\n    var links = tag.getElementsByTagName('a');\n    for (var i = 0; i < links.length; i++) {\n      var linkEl = links.item(i);\n      Dom.addElClass(linkEl, 'vjs-hidden');\n      linkEl.setAttribute('hidden', 'hidden');\n    }\n\n    // insertElFirst seems to cause the networkState to flicker from 3 to 2, so\n    // keep track of the original for later so we can know if the source originally failed\n    tag.initNetworkState_ = tag.networkState;\n\n    // Wrap video tag in div (el/box) container\n    if (tag.parentNode && !playerElIngest) {\n      tag.parentNode.insertBefore(el, tag);\n    }\n\n    // insert the tag as the first child of the player element\n    // then manually add it to the children array so that this.addChild\n    // will work properly for other components\n    //\n    // Breaks iPhone, fixed in HTML5 setup.\n    Dom.insertElFirst(tag, el);\n    this.children_.unshift(tag);\n    this.el_ = el;\n    return el;\n  };\n\n  /**\n   * A getter/setter for the `Player`'s width.\n   *\n   * @param {number} [value]\n   *        The value to set the `Player's width to.\n   *\n   * @return {number}\n   *         The current width of the `Player`.\n   */\n\n  Player.prototype.width = function width(value) {\n    return this.dimension('width', value);\n  };\n\n  /**\n   * A getter/setter for the `Player`'s height.\n   *\n   * @param {number} [value]\n   *        The value to set the `Player's heigth to.\n   *\n   * @return {number}\n   *         The current heigth of the `Player`.\n   */\n\n  Player.prototype.height = function height(value) {\n    return this.dimension('height', value);\n  };\n\n  /**\n   * A getter/setter for the `Player`'s width & height.\n   *\n   * @param {string} dimension\n   *        This string can be:\n   *        - 'width'\n   *        - 'height'\n   *\n   * @param {number} [value]\n   *        Value for dimension specified in the first argument.\n   *\n   * @return {Player|number}\n   *         - Returns itself when setting; method can be chained.\n   *         - The dimension arguments value when getting (width/height).\n   */\n\n  Player.prototype.dimension = function dimension(_dimension, value) {\n    var privDimension = _dimension + '_';\n    if (value === undefined) {\n      return this[privDimension] || 0;\n    }\n    if (value === '') {\n      // If an empty string is given, reset the dimension to be automatic\n      this[privDimension] = undefined;\n    } else {\n      var parsedVal = parseFloat(value);\n      if (isNaN(parsedVal)) {\n        _log2['default'].error('Improper value \"' + value + '\" supplied for for ' + _dimension);\n        return this;\n      }\n      this[privDimension] = parsedVal;\n    }\n    this.updateStyleEl_();\n    return this;\n  };\n\n  /**\n   * A getter/setter/toggler for the vjs-fluid `className` on the `Player`.\n   *\n   * @param {boolean} [bool]\n   *        - A value of true adds the class.\n   *        - A value of false removes the class.\n   *        - No value will toggle the fluid class.\n   *\n   * @return {boolean|undefined}\n   *         - The value of fluid when getting.\n   *         - `undefined` when setting.\n   */\n\n  Player.prototype.fluid = function fluid(bool) {\n    if (bool === undefined) {\n      return !!this.fluid_;\n    }\n    this.fluid_ = !!bool;\n    if (bool) {\n      this.addClass('vjs-fluid');\n    } else {\n      this.removeClass('vjs-fluid');\n    }\n    this.updateStyleEl_();\n  };\n\n  /**\n   * Get/Set the aspect ratio\n   *\n   * @param {string} [ratio]\n   *        Aspect ratio for player\n   *\n   * @return {string|undefined}\n   *         returns the current aspect ratio when getting\n   */\n\n  /**\n   * A getter/setter for the `Player`'s aspect ratio.\n   *\n   * @param {string} [ratio]\n   *        The value to set the `Player's aspect ratio to.\n   *\n   * @return {string|undefined}\n   *         - The current aspect ratio of the `Player` when getting.\n   *         - undefined when setting\n   */\n\n  Player.prototype.aspectRatio = function aspectRatio(ratio) {\n    if (ratio === undefined) {\n      return this.aspectRatio_;\n    }\n\n    // Check for width:height format\n    if (!/^\\d+\\:\\d+$/.test(ratio)) {\n      throw new Error('Improper value supplied for aspect ratio. The format should be width:height, for example 16:9.');\n    }\n    this.aspectRatio_ = ratio;\n\n    // We're assuming if you set an aspect ratio you want fluid mode,\n    // because in fixed mode you could calculate width and height yourself.\n    this.fluid(true);\n    this.updateStyleEl_();\n  };\n\n  /**\n   * Update styles of the `Player` element (height, width and aspect ratio).\n   *\n   * @private\n   * @listens Tech#loadedmetadata\n   */\n\n  Player.prototype.updateStyleEl_ = function updateStyleEl_() {\n    if (_window2['default'].VIDEOJS_NO_DYNAMIC_STYLE === true) {\n      var _width = typeof this.width_ === 'number' ? this.width_ : this.options_.width;\n      var _height = typeof this.height_ === 'number' ? this.height_ : this.options_.height;\n      var techEl = this.tech_ && this.tech_.el();\n      if (techEl) {\n        if (_width >= 0) {\n          techEl.width = _width;\n        }\n        if (_height >= 0) {\n          techEl.height = _height;\n        }\n      }\n      return;\n    }\n    var width = void 0;\n    var height = void 0;\n    var aspectRatio = void 0;\n    var idClass = void 0;\n\n    // The aspect ratio is either used directly or to calculate width and height.\n    if (this.aspectRatio_ !== undefined && this.aspectRatio_ !== 'auto') {\n      // Use any aspectRatio that's been specifically set\n      aspectRatio = this.aspectRatio_;\n    } else if (this.videoWidth() > 0) {\n      // Otherwise try to get the aspect ratio from the video metadata\n      aspectRatio = this.videoWidth() + ':' + this.videoHeight();\n    } else {\n      // Or use a default. The video element's is 2:1, but 16:9 is more common.\n      aspectRatio = '16:9';\n    }\n\n    // Get the ratio as a decimal we can use to calculate dimensions\n    var ratioParts = aspectRatio.split(':');\n    var ratioMultiplier = ratioParts[1] / ratioParts[0];\n    if (this.width_ !== undefined) {\n      // Use any width that's been specifically set\n      width = this.width_;\n    } else if (this.height_ !== undefined) {\n      // Or calulate the width from the aspect ratio if a height has been set\n      width = this.height_ / ratioMultiplier;\n    } else {\n      // Or use the video's metadata, or use the video el's default of 300\n      width = this.videoWidth() || 300;\n    }\n    if (this.height_ !== undefined) {\n      // Use any height that's been specifically set\n      height = this.height_;\n    } else {\n      // Otherwise calculate the height from the ratio and the width\n      height = width * ratioMultiplier;\n    }\n\n    // Ensure the CSS class is valid by starting with an alpha character\n    if (/^[^a-zA-Z]/.test(this.id())) {\n      idClass = 'dimensions-' + this.id();\n    } else {\n      idClass = this.id() + '-dimensions';\n    }\n\n    // Ensure the right class is still on the player for the style element\n    this.addClass(idClass);\n    stylesheet.setTextContent(this.styleEl_, '\\n      .' + idClass + ' {\\n        width: ' + width + 'px;\\n        height: ' + height + 'px;\\n      }\\n\\n      .' + idClass + '.vjs-fluid {\\n        padding-top: ' + ratioMultiplier * 100 + '%;\\n      }\\n    ');\n  };\n\n  /**\n   * Load/Create an instance of playback {@link Tech} including element\n   * and API methods. Then append the `Tech` element in `Player` as a child.\n   *\n   * @param {string} techName\n   *        name of the playback technology\n   *\n   * @param {string} source\n   *        video source\n   *\n   * @private\n   */\n\n  Player.prototype.loadTech_ = function loadTech_(techName, source) {\n    var _this2 = this;\n\n    // Pause and remove current playback technology\n    if (this.tech_) {\n      this.unloadTech_();\n    }\n\n    // get rid of the HTML5 video tag as soon as we are using another tech\n    if (techName !== 'Html5' && this.tag) {\n      _tech2['default'].getTech('Html5').disposeMediaElement(this.tag);\n      this.tag.player = null;\n      this.tag = null;\n    }\n    this.techName_ = techName;\n\n    // Turn off API access because we're loading a new tech that might load asynchronously\n    this.isReady_ = false;\n\n    // Grab tech-specific options from player options and add source and parent element to use.\n    var techOptions = (0, _obj.assign)({\n      source: source,\n      'nativeControlsForTouch': this.options_.nativeControlsForTouch,\n      'playerId': this.id(),\n      'techId': this.id() + '_' + techName + '_api',\n      'videoTracks': this.videoTracks_,\n      'textTracks': this.textTracks_,\n      'audioTracks': this.audioTracks_,\n      'autoplay': this.options_.autoplay,\n      'playsinline': this.options_.playsinline,\n      'preload': this.options_.preload,\n      'loop': this.options_.loop,\n      'muted': this.options_.muted,\n      'poster': this.poster(),\n      'language': this.language(),\n      'playerElIngest': this.playerElIngest_ || false,\n      'vtt.js': this.options_['vtt.js']\n    }, this.options_[techName.toLowerCase()]);\n    if (this.tag) {\n      techOptions.tag = this.tag;\n    }\n    if (source) {\n      this.currentType_ = source.type;\n      if (source.src === this.cache_.src && this.cache_.currentTime > 0) {\n        techOptions.startTime = this.cache_.currentTime;\n      }\n      this.cache_.sources = null;\n      this.cache_.source = source;\n      this.cache_.src = source.src;\n    }\n\n    // Initialize tech instance\n    var TechComponent = _tech2['default'].getTech(techName);\n\n    // Support old behavior of techs being registered as components.\n    // Remove once that deprecated behavior is removed.\n    if (!TechComponent) {\n      TechComponent = _component2['default'].getComponent(techName);\n    }\n    this.tech_ = new TechComponent(techOptions);\n\n    // player.triggerReady is always async, so don't need this to be async\n    this.tech_.ready(Fn.bind(this, this.handleTechReady_), true);\n    _textTrackListConverter2['default'].jsonToTextTracks(this.textTracksJson_ || [], this.tech_);\n\n    // Listen to all HTML5-defined events and trigger them on the player\n    TECH_EVENTS_RETRIGGER.forEach(function (event) {\n      _this2.on(_this2.tech_, event, _this2['handleTech' + (0, _toTitleCase2['default'])(event) + '_']);\n    });\n    this.on(this.tech_, 'loadstart', this.handleTechLoadStart_);\n    this.on(this.tech_, 'waiting', this.handleTechWaiting_);\n    this.on(this.tech_, 'canplay', this.handleTechCanPlay_);\n    this.on(this.tech_, 'canplaythrough', this.handleTechCanPlayThrough_);\n    this.on(this.tech_, 'playing', this.handleTechPlaying_);\n    this.on(this.tech_, 'ended', this.handleTechEnded_);\n    this.on(this.tech_, 'seeking', this.handleTechSeeking_);\n    this.on(this.tech_, 'seeked', this.handleTechSeeked_);\n    this.on(this.tech_, 'play', this.handleTechPlay_);\n    this.on(this.tech_, 'firstplay', this.handleTechFirstPlay_);\n    this.on(this.tech_, 'pause', this.handleTechPause_);\n    this.on(this.tech_, 'durationchange', this.handleTechDurationChange_);\n    this.on(this.tech_, 'fullscreenchange', this.handleTechFullscreenChange_);\n    this.on(this.tech_, 'error', this.handleTechError_);\n    this.on(this.tech_, 'loadedmetadata', this.updateStyleEl_);\n    this.on(this.tech_, 'posterchange', this.handleTechPosterChange_);\n    this.on(this.tech_, 'textdata', this.handleTechTextData_);\n    this.usingNativeControls(this.techGet_('controls'));\n    if (this.controls() && !this.usingNativeControls()) {\n      this.addTechControlsListeners_();\n    }\n\n    // Add the tech element in the DOM if it was not already there\n    // Make sure to not insert the original video element if using Html5\n    if (this.tech_.el().parentNode !== this.el() && (techName !== 'Html5' || !this.tag)) {\n      Dom.insertElFirst(this.tech_.el(), this.el());\n    }\n\n    // Get rid of the original video tag reference after the first tech is loaded\n    if (this.tag) {\n      this.tag.player = null;\n      this.tag = null;\n    }\n  };\n\n  /**\n   * Unload and dispose of the current playback {@link Tech}.\n   *\n   * @private\n   */\n\n  Player.prototype.unloadTech_ = function unloadTech_() {\n    // Save the current text tracks so that we can reuse the same text tracks with the next tech\n    this.videoTracks_ = this.videoTracks();\n    this.textTracks_ = this.textTracks();\n    this.audioTracks_ = this.audioTracks();\n    this.textTracksJson_ = _textTrackListConverter2['default'].textTracksToJson(this.tech_);\n    this.isReady_ = false;\n    this.tech_.dispose();\n    this.tech_ = false;\n  };\n\n  /**\n   * Return a reference to the current {@link Tech}, but only if given an object with the\n   * `IWillNotUseThisInPlugins` property having a true value. This is try and prevent misuse\n   * of techs by plugins.\n   *\n   * @param {Object} safety\n   *        An object that must contain `{IWillNotUseThisInPlugins: true}`\n   *\n   * @param {boolean} safety.IWillNotUseThisInPlugins\n   *        Must be set to true or else this function will throw an error.\n   *\n   * @return {Tech}\n   *         The Tech\n   */\n\n  Player.prototype.tech = function tech(safety) {\n    if (safety && safety.IWillNotUseThisInPlugins) {\n      return this.tech_;\n    }\n    var errorText = '\\n      Please make sure that you are not using this inside of a plugin.\\n      To disable this alert and error, please pass in an object with\\n      `IWillNotUseThisInPlugins` to the `tech` method. See\\n      https://github.com/videojs/video.js/issues/2617 for more info.\\n    ';\n    _window2['default'].alert(errorText);\n    throw new Error(errorText);\n  };\n\n  /**\n   * Set up click and touch listeners for the playback element\n   *\n   * - On desktops: a click on the video itself will toggle playback\n   * - On mobile devices: a click on the video toggles controls\n   *   which is done by toggling the user state between active and\n   *   inactive\n   * - A tap can signal that a user has become active or has become inactive\n   *   e.g. a quick tap on an iPhone movie should reveal the controls. Another\n   *   quick tap should hide them again (signaling the user is in an inactive\n   *   viewing state)\n   * - In addition to this, we still want the user to be considered inactive after\n   *   a few seconds of inactivity.\n   *\n   * > Note: the only part of iOS interaction we can't mimic with this setup\n   * is a touch and hold on the video element counting as activity in order to\n   * keep the controls showing, but that shouldn't be an issue. A touch and hold\n   * on any controls will still keep the user active\n   *\n   * @private\n   */\n\n  Player.prototype.addTechControlsListeners_ = function addTechControlsListeners_() {\n    // Make sure to remove all the previous listeners in case we are called multiple times.\n    this.removeTechControlsListeners_();\n\n    // Some browsers (Chrome & IE) don't trigger a click on a flash swf, but do\n    // trigger mousedown/up.\n    // http://stackoverflow.com/questions/1444562/javascript-onclick-event-over-flash-object\n    // Any touch events are set to block the mousedown event from happening\n    this.on(this.tech_, 'mousedown', this.handleTechClick_);\n\n    // If the controls were hidden we don't want that to change without a tap event\n    // so we'll check if the controls were already showing before reporting user\n    // activity\n    this.on(this.tech_, 'touchstart', this.handleTechTouchStart_);\n    this.on(this.tech_, 'touchmove', this.handleTechTouchMove_);\n    this.on(this.tech_, 'touchend', this.handleTechTouchEnd_);\n\n    // The tap listener needs to come after the touchend listener because the tap\n    // listener cancels out any reportedUserActivity when setting userActive(false)\n    this.on(this.tech_, 'tap', this.handleTechTap_);\n  };\n\n  /**\n   * Remove the listeners used for click and tap controls. This is needed for\n   * toggling to controls disabled, where a tap/touch should do nothing.\n   *\n   * @private\n   */\n\n  Player.prototype.removeTechControlsListeners_ = function removeTechControlsListeners_() {\n    // We don't want to just use `this.off()` because there might be other needed\n    // listeners added by techs that extend this.\n    this.off(this.tech_, 'tap', this.handleTechTap_);\n    this.off(this.tech_, 'touchstart', this.handleTechTouchStart_);\n    this.off(this.tech_, 'touchmove', this.handleTechTouchMove_);\n    this.off(this.tech_, 'touchend', this.handleTechTouchEnd_);\n    this.off(this.tech_, 'mousedown', this.handleTechClick_);\n  };\n\n  /**\n   * Player waits for the tech to be ready\n   *\n   * @private\n   */\n\n  Player.prototype.handleTechReady_ = function handleTechReady_() {\n    this.triggerReady();\n\n    // Keep the same volume as before\n    if (this.cache_.volume) {\n      this.techCall_('setVolume', this.cache_.volume);\n    }\n\n    // Look if the tech found a higher resolution poster while loading\n    this.handleTechPosterChange_();\n\n    // Update the duration if available\n    this.handleTechDurationChange_();\n\n    // Chrome and Safari both have issues with autoplay.\n    // In Safari (5.1.1), when we move the video element into the container div, autoplay doesn't work.\n    // In Chrome (15), if you have autoplay + a poster + no controls, the video gets hidden (but audio plays)\n    // This fixes both issues. Need to wait for API, so it updates displays correctly\n    if ((this.src() || this.currentSrc()) && this.tag && this.options_.autoplay && this.paused()) {\n      try {\n        // Chrome Fix. Fixed in Chrome v16.\n        delete this.tag.poster;\n      } catch (e) {\n        (0, _log2['default'])('deleting tag.poster throws in some browsers', e);\n      }\n      this.play();\n    }\n  };\n\n  /**\n   * Retrigger the `loadstart` event that was triggered by the {@link Tech}. This\n   * function will also trigger {@link Player#firstplay} if it is the first loadstart\n   * for a video.\n   *\n   * @fires Player#loadstart\n   * @fires Player#firstplay\n   * @listens Tech#loadstart\n   * @private\n   */\n\n  Player.prototype.handleTechLoadStart_ = function handleTechLoadStart_() {\n    // TODO: Update to use `emptied` event instead. See #1277.\n\n    this.removeClass('vjs-ended');\n    this.removeClass('vjs-seeking');\n\n    // reset the error state\n    this.error(null);\n\n    // If it's already playing we want to trigger a firstplay event now.\n    // The firstplay event relies on both the play and loadstart events\n    // which can happen in any order for a new source\n    if (!this.paused()) {\n      /**\n       * Fired when the user agent begins looking for media data\n       *\n       * @event Player#loadstart\n       * @type {EventTarget~Event}\n       */\n      this.trigger('loadstart');\n      this.trigger('firstplay');\n    } else {\n      // reset the hasStarted state\n      this.hasStarted(false);\n      this.trigger('loadstart');\n    }\n  };\n\n  /**\n   * Add/remove the vjs-has-started class\n   *\n   * @fires Player#firstplay\n   *\n   * @param {boolean} hasStarted\n   *        - true: adds the class\n   *        - false: remove the class\n   *\n   * @return {boolean}\n   *         the boolean value of hasStarted\n   */\n\n  Player.prototype.hasStarted = function hasStarted(_hasStarted) {\n    if (_hasStarted !== undefined) {\n      // only update if this is a new value\n      if (this.hasStarted_ !== _hasStarted) {\n        this.hasStarted_ = _hasStarted;\n        if (_hasStarted) {\n          this.addClass('vjs-has-started');\n          // trigger the firstplay event if this newly has played\n          this.trigger('firstplay');\n        } else {\n          this.removeClass('vjs-has-started');\n        }\n      }\n      return this;\n    }\n    return !!this.hasStarted_;\n  };\n\n  /**\n   * Fired whenever the media begins or resumes playback\n   *\n   * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-play}\n   * @fires Player#play\n   * @listens Tech#play\n   * @private\n   */\n\n  Player.prototype.handleTechPlay_ = function handleTechPlay_() {\n    this.removeClass('vjs-ended');\n    this.removeClass('vjs-paused');\n    this.addClass('vjs-playing');\n\n    // hide the poster when the user hits play\n    this.hasStarted(true);\n    /**\n     * Triggered whenever an {@link Tech#play} event happens. Indicates that\n     * playback has started or resumed.\n     *\n     * @event Player#play\n     * @type {EventTarget~Event}\n     */\n    this.trigger('play');\n  };\n\n  /**\n   * Retrigger the `waiting` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#waiting\n   * @listens Tech#waiting\n   * @private\n   */\n\n  Player.prototype.handleTechWaiting_ = function handleTechWaiting_() {\n    var _this3 = this;\n    this.addClass('vjs-waiting');\n    /**\n     * A readyState change on the DOM element has caused playback to stop.\n     *\n     * @event Player#waiting\n     * @type {EventTarget~Event}\n     */\n    this.trigger('waiting');\n    this.one('timeupdate', function () {\n      return _this3.removeClass('vjs-waiting');\n    });\n  };\n\n  /**\n   * Retrigger the `canplay` event that was triggered by the {@link Tech}.\n   * > Note: This is not consistent between browsers. See #1351\n   *\n   * @fires Player#canplay\n   * @listens Tech#canplay\n   * @private\n   */\n\n  Player.prototype.handleTechCanPlay_ = function handleTechCanPlay_() {\n    this.removeClass('vjs-waiting');\n    /**\n     * The media has a readyState of HAVE_FUTURE_DATA or greater.\n     *\n     * @event Player#canplay\n     * @type {EventTarget~Event}\n     */\n    this.trigger('canplay');\n  };\n\n  /**\n   * Retrigger the `canplaythrough` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#canplaythrough\n   * @listens Tech#canplaythrough\n   * @private\n   */\n\n  Player.prototype.handleTechCanPlayThrough_ = function handleTechCanPlayThrough_() {\n    this.removeClass('vjs-waiting');\n    /**\n     * The media has a readyState of HAVE_ENOUGH_DATA or greater. This means that the\n     * entire media file can be played without buffering.\n     *\n     * @event Player#canplaythrough\n     * @type {EventTarget~Event}\n     */\n    this.trigger('canplaythrough');\n  };\n\n  /**\n   * Retrigger the `playing` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#playing\n   * @listens Tech#playing\n   * @private\n   */\n\n  Player.prototype.handleTechPlaying_ = function handleTechPlaying_() {\n    this.removeClass('vjs-waiting');\n    /**\n     * The media is no longer blocked from playback, and has started playing.\n     *\n     * @event Player#playing\n     * @type {EventTarget~Event}\n     */\n    this.trigger('playing');\n  };\n\n  /**\n   * Retrigger the `seeking` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#seeking\n   * @listens Tech#seeking\n   * @private\n   */\n\n  Player.prototype.handleTechSeeking_ = function handleTechSeeking_() {\n    this.addClass('vjs-seeking');\n    /**\n     * Fired whenever the player is jumping to a new time\n     *\n     * @event Player#seeking\n     * @type {EventTarget~Event}\n     */\n    this.trigger('seeking');\n  };\n\n  /**\n   * Retrigger the `seeked` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#seeked\n   * @listens Tech#seeked\n   * @private\n   */\n\n  Player.prototype.handleTechSeeked_ = function handleTechSeeked_() {\n    this.removeClass('vjs-seeking');\n    /**\n     * Fired when the player has finished jumping to a new time\n     *\n     * @event Player#seeked\n     * @type {EventTarget~Event}\n     */\n    this.trigger('seeked');\n  };\n\n  /**\n   * Retrigger the `firstplay` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#firstplay\n   * @listens Tech#firstplay\n   * @deprecated As of 6.0 passing the `starttime` option to the player will be deprecated\n   * @private\n   */\n\n  Player.prototype.handleTechFirstPlay_ = function handleTechFirstPlay_() {\n    // If the first starttime attribute is specified\n    // then we will start at the given offset in seconds\n    if (this.options_.starttime) {\n      _log2['default'].warn('Passing the `starttime` option to the player will be deprecated in 6.0');\n      this.currentTime(this.options_.starttime);\n    }\n    this.addClass('vjs-has-started');\n    /**\n     * Fired the first time a video is played. Not part of the HLS spec, and this is\n     * probably not the best implementation yet, so use sparingly. If you don't have a\n     * reason to prevent playback, use `myPlayer.one('play');` instead.\n     *\n     * @event Player#firstplay\n     * @type {EventTarget~Event}\n     */\n    this.trigger('firstplay');\n  };\n\n  /**\n   * Retrigger the `pause` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#pause\n   * @listens Tech#pause\n   * @private\n   */\n\n  Player.prototype.handleTechPause_ = function handleTechPause_() {\n    this.removeClass('vjs-playing');\n    this.addClass('vjs-paused');\n    /**\n     * Fired whenever the media has been paused\n     *\n     * @event Player#pause\n     * @type {EventTarget~Event}\n     */\n    this.trigger('pause');\n  };\n\n  /**\n   * Retrigger the `ended` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#ended\n   * @listens Tech#ended\n   * @private\n   */\n\n  Player.prototype.handleTechEnded_ = function handleTechEnded_() {\n    this.addClass('vjs-ended');\n    if (this.options_.loop) {\n      this.currentTime(0);\n      this.play();\n    } else if (!this.paused()) {\n      this.pause();\n    }\n\n    /**\n     * Fired when the end of the media resource is reached (currentTime == duration)\n     *\n     * @event Player#ended\n     * @type {EventTarget~Event}\n     */\n    this.trigger('ended');\n  };\n\n  /**\n   * Fired when the duration of the media resource is first known or changed\n   *\n   * @listens Tech#durationchange\n   * @private\n   */\n\n  Player.prototype.handleTechDurationChange_ = function handleTechDurationChange_() {\n    this.duration(this.techGet_('duration'));\n  };\n\n  /**\n   * Handle a click on the media element to play/pause\n   *\n   * @param {EventTarget~Event} event\n   *        the event that caused this function to trigger\n   *\n   * @listens Tech#mousedown\n   * @private\n   */\n\n  Player.prototype.handleTechClick_ = function handleTechClick_(event) {\n    // We're using mousedown to detect clicks thanks to Flash, but mousedown\n    // will also be triggered with right-clicks, so we need to prevent that\n    if (event.button !== 0) {\n      return;\n    }\n\n    // When controls are disabled a click should not toggle playback because\n    // the click is considered a control\n    if (this.controls()) {\n      if (this.paused()) {\n        this.play();\n      } else {\n        this.pause();\n      }\n    }\n  };\n\n  /**\n   * Handle a tap on the media element. It will toggle the user\n   * activity state, which hides and shows the controls.\n   *\n   * @listens Tech#tap\n   * @private\n   */\n\n  Player.prototype.handleTechTap_ = function handleTechTap_() {\n    this.userActive(!this.userActive());\n  };\n\n  /**\n   * Handle touch to start\n   *\n   * @listens Tech#touchstart\n   * @private\n   */\n\n  Player.prototype.handleTechTouchStart_ = function handleTechTouchStart_() {\n    this.userWasActive = this.userActive();\n  };\n\n  /**\n   * Handle touch to move\n   *\n   * @listens Tech#touchmove\n   * @private\n   */\n\n  Player.prototype.handleTechTouchMove_ = function handleTechTouchMove_() {\n    if (this.userWasActive) {\n      this.reportUserActivity();\n    }\n  };\n\n  /**\n   * Handle touch to end\n   *\n   * @param {EventTarget~Event} event\n   *        the touchend event that triggered\n   *        this function\n   *\n   * @listens Tech#touchend\n   * @private\n   */\n\n  Player.prototype.handleTechTouchEnd_ = function handleTechTouchEnd_(event) {\n    // Stop the mouse events from also happening\n    event.preventDefault();\n  };\n\n  /**\n   * Fired when the player switches in or out of fullscreen mode\n   *\n   * @private\n   * @listens Player#fullscreenchange\n   */\n\n  Player.prototype.handleFullscreenChange_ = function handleFullscreenChange_() {\n    if (this.isFullscreen()) {\n      this.addClass('vjs-fullscreen');\n    } else {\n      this.removeClass('vjs-fullscreen');\n    }\n  };\n\n  /**\n   * native click events on the SWF aren't triggered on IE11, Win8.1RT\n   * use stageclick events triggered from inside the SWF instead\n   *\n   * @private\n   * @listens stageclick\n   */\n\n  Player.prototype.handleStageClick_ = function handleStageClick_() {\n    this.reportUserActivity();\n  };\n\n  /**\n   * Handle Tech Fullscreen Change\n   *\n   * @param {EventTarget~Event} event\n   *        the fullscreenchange event that triggered this function\n   *\n   * @param {Object} data\n   *        the data that was sent with the event\n   *\n   * @private\n   * @listens Tech#fullscreenchange\n   * @fires Player#fullscreenchange\n   */\n\n  Player.prototype.handleTechFullscreenChange_ = function handleTechFullscreenChange_(event, data) {\n    if (data) {\n      this.isFullscreen(data.isFullscreen);\n    }\n    /**\n     * Fired when going in and out of fullscreen.\n     *\n     * @event Player#fullscreenchange\n     * @type {EventTarget~Event}\n     */\n    this.trigger('fullscreenchange');\n  };\n\n  /**\n   * Fires when an error occurred during the loading of an audio/video.\n   *\n   * @private\n   * @listens Tech#error\n   */\n\n  Player.prototype.handleTechError_ = function handleTechError_() {\n    var error = this.tech_.error();\n    this.error(error);\n  };\n\n  /**\n   * Retrigger the `textdata` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#textdata\n   * @listens Tech#textdata\n   * @private\n   */\n\n  Player.prototype.handleTechTextData_ = function handleTechTextData_() {\n    var data = null;\n    if (arguments.length > 1) {\n      data = arguments[1];\n    }\n\n    /**\n     * Fires when we get a textdata event from tech\n     *\n     * @event Player#textdata\n     * @type {EventTarget~Event}\n     */\n    this.trigger('textdata', data);\n  };\n\n  /**\n   * Get object for cached values.\n   *\n   * @return {Object}\n   *         get the current object cache\n   */\n\n  Player.prototype.getCache = function getCache() {\n    return this.cache_;\n  };\n\n  /**\n   * Pass values to the playback tech\n   *\n   * @param {string} [method]\n   *        the method to call\n   *\n   * @param {Object} arg\n   *        the argument to pass\n   *\n   * @private\n   */\n\n  Player.prototype.techCall_ = function techCall_(method, arg) {\n    // If it's not ready yet, call method when it is\n    if (this.tech_ && !this.tech_.isReady_) {\n      this.tech_.ready(function () {\n        this[method](arg);\n      }, true);\n\n      // Otherwise call method now\n    } else {\n      try {\n        if (this.tech_) {\n          this.tech_[method](arg);\n        }\n      } catch (e) {\n        (0, _log2['default'])(e);\n        throw e;\n      }\n    }\n  };\n\n  /**\n   * Get calls can't wait for the tech, and sometimes don't need to.\n   *\n   * @param {string} method\n   *        Tech method\n   *\n   * @return {Function|undefined}\n   *         the method or undefined\n   *\n   * @private\n   */\n\n  Player.prototype.techGet_ = function techGet_(method) {\n    if (this.tech_ && this.tech_.isReady_) {\n      // Flash likes to die and reload when you hide or reposition it.\n      // In these cases the object methods go away and we get errors.\n      // When that happens we'll catch the errors and inform tech that it's not ready any more.\n      try {\n        return this.tech_[method]();\n      } catch (e) {\n        // When building additional tech libs, an expected method may not be defined yet\n        if (this.tech_[method] === undefined) {\n          (0, _log2['default'])('Video.js: ' + method + ' method not defined for ' + this.techName_ + ' playback technology.', e);\n\n          // When a method isn't available on the object it throws a TypeError\n        } else if (e.name === 'TypeError') {\n          (0, _log2['default'])('Video.js: ' + method + ' unavailable on ' + this.techName_ + ' playback technology element.', e);\n          this.tech_.isReady_ = false;\n        } else {\n          (0, _log2['default'])(e);\n        }\n        throw e;\n      }\n    }\n    return;\n  };\n\n  /**\n   * start media playback\n   *\n   * @return {Player}\n   *         A reference to the player object this function was called on\n   */\n\n  Player.prototype.play = function play() {\n    // Only calls the tech's play if we already have a src loaded\n    if (this.src() || this.currentSrc()) {\n      this.techCall_('play');\n    } else {\n      this.tech_.one('loadstart', function () {\n        this.play();\n      });\n    }\n    return this;\n  };\n\n  /**\n   * Pause the video playback\n   *\n   * @return {Player}\n   *         A reference to the player object this function was called on\n   */\n\n  Player.prototype.pause = function pause() {\n    this.techCall_('pause');\n    return this;\n  };\n\n  /**\n   * Check if the player is paused or has yet to play\n   *\n   * @return {boolean}\n   *         - false: if the media is currently playing\n   *         - true: if media is not currently playing\n   */\n\n  Player.prototype.paused = function paused() {\n    // The initial state of paused should be true (in Safari it's actually false)\n    return this.techGet_('paused') === false ? false : true;\n  };\n\n  /**\n   * Returns whether or not the user is \"scrubbing\". Scrubbing is\n   * when the user has clicked the progress bar handle and is\n   * dragging it along the progress bar.\n   *\n   * @param {boolean} [isScrubbing]\n   *        wether the user is or is not scrubbing\n   *\n   * @return {boolean|Player}\n   *         A instance of the player that called this function when setting,\n   *         and the value of scrubbing when getting\n   */\n\n  Player.prototype.scrubbing = function scrubbing(isScrubbing) {\n    if (isScrubbing !== undefined) {\n      this.scrubbing_ = !!isScrubbing;\n      if (isScrubbing) {\n        this.addClass('vjs-scrubbing');\n      } else {\n        this.removeClass('vjs-scrubbing');\n      }\n      return this;\n    }\n    return this.scrubbing_;\n  };\n\n  /**\n   * Get or set the current time (in seconds)\n   *\n   * @param {number|string} [seconds]\n   *        The time to seek to in seconds\n   *\n   * @return {Player|number}\n   *         - the current time in seconds when getting\n   *         - a reference to the current player object when setting\n   */\n\n  Player.prototype.currentTime = function currentTime(seconds) {\n    if (seconds !== undefined) {\n      this.techCall_('setCurrentTime', seconds);\n      return this;\n    }\n\n    // cache last currentTime and return. default to 0 seconds\n    //\n    // Caching the currentTime is meant to prevent a massive amount of reads on the tech's\n    // currentTime when scrubbing, but may not provide much performance benefit afterall.\n    // Should be tested. Also something has to read the actual current time or the cache will\n    // never get updated.\n    this.cache_.currentTime = this.techGet_('currentTime') || 0;\n    return this.cache_.currentTime;\n  };\n\n  /**\n   * Normally gets the length in time of the video in seconds;\n   * in all but the rarest use cases an argument will NOT be passed to the method\n   *\n   * > **NOTE**: The video must have started loading before the duration can be\n   * known, and in the case of Flash, may not be known until the video starts\n   * playing.\n   *\n   * @fires Player#durationchange\n   *\n   * @param {number} [seconds]\n   *        The duration of the video to set in seconds\n   *\n   * @return {number|Player}\n   *         - The duration of the video in seconds when getting\n   *         - A reference to the player that called this function\n   *           when setting\n   */\n\n  Player.prototype.duration = function duration(seconds) {\n    if (seconds === undefined) {\n      // return NaN if the duration is not known\n      return this.cache_.duration !== undefined ? this.cache_.duration : NaN;\n    }\n    seconds = parseFloat(seconds);\n\n    // Standardize on Inifity for signaling video is live\n    if (seconds < 0) {\n      seconds = Infinity;\n    }\n    if (seconds !== this.cache_.duration) {\n      // Cache the last set value for optimized scrubbing (esp. Flash)\n      this.cache_.duration = seconds;\n      if (seconds === Infinity) {\n        this.addClass('vjs-live');\n      } else {\n        this.removeClass('vjs-live');\n      }\n      /**\n       * @event Player#durationchange\n       * @type {EventTarget~Event}\n       */\n      this.trigger('durationchange');\n    }\n    return this;\n  };\n\n  /**\n   * Calculates how much time is left in the video. Not part\n   * of the native video API.\n   *\n   * @return {number}\n   *         The time remaining in seconds\n   */\n\n  Player.prototype.remainingTime = function remainingTime() {\n    return this.duration() - this.currentTime();\n  };\n\n  //\n  // Kind of like an array of portions of the video that have been downloaded.\n\n  /**\n   * Get a TimeRange object with an array of the times of the video\n   * that have been downloaded. If you just want the percent of the\n   * video that's been downloaded, use bufferedPercent.\n   *\n   * @see [Buffered Spec]{@link http://dev.w3.org/html5/spec/video.html#dom-media-buffered}\n   *\n   * @return {TimeRange}\n   *         A mock TimeRange object (following HTML spec)\n   */\n\n  Player.prototype.buffered = function buffered() {\n    var buffered = this.techGet_('buffered');\n    if (!buffered || !buffered.length) {\n      buffered = (0, _timeRanges.createTimeRange)(0, 0);\n    }\n    return buffered;\n  };\n\n  /**\n   * Get the percent (as a decimal) of the video that's been downloaded.\n   * This method is not a part of the native HTML video API.\n   *\n   * @return {number}\n   *         A decimal between 0 and 1 representing the percent\n   *         that is bufferred 0 being 0% and 1 being 100%\n   */\n\n  Player.prototype.bufferedPercent = function bufferedPercent() {\n    return (0, _buffer.bufferedPercent)(this.buffered(), this.duration());\n  };\n\n  /**\n   * Get the ending time of the last buffered time range\n   * This is used in the progress bar to encapsulate all time ranges.\n   *\n   * @return {number}\n   *         The end of the last buffered time range\n   */\n\n  Player.prototype.bufferedEnd = function bufferedEnd() {\n    var buffered = this.buffered();\n    var duration = this.duration();\n    var end = buffered.end(buffered.length - 1);\n    if (end > duration) {\n      end = duration;\n    }\n    return end;\n  };\n\n  /**\n   * Get or set the current volume of the media\n   *\n   * @param  {number} [percentAsDecimal]\n   *         The new volume as a decimal percent:\n   *         - 0 is muted/0%/off\n   *         - 1.0 is 100%/full\n   *         - 0.5 is half volume or 50%\n   *\n   * @return {Player|number}\n   *         a reference to the calling player when setting and the\n   *         current volume as a percent when getting\n   */\n\n  Player.prototype.volume = function volume(percentAsDecimal) {\n    var vol = void 0;\n    if (percentAsDecimal !== undefined) {\n      // Force value to between 0 and 1\n      vol = Math.max(0, Math.min(1, parseFloat(percentAsDecimal)));\n      this.cache_.volume = vol;\n      this.techCall_('setVolume', vol);\n      return this;\n    }\n\n    // Default to 1 when returning current volume.\n    vol = parseFloat(this.techGet_('volume'));\n    return isNaN(vol) ? 1 : vol;\n  };\n\n  /**\n   * Get the current muted state, or turn mute on or off\n   *\n   * @param {boolean} [muted]\n   *        - true to mute\n   *        - false to unmute\n   *\n   * @return {boolean|Player}\n   *         - true if mute is on and getting\n   *         - false if mute is off and getting\n   *         - A reference to the current player when setting\n   */\n\n  Player.prototype.muted = function muted(_muted) {\n    if (_muted !== undefined) {\n      this.techCall_('setMuted', _muted);\n      return this;\n    }\n    return this.techGet_('muted') || false;\n  };\n\n  /**\n   * Check if current tech can support native fullscreen\n   * (e.g. with built in controls like iOS, so not our flash swf)\n   *\n   * @return {boolean}\n   *         if native fullscreen is supported\n   */\n\n  Player.prototype.supportsFullScreen = function supportsFullScreen() {\n    return this.techGet_('supportsFullScreen') || false;\n  };\n\n  /**\n   * Check if the player is in fullscreen mode or tell the player that it\n   * is or is not in fullscreen mode.\n   *\n   * > NOTE: As of the latest HTML5 spec, isFullscreen is no longer an official\n   * property and instead document.fullscreenElement is used. But isFullscreen is\n   * still a valuable property for internal player workings.\n   *\n   * @param  {boolean} [isFS]\n   *         Set the players current fullscreen state\n   *\n   * @return {boolean|Player}\n   *         - true if fullscreen is on and getting\n   *         - false if fullscreen is off and getting\n   *         - A reference to the current player when setting\n   */\n\n  Player.prototype.isFullscreen = function isFullscreen(isFS) {\n    if (isFS !== undefined) {\n      this.isFullscreen_ = !!isFS;\n      return this;\n    }\n    return !!this.isFullscreen_;\n  };\n\n  /**\n   * Increase the size of the video to full screen\n   * In some browsers, full screen is not supported natively, so it enters\n   * \"full window mode\", where the video fills the browser window.\n   * In browsers and devices that support native full screen, sometimes the\n   * browser's default controls will be shown, and not the Video.js custom skin.\n   * This includes most mobile devices (iOS, Android) and older versions of\n   * Safari.\n   *\n   * @fires Player#fullscreenchange\n   * @return {Player}\n   *         A reference to the current player\n   */\n\n  Player.prototype.requestFullscreen = function requestFullscreen() {\n    var fsApi = _fullscreenApi2['default'];\n    this.isFullscreen(true);\n    if (fsApi.requestFullscreen) {\n      // the browser supports going fullscreen at the element level so we can\n      // take the controls fullscreen as well as the video\n\n      // Trigger fullscreenchange event after change\n      // We have to specifically add this each time, and remove\n      // when canceling fullscreen. Otherwise if there's multiple\n      // players on a page, they would all be reacting to the same fullscreen\n      // events\n      Events.on(_document2['default'], fsApi.fullscreenchange, Fn.bind(this, function documentFullscreenChange(e) {\n        this.isFullscreen(_document2['default'][fsApi.fullscreenElement]);\n\n        // If cancelling fullscreen, remove event listener.\n        if (this.isFullscreen() === false) {\n          Events.off(_document2['default'], fsApi.fullscreenchange, documentFullscreenChange);\n        }\n        /**\n         * @event Player#fullscreenchange\n         * @type {EventTarget~Event}\n         */\n        this.trigger('fullscreenchange');\n      }));\n      this.el_[fsApi.requestFullscreen]();\n    } else if (this.tech_.supportsFullScreen()) {\n      // we can't take the video.js controls fullscreen but we can go fullscreen\n      // with native controls\n      this.techCall_('enterFullScreen');\n    } else {\n      // fullscreen isn't supported so we'll just stretch the video element to\n      // fill the viewport\n      this.enterFullWindow();\n      /**\n       * @event Player#fullscreenchange\n       * @type {EventTarget~Event}\n       */\n      this.trigger('fullscreenchange');\n    }\n    return this;\n  };\n\n  /**\n   * Return the video to its normal size after having been in full screen mode\n   *\n   * @fires Player#fullscreenchange\n   *\n   * @return {Player}\n   *         A reference to the current player\n   */\n\n  Player.prototype.exitFullscreen = function exitFullscreen() {\n    var fsApi = _fullscreenApi2['default'];\n    this.isFullscreen(false);\n\n    // Check for browser element fullscreen support\n    if (fsApi.requestFullscreen) {\n      _document2['default'][fsApi.exitFullscreen]();\n    } else if (this.tech_.supportsFullScreen()) {\n      this.techCall_('exitFullScreen');\n    } else {\n      this.exitFullWindow();\n      /**\n       * @event Player#fullscreenchange\n       * @type {EventTarget~Event}\n       */\n      this.trigger('fullscreenchange');\n    }\n    return this;\n  };\n\n  /**\n   * When fullscreen isn't supported we can stretch the\n   * video container to as wide as the browser will let us.\n   *\n   * @fires Player#enterFullWindow\n   */\n\n  Player.prototype.enterFullWindow = function enterFullWindow() {\n    this.isFullWindow = true;\n\n    // Storing original doc overflow value to return to when fullscreen is off\n    this.docOrigOverflow = _document2['default'].documentElement.style.overflow;\n\n    // Add listener for esc key to exit fullscreen\n    Events.on(_document2['default'], 'keydown', Fn.bind(this, this.fullWindowOnEscKey));\n\n    // Hide any scroll bars\n    _document2['default'].documentElement.style.overflow = 'hidden';\n\n    // Apply fullscreen styles\n    Dom.addElClass(_document2['default'].body, 'vjs-full-window');\n\n    /**\n     * @event Player#enterFullWindow\n     * @type {EventTarget~Event}\n     */\n    this.trigger('enterFullWindow');\n  };\n\n  /**\n   * Check for call to either exit full window or\n   * full screen on ESC key\n   *\n   * @param {string} event\n   *        Event to check for key press\n   */\n\n  Player.prototype.fullWindowOnEscKey = function fullWindowOnEscKey(event) {\n    if (event.keyCode === 27) {\n      if (this.isFullscreen() === true) {\n        this.exitFullscreen();\n      } else {\n        this.exitFullWindow();\n      }\n    }\n  };\n\n  /**\n   * Exit full window\n   *\n   * @fires Player#exitFullWindow\n   */\n\n  Player.prototype.exitFullWindow = function exitFullWindow() {\n    this.isFullWindow = false;\n    Events.off(_document2['default'], 'keydown', this.fullWindowOnEscKey);\n\n    // Unhide scroll bars.\n    _document2['default'].documentElement.style.overflow = this.docOrigOverflow;\n\n    // Remove fullscreen styles\n    Dom.removeElClass(_document2['default'].body, 'vjs-full-window');\n\n    // Resize the box, controller, and poster to original sizes\n    // this.positionAll();\n    /**\n     * @event Player#exitFullWindow\n     * @type {EventTarget~Event}\n     */\n    this.trigger('exitFullWindow');\n  };\n\n  /**\n   * Check whether the player can play a given mimetype\n   *\n   * @see https://www.w3.org/TR/2011/WD-html5-20110113/video.html#dom-navigator-canplaytype\n   *\n   * @param {string} type\n   *        The mimetype to check\n   *\n   * @return {string}\n   *         'probably', 'maybe', or '' (empty string)\n   */\n\n  Player.prototype.canPlayType = function canPlayType(type) {\n    var can = void 0;\n\n    // Loop through each playback technology in the options order\n    for (var i = 0, j = this.options_.techOrder; i < j.length; i++) {\n      var techName = (0, _toTitleCase2['default'])(j[i]);\n      var tech = _tech2['default'].getTech(techName);\n\n      // Support old behavior of techs being registered as components.\n      // Remove once that deprecated behavior is removed.\n      if (!tech) {\n        tech = _component2['default'].getComponent(techName);\n      }\n\n      // Check if the current tech is defined before continuing\n      if (!tech) {\n        _log2['default'].error('The \"' + techName + '\" tech is undefined. Skipped browser support check for that tech.');\n        continue;\n      }\n\n      // Check if the browser supports this technology\n      if (tech.isSupported()) {\n        can = tech.canPlayType(type);\n        if (can) {\n          return can;\n        }\n      }\n    }\n    return '';\n  };\n\n  /**\n   * Select source based on tech-order or source-order\n   * Uses source-order selection if `options.sourceOrder` is truthy. Otherwise,\n   * defaults to tech-order selection\n   *\n   * @param {Array} sources\n   *        The sources for a media asset\n   *\n   * @return {Object|boolean}\n   *         Object of source and tech order or false\n   */\n\n  Player.prototype.selectSource = function selectSource(sources) {\n    var _this4 = this;\n\n    // Get only the techs specified in `techOrder` that exist and are supported by the\n    // current platform\n    var techs = this.options_.techOrder.map(_toTitleCase2['default']).map(function (techName) {\n      // `Component.getComponent(...)` is for support of old behavior of techs\n      // being registered as components.\n      // Remove once that deprecated behavior is removed.\n      return [techName, _tech2['default'].getTech(techName) || _component2['default'].getComponent(techName)];\n    }).filter(function (_ref) {\n      var techName = _ref[0],\n        tech = _ref[1];\n\n      // Check if the current tech is defined before continuing\n      if (tech) {\n        // Check if the browser supports this technology\n        return tech.isSupported();\n      }\n      _log2['default'].error('The \"' + techName + '\" tech is undefined. Skipped browser support check for that tech.');\n      return false;\n    });\n\n    // Iterate over each `innerArray` element once per `outerArray` element and execute\n    // `tester` with both. If `tester` returns a non-falsy value, exit early and return\n    // that value.\n    var findFirstPassingTechSourcePair = function findFirstPassingTechSourcePair(outerArray, innerArray, tester) {\n      var found = void 0;\n      outerArray.some(function (outerChoice) {\n        return innerArray.some(function (innerChoice) {\n          found = tester(outerChoice, innerChoice);\n          if (found) {\n            return true;\n          }\n        });\n      });\n      return found;\n    };\n    var foundSourceAndTech = void 0;\n    var flip = function flip(fn) {\n      return function (a, b) {\n        return fn(b, a);\n      };\n    };\n    var finder = function finder(_ref2, source) {\n      var techName = _ref2[0],\n        tech = _ref2[1];\n      if (tech.canPlaySource(source, _this4.options_[techName.toLowerCase()])) {\n        return {\n          source: source,\n          tech: techName\n        };\n      }\n    };\n\n    // Depending on the truthiness of `options.sourceOrder`, we swap the order of techs and sources\n    // to select from them based on their priority.\n    if (this.options_.sourceOrder) {\n      // Source-first ordering\n      foundSourceAndTech = findFirstPassingTechSourcePair(sources, techs, flip(finder));\n    } else {\n      // Tech-first ordering\n      foundSourceAndTech = findFirstPassingTechSourcePair(techs, sources, finder);\n    }\n    return foundSourceAndTech || false;\n  };\n\n  /**\n   * The source function updates the video source\n   * There are three types of variables you can pass as the argument.\n   * **URL string**: A URL to the the video file. Use this method if you are sure\n   * the current playback technology (HTML5/Flash) can support the source you\n   * provide. Currently only MP4 files can be used in both HTML5 and Flash.\n   *\n   * @param {Tech~SourceObject|Tech~SourceObject[]} [source]\n   *        One SourceObject or an array of SourceObjects\n   *\n   * @return {string|Player}\n   *         - The current video source when getting\n   *         - The player when setting\n   */\n\n  Player.prototype.src = function src(source) {\n    if (source === undefined) {\n      return this.techGet_('src');\n    }\n    var currentTech = _tech2['default'].getTech(this.techName_);\n\n    // Support old behavior of techs being registered as components.\n    // Remove once that deprecated behavior is removed.\n    if (!currentTech) {\n      currentTech = _component2['default'].getComponent(this.techName_);\n    }\n\n    // case: Array of source objects to choose from and pick the best to play\n    if (Array.isArray(source)) {\n      this.sourceList_(source);\n\n      // case: URL String (http://myvideo...)\n    } else if (typeof source === 'string') {\n      // create a source object from the string\n      this.src({\n        src: source\n      });\n\n      // case: Source object { src: '', type: '' ... }\n    } else if (source instanceof Object) {\n      // check if the source has a type and the loaded tech cannot play the source\n      // if there's no type we'll just try the current tech\n      if (source.type && !currentTech.canPlaySource(source, this.options_[this.techName_.toLowerCase()])) {\n        // create a source list with the current source and send through\n        // the tech loop to check for a compatible technology\n        this.sourceList_([source]);\n      } else {\n        this.cache_.sources = null;\n        this.cache_.source = source;\n        this.cache_.src = source.src;\n        this.currentType_ = source.type || '';\n\n        // wait until the tech is ready to set the source\n        this.ready(function () {\n          // The setSource tech method was added with source handlers\n          // so older techs won't support it\n          // We need to check the direct prototype for the case where subclasses\n          // of the tech do not support source handlers\n          if (currentTech.prototype.hasOwnProperty('setSource')) {\n            this.techCall_('setSource', source);\n          } else {\n            this.techCall_('src', source.src);\n          }\n          if (this.options_.preload === 'auto') {\n            this.load();\n          }\n          if (this.options_.autoplay) {\n            this.play();\n          }\n\n          // Set the source synchronously if possible (#2326)\n        }, true);\n      }\n    }\n    return this;\n  };\n\n  /**\n   * Handle an array of source objects\n   *\n   * @param  {Tech~SourceObject[]} sources\n   *         Array of source objects\n   *\n   * @private\n   */\n\n  Player.prototype.sourceList_ = function sourceList_(sources) {\n    var sourceTech = this.selectSource(sources);\n    if (sourceTech) {\n      if (sourceTech.tech === this.techName_) {\n        // if this technology is already loaded, set the source\n        this.src(sourceTech.source);\n      } else {\n        // load this technology with the chosen source\n        this.loadTech_(sourceTech.tech, sourceTech.source);\n      }\n      this.cache_.sources = sources;\n    } else {\n      // We need to wrap this in a timeout to give folks a chance to add error event handlers\n      this.setTimeout(function () {\n        this.error({\n          code: 4,\n          message: this.localize(this.options_.notSupportedMessage)\n        });\n      }, 0);\n\n      // we could not find an appropriate tech, but let's still notify the delegate that this is it\n      // this needs a better comment about why this is needed\n      this.triggerReady();\n    }\n  };\n\n  /**\n   * Begin loading the src data.\n   *\n   * @return {Player}\n   *         A reference to the player\n   */\n\n  Player.prototype.load = function load() {\n    this.techCall_('load');\n    return this;\n  };\n\n  /**\n   * Reset the player. Loads the first tech in the techOrder,\n   * and calls `reset` on the tech`.\n   *\n   * @return {Player}\n   *         A reference to the player\n   */\n\n  Player.prototype.reset = function reset() {\n    this.loadTech_((0, _toTitleCase2['default'])(this.options_.techOrder[0]), null);\n    this.techCall_('reset');\n    return this;\n  };\n\n  /**\n   * Returns all of the current source objects.\n   *\n   * @return {Tech~SourceObject[]}\n   *         The current source objects\n   */\n\n  Player.prototype.currentSources = function currentSources() {\n    var source = this.currentSource();\n    var sources = [];\n\n    // assume `{}` or `{ src }`\n    if (Object.keys(source).length !== 0) {\n      sources.push(source);\n    }\n    return this.cache_.sources || sources;\n  };\n\n  /**\n   * Returns the current source object.\n   *\n   * @return {Tech~SourceObject}\n   *         The current source object\n   */\n\n  Player.prototype.currentSource = function currentSource() {\n    var source = {};\n    var src = this.currentSrc();\n    if (src) {\n      source.src = src;\n    }\n    return this.cache_.source || source;\n  };\n\n  /**\n   * Returns the fully qualified URL of the current source value e.g. http://mysite.com/video.mp4\n   * Can be used in conjuction with `currentType` to assist in rebuilding the current source object.\n   *\n   * @return {string}\n   *         The current source\n   */\n\n  Player.prototype.currentSrc = function currentSrc() {\n    return this.techGet_('currentSrc') || this.cache_.src || '';\n  };\n\n  /**\n   * Get the current source type e.g. video/mp4\n   * This can allow you rebuild the current source object so that you could load the same\n   * source and tech later\n   *\n   * @return {string}\n   *         The source MIME type\n   */\n\n  Player.prototype.currentType = function currentType() {\n    return this.currentType_ || '';\n  };\n\n  /**\n   * Get or set the preload attribute\n   *\n   * @param {boolean} [value]\n   *        - true means that we should preload\n   *        - false maens that we should not preload\n   *\n   * @return {string|Player}\n   *         - the preload attribute value when getting\n   *         - the player when setting\n   */\n\n  Player.prototype.preload = function preload(value) {\n    if (value !== undefined) {\n      this.techCall_('setPreload', value);\n      this.options_.preload = value;\n      return this;\n    }\n    return this.techGet_('preload');\n  };\n\n  /**\n   * Get or set the autoplay attribute.\n   *\n   * @param {boolean} [value]\n   *        - true means that we should autoplay\n   *        - false maens that we should not autoplay\n   *\n   * @return {string|Player}\n   *         - the current value of autoplay\n   *         - the player when setting\n   */\n\n  Player.prototype.autoplay = function autoplay(value) {\n    if (value !== undefined) {\n      this.techCall_('setAutoplay', value);\n      this.options_.autoplay = value;\n      return this;\n    }\n    return this.techGet_('autoplay', value);\n  };\n\n  /**\n   * Set or unset the playsinline attribute.\n   * Playsinline tells the browser that non-fullscreen playback is preferred.\n   *\n   * @param {boolean} [value]\n   *        - true means that we should try to play inline by default\n   *        - false means that we should use the browser's default playback mode,\n   *          which in most cases is inline. iOS Safari is a notable exception\n   *          and plays fullscreen by default.\n   *\n   * @return {string|Player}\n   *         - the current value of playsinline\n   *         - the player when setting\n   *\n   * @see [Spec]{@link https://html.spec.whatwg.org/#attr-video-playsinline}\n   */\n\n  Player.prototype.playsinline = function playsinline(value) {\n    if (value !== undefined) {\n      this.techCall_('setPlaysinline', value);\n      this.options_.playsinline = value;\n      return this;\n    }\n    return this.techGet_('playsinline');\n  };\n\n  /**\n   * Get or set the loop attribute on the video element.\n   *\n   * @param {boolean} [value]\n   *        - true means that we should loop the video\n   *        - false means that we should not loop the video\n   *\n   * @return {string|Player}\n   *         - the current value of loop when getting\n   *         - the player when setting\n   */\n\n  Player.prototype.loop = function loop(value) {\n    if (value !== undefined) {\n      this.techCall_('setLoop', value);\n      this.options_.loop = value;\n      return this;\n    }\n    return this.techGet_('loop');\n  };\n\n  /**\n   * Get or set the poster image source url\n   *\n   * @fires Player#posterchange\n   *\n   * @param {string} [src]\n   *        Poster image source URL\n   *\n   * @return {string|Player}\n   *         - the current value of poster when getting\n   *         - the player when setting\n   */\n\n  Player.prototype.poster = function poster(src) {\n    if (src === undefined) {\n      return this.poster_;\n    }\n\n    // The correct way to remove a poster is to set as an empty string\n    // other falsey values will throw errors\n    if (!src) {\n      src = '';\n    }\n\n    // update the internal poster variable\n    this.poster_ = src;\n\n    // update the tech's poster\n    this.techCall_('setPoster', src);\n\n    // alert components that the poster has been set\n    /**\n     * This event fires when the poster image is changed on the player.\n     *\n     * @event Player#posterchange\n     * @type {EventTarget~Event}\n     */\n    this.trigger('posterchange');\n    return this;\n  };\n\n  /**\n   * Some techs (e.g. YouTube) can provide a poster source in an\n   * asynchronous way. We want the poster component to use this\n   * poster source so that it covers up the tech's controls.\n   * (YouTube's play button). However we only want to use this\n   * soruce if the player user hasn't set a poster through\n   * the normal APIs.\n   *\n   * @fires Player#posterchange\n   * @listens Tech#posterchange\n   * @private\n   */\n\n  Player.prototype.handleTechPosterChange_ = function handleTechPosterChange_() {\n    if (!this.poster_ && this.tech_ && this.tech_.poster) {\n      this.poster_ = this.tech_.poster() || '';\n\n      // Let components know the poster has changed\n      this.trigger('posterchange');\n    }\n  };\n\n  /**\n   * Get or set whether or not the controls are showing.\n   *\n   * @fires Player#controlsenabled\n   *\n   * @param {boolean} [bool]\n   *        - true to turn controls on\n   *        - false to turn controls off\n   *\n   * @return {boolean|Player}\n   *         - the current value of controls when getting\n   *         - the player when setting\n   */\n\n  Player.prototype.controls = function controls(bool) {\n    if (bool !== undefined) {\n      bool = !!bool;\n\n      // Don't trigger a change event unless it actually changed\n      if (this.controls_ !== bool) {\n        this.controls_ = bool;\n        if (this.usingNativeControls()) {\n          this.techCall_('setControls', bool);\n        }\n        if (bool) {\n          this.removeClass('vjs-controls-disabled');\n          this.addClass('vjs-controls-enabled');\n          /**\n           * @event Player#controlsenabled\n           * @type {EventTarget~Event}\n           */\n          this.trigger('controlsenabled');\n          if (!this.usingNativeControls()) {\n            this.addTechControlsListeners_();\n          }\n        } else {\n          this.removeClass('vjs-controls-enabled');\n          this.addClass('vjs-controls-disabled');\n          /**\n           * @event Player#controlsdisabled\n           * @type {EventTarget~Event}\n           */\n          this.trigger('controlsdisabled');\n          if (!this.usingNativeControls()) {\n            this.removeTechControlsListeners_();\n          }\n        }\n      }\n      return this;\n    }\n    return !!this.controls_;\n  };\n\n  /**\n   * Toggle native controls on/off. Native controls are the controls built into\n   * devices (e.g. default iPhone controls), Flash, or other techs\n   * (e.g. Vimeo Controls)\n   * **This should only be set by the current tech, because only the tech knows\n   * if it can support native controls**\n   *\n   * @fires Player#usingnativecontrols\n   * @fires Player#usingcustomcontrols\n   *\n   * @param {boolean} [bool]\n   *        - true to turn native controls on\n   *        - false to turn native controls off\n   *\n   * @return {boolean|Player}\n   *         - the current value of native controls when getting\n   *         - the player when setting\n   */\n\n  Player.prototype.usingNativeControls = function usingNativeControls(bool) {\n    if (bool !== undefined) {\n      bool = !!bool;\n\n      // Don't trigger a change event unless it actually changed\n      if (this.usingNativeControls_ !== bool) {\n        this.usingNativeControls_ = bool;\n        if (bool) {\n          this.addClass('vjs-using-native-controls');\n\n          /**\n           * player is using the native device controls\n           *\n           * @event Player#usingnativecontrols\n           * @type {EventTarget~Event}\n           */\n          this.trigger('usingnativecontrols');\n        } else {\n          this.removeClass('vjs-using-native-controls');\n\n          /**\n           * player is using the custom HTML controls\n           *\n           * @event Player#usingcustomcontrols\n           * @type {EventTarget~Event}\n           */\n          this.trigger('usingcustomcontrols');\n        }\n      }\n      return this;\n    }\n    return !!this.usingNativeControls_;\n  };\n\n  /**\n   * Set or get the current MediaError\n   *\n   * @fires Player#error\n   *\n   * @param  {MediaError|string|number} [err]\n   *         A MediaError or a string/number to be turned\n   *         into a MediaError\n   *\n   * @return {MediaError|null|Player}\n   *         - The current MediaError when getting (or null)\n   *         - The player when setting\n   */\n\n  Player.prototype.error = function error(err) {\n    if (err === undefined) {\n      return this.error_ || null;\n    }\n\n    // restoring to default\n    if (err === null) {\n      this.error_ = err;\n      this.removeClass('vjs-error');\n      if (this.errorDisplay) {\n        this.errorDisplay.close();\n      }\n      return this;\n    }\n    this.error_ = new _mediaError2['default'](err);\n\n    // add the vjs-error classname to the player\n    this.addClass('vjs-error');\n\n    // log the name of the error type and any message\n    // ie8 just logs \"[object object]\" if you just log the error object\n    _log2['default'].error('(CODE:' + this.error_.code + ' ' + _mediaError2['default'].errorTypes[this.error_.code] + ')', this.error_.message, this.error_);\n\n    /**\n     * @event Player#error\n     * @type {EventTarget~Event}\n     */\n    this.trigger('error');\n    return this;\n  };\n\n  /**\n   * Report user activity\n   *\n   * @param {Object} event\n   *        Event object\n   */\n\n  Player.prototype.reportUserActivity = function reportUserActivity(event) {\n    this.userActivity_ = true;\n  };\n\n  /**\n   * Get/set if user is active\n   *\n   * @fires Player#useractive\n   * @fires Player#userinactive\n   *\n   * @param {boolean} [bool]\n   *        - true if the user is active\n   *        - false if the user is inactive\n   * @return {boolean|Player}\n   *         - the current value of userActive when getting\n   *         - the player when setting\n   */\n\n  Player.prototype.userActive = function userActive(bool) {\n    if (bool !== undefined) {\n      bool = !!bool;\n      if (bool !== this.userActive_) {\n        this.userActive_ = bool;\n        if (bool) {\n          // If the user was inactive and is now active we want to reset the\n          // inactivity timer\n          this.userActivity_ = true;\n          this.removeClass('vjs-user-inactive');\n          this.addClass('vjs-user-active');\n          /**\n           * @event Player#useractive\n           * @type {EventTarget~Event}\n           */\n          this.trigger('useractive');\n        } else {\n          // We're switching the state to inactive manually, so erase any other\n          // activity\n          this.userActivity_ = false;\n\n          // Chrome/Safari/IE have bugs where when you change the cursor it can\n          // trigger a mousemove event. This causes an issue when you're hiding\n          // the cursor when the user is inactive, and a mousemove signals user\n          // activity. Making it impossible to go into inactive mode. Specifically\n          // this happens in fullscreen when we really need to hide the cursor.\n          //\n          // When this gets resolved in ALL browsers it can be removed\n          // https://code.google.com/p/chromium/issues/detail?id=103041\n          if (this.tech_) {\n            this.tech_.one('mousemove', function (e) {\n              e.stopPropagation();\n              e.preventDefault();\n            });\n          }\n          this.removeClass('vjs-user-active');\n          this.addClass('vjs-user-inactive');\n          /**\n           * @event Player#userinactive\n           * @type {EventTarget~Event}\n           */\n          this.trigger('userinactive');\n        }\n      }\n      return this;\n    }\n    return this.userActive_;\n  };\n\n  /**\n   * Listen for user activity based on timeout value\n   *\n   * @private\n   */\n\n  Player.prototype.listenForUserActivity_ = function listenForUserActivity_() {\n    var mouseInProgress = void 0;\n    var lastMoveX = void 0;\n    var lastMoveY = void 0;\n    var handleActivity = Fn.bind(this, this.reportUserActivity);\n    var handleMouseMove = function handleMouseMove(e) {\n      // #1068 - Prevent mousemove spamming\n      // Chrome Bug: https://code.google.com/p/chromium/issues/detail?id=366970\n      if (e.screenX !== lastMoveX || e.screenY !== lastMoveY) {\n        lastMoveX = e.screenX;\n        lastMoveY = e.screenY;\n        handleActivity();\n      }\n    };\n    var handleMouseDown = function handleMouseDown() {\n      handleActivity();\n      // For as long as the they are touching the device or have their mouse down,\n      // we consider them active even if they're not moving their finger or mouse.\n      // So we want to continue to update that they are active\n      this.clearInterval(mouseInProgress);\n      // Setting userActivity=true now and setting the interval to the same time\n      // as the activityCheck interval (250) should ensure we never miss the\n      // next activityCheck\n      mouseInProgress = this.setInterval(handleActivity, 250);\n    };\n    var handleMouseUp = function handleMouseUp(event) {\n      handleActivity();\n      // Stop the interval that maintains activity if the mouse/touch is down\n      this.clearInterval(mouseInProgress);\n    };\n\n    // Any mouse movement will be considered user activity\n    this.on('mousedown', handleMouseDown);\n    this.on('mousemove', handleMouseMove);\n    this.on('mouseup', handleMouseUp);\n\n    // Listen for keyboard navigation\n    // Shouldn't need to use inProgress interval because of key repeat\n    this.on('keydown', handleActivity);\n    this.on('keyup', handleActivity);\n\n    // Run an interval every 250 milliseconds instead of stuffing everything into\n    // the mousemove/touchmove function itself, to prevent performance degradation.\n    // `this.reportUserActivity` simply sets this.userActivity_ to true, which\n    // then gets picked up by this loop\n    // http://ejohn.org/blog/learning-from-twitter/\n    var inactivityTimeout = void 0;\n    this.setInterval(function () {\n      // Check to see if mouse/touch activity has happened\n      if (this.userActivity_) {\n        // Reset the activity tracker\n        this.userActivity_ = false;\n\n        // If the user state was inactive, set the state to active\n        this.userActive(true);\n\n        // Clear any existing inactivity timeout to start the timer over\n        this.clearTimeout(inactivityTimeout);\n        var timeout = this.options_.inactivityTimeout;\n        if (timeout > 0) {\n          // In <timeout> milliseconds, if no more activity has occurred the\n          // user will be considered inactive\n          inactivityTimeout = this.setTimeout(function () {\n            // Protect against the case where the inactivityTimeout can trigger just\n            // before the next user activity is picked up by the activity check loop\n            // causing a flicker\n            if (!this.userActivity_) {\n              this.userActive(false);\n            }\n          }, timeout);\n        }\n      }\n    }, 250);\n  };\n\n  /**\n   * Gets or sets the current playback rate. A playback rate of\n   * 1.0 represents normal speed and 0.5 would indicate half-speed\n   * playback, for instance.\n   *\n   * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-playbackrate\n   *\n   * @param {number} [rate]\n   *       New playback rate to set.\n   *\n   * @return {number|Player}\n   *         - The current playback rate when getting or 1.0\n   *         - the player when setting\n   */\n\n  Player.prototype.playbackRate = function playbackRate(rate) {\n    if (rate !== undefined) {\n      this.techCall_('setPlaybackRate', rate);\n      return this;\n    }\n    if (this.tech_ && this.tech_.featuresPlaybackRate) {\n      return this.techGet_('playbackRate');\n    }\n    return 1.0;\n  };\n\n  /**\n   * Gets or sets the audio flag\n   *\n   * @param {boolean} bool\n   *        - true signals that this is an audio player\n   *        - false signals that this is not an audio player\n   *\n   * @return {Player|boolean}\n   *         - the current value of isAudio when getting\n   *         - the player if setting\n   */\n\n  Player.prototype.isAudio = function isAudio(bool) {\n    if (bool !== undefined) {\n      this.isAudio_ = !!bool;\n      return this;\n    }\n    return !!this.isAudio_;\n  };\n\n  /**\n   * Get the {@link VideoTrackList}\n   *\n   * @see https://html.spec.whatwg.org/multipage/embedded-content.html#videotracklist\n   *\n   * @return {VideoTrackList}\n   *         the current video track list\n   */\n\n  Player.prototype.videoTracks = function videoTracks() {\n    // if we have not yet loadTech_, we create videoTracks_\n    // these will be passed to the tech during loading\n    if (!this.tech_) {\n      this.videoTracks_ = this.videoTracks_ || new _videoTrackList2['default']();\n      return this.videoTracks_;\n    }\n    return this.tech_.videoTracks();\n  };\n\n  /**\n   * Get the {@link AudioTrackList}\n   *\n   * @see https://html.spec.whatwg.org/multipage/embedded-content.html#audiotracklist\n   *\n   * @return {AudioTrackList}\n   *         the current audio track list\n   */\n\n  Player.prototype.audioTracks = function audioTracks() {\n    // if we have not yet loadTech_, we create videoTracks_\n    // these will be passed to the tech during loading\n    if (!this.tech_) {\n      this.audioTracks_ = this.audioTracks_ || new _audioTrackList2['default']();\n      return this.audioTracks_;\n    }\n    return this.tech_.audioTracks();\n  };\n\n  /**\n   * Get the {@link TextTrackList}\n   *\n   * Text tracks are tracks of timed text events.\n   * - Captions: text displayed over the video\n   *             for the hearing impaired\n   * - Subtitles: text displayed over the video for\n   *              those who don't understand language in the video\n   * - Chapters: text displayed in a menu allowing the user to jump\n   *             to particular points (chapters) in the video\n   * - Descriptions: (not yet implemented) audio descriptions that are read back to\n   *                 the user by a screen reading device\n   *\n   * @see http://www.w3.org/html/wg/drafts/html/master/embedded-content-0.html#dom-media-texttracks\n   *\n   * @return {TextTrackList|undefined}\n   *         The current TextTrackList or undefined if\n   *         or undefined if we don't have a tech\n   */\n\n  Player.prototype.textTracks = function textTracks() {\n    // cannot use techGet_ directly because it checks to see whether the tech is ready.\n    // Flash is unlikely to be ready in time but textTracks should still work.\n    if (this.tech_) {\n      return this.tech_.textTracks();\n    }\n  };\n\n  /**\n   * Get the \"remote\" {@link TextTrackList}. Remote Text Tracks\n   * are tracks that were added to the HTML video element and can\n   * be removed, whereas normal texttracks cannot be removed.\n   *\n   *\n   * @return {TextTrackList|undefined}\n   *         The current remote text track list or undefined\n   *         if we don't have a tech\n   */\n\n  Player.prototype.remoteTextTracks = function remoteTextTracks() {\n    if (this.tech_) {\n      return this.tech_.remoteTextTracks();\n    }\n  };\n\n  /**\n   * Get the \"remote\" {@link HTMLTrackElementList}.\n   * This gives the user all of the DOM elements that match up\n   * with the remote {@link TextTrackList}.\n   *\n   * @return {HTMLTrackElementList}\n   *         The current remote text track list elements\n   *         or undefined if we don't have a tech\n   */\n\n  Player.prototype.remoteTextTrackEls = function remoteTextTrackEls() {\n    if (this.tech_) {\n      return this.tech_.remoteTextTrackEls();\n    }\n  };\n\n  /**\n   * A helper method for adding a {@link TextTrack} to our\n   * {@link TextTrackList}.\n   *\n   * In addition to the W3C settings we allow adding additional info through options.\n   *\n   * @see http://www.w3.org/html/wg/drafts/html/master/embedded-content-0.html#dom-media-addtexttrack\n   *\n   * @param {string} [kind]\n   *        the kind of TextTrack you are adding\n   *\n   * @param {string} [label]\n   *        the label to give the TextTrack label\n   *\n   * @param {string} [language]\n   *        the language to set on the TextTrack\n   *\n   * @return {TextTrack|undefined}\n   *         the TextTrack that was added or undefined\n   *         if there is no tech\n   */\n\n  Player.prototype.addTextTrack = function addTextTrack(kind, label, language) {\n    if (this.tech_) {\n      return this.tech_.addTextTrack(kind, label, language);\n    }\n  };\n\n  /**\n   * Create a remote {@link TextTrack} and an {@link HTMLTrackElement}. It will\n   * automatically removed from the video element whenever the source changes, unless\n   * manualCleanup is set to false.\n   *\n   * @param {Object} options\n   *        Options to pass to {@link HTMLTrackElement} during creation. See\n   *        {@link HTMLTrackElement} for object properties that you should use.\n   *\n   * @param {boolean} [manualCleanup=true] if set to false, the TextTrack will be\n   *\n   * @return {HTMLTrackElement}\n   *         the HTMLTrackElement that was created and added\n   *         to the HTMLTrackElementList and the remote\n   *         TextTrackList\n   *\n   * @deprecated The default value of the \"manualCleanup\" parameter will default\n   *             to \"false\" in upcoming versions of Video.js\n   */\n\n  Player.prototype.addRemoteTextTrack = function addRemoteTextTrack(options, manualCleanup) {\n    if (this.tech_) {\n      return this.tech_.addRemoteTextTrack(options, manualCleanup);\n    }\n  };\n\n  /**\n   * Remove a remote {@link TextTrack} from the respective\n   * {@link TextTrackList} and {@link HTMLTrackElementList}.\n   *\n   * @param {Object} track\n   *        Remote {@link TextTrack} to remove\n   *\n   * @return {undefined}\n   *         does not return anything\n   */\n\n  Player.prototype.removeRemoteTextTrack = function removeRemoteTextTrack() {\n    var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref3$track = _ref3.track,\n      track = _ref3$track === undefined ? arguments[0] : _ref3$track;\n\n    // destructure the input into an object with a track argument, defaulting to arguments[0]\n    // default the whole argument to an empty object if nothing was passed in\n\n    if (this.tech_) {\n      return this.tech_.removeRemoteTextTrack(track);\n    }\n  };\n\n  /**\n   * Gets available media playback quality metrics as specified by the W3C's Media\n   * Playback Quality API.\n   *\n   * @see [Spec]{@link https://wicg.github.io/media-playback-quality}\n   *\n   * @return {Object|undefined}\n   *         An object with supported media playback quality metrics or undefined if there\n   *         is no tech or the tech does not support it.\n   */\n\n  Player.prototype.getVideoPlaybackQuality = function getVideoPlaybackQuality() {\n    return this.techGet_('getVideoPlaybackQuality');\n  };\n\n  /**\n   * Get video width\n   *\n   * @return {number}\n   *         current video width\n   */\n\n  Player.prototype.videoWidth = function videoWidth() {\n    return this.tech_ && this.tech_.videoWidth && this.tech_.videoWidth() || 0;\n  };\n\n  /**\n   * Get video height\n   *\n   * @return {number}\n   *         current video height\n   */\n\n  Player.prototype.videoHeight = function videoHeight() {\n    return this.tech_ && this.tech_.videoHeight && this.tech_.videoHeight() || 0;\n  };\n\n  // Methods to add support for\n  // initialTime: function() { return this.techCall_('initialTime'); },\n  // startOffsetTime: function() { return this.techCall_('startOffsetTime'); },\n  // played: function() { return this.techCall_('played'); },\n  // defaultPlaybackRate: function() { return this.techCall_('defaultPlaybackRate'); },\n  // defaultMuted: function() { return this.techCall_('defaultMuted'); }\n\n  /**\n   * The player's language code\n   * NOTE: The language should be set in the player options if you want the\n   * the controls to be built with a specific language. Changing the lanugage\n   * later will not update controls text.\n   *\n   * @param {string} [code]\n   *        the language code to set the player to\n   *\n   * @return {string|Player}\n   *         - The current language code when getting\n   *         - A reference to the player when setting\n   */\n\n  Player.prototype.language = function language(code) {\n    if (code === undefined) {\n      return this.language_;\n    }\n    this.language_ = String(code).toLowerCase();\n    return this;\n  };\n\n  /**\n   * Get the player's language dictionary\n   * Merge every time, because a newly added plugin might call videojs.addLanguage() at any time\n   * Languages specified directly in the player options have precedence\n   *\n   * @return {Array}\n   *         An array of of supported languages\n   */\n\n  Player.prototype.languages = function languages() {\n    return (0, _mergeOptions2['default'])(Player.prototype.options_.languages, this.languages_);\n  };\n\n  /**\n   * returns a JavaScript object reperesenting the current track\n   * information. **DOES not return it as JSON**\n   *\n   * @return {Object}\n   *         Object representing the current of track info\n   */\n\n  Player.prototype.toJSON = function toJSON() {\n    var options = (0, _mergeOptions2['default'])(this.options_);\n    var tracks = options.tracks;\n    options.tracks = [];\n    for (var i = 0; i < tracks.length; i++) {\n      var track = tracks[i];\n\n      // deep merge tracks and null out player so no circular references\n      track = (0, _mergeOptions2['default'])(track);\n      track.player = undefined;\n      options.tracks[i] = track;\n    }\n    return options;\n  };\n\n  /**\n   * Creates a simple modal dialog (an instance of the {@link ModalDialog}\n   * component) that immediately overlays the player with arbitrary\n   * content and removes itself when closed.\n   *\n   * @param {string|Function|Element|Array|null} content\n   *        Same as {@link ModalDialog#content}'s param of the same name.\n   *        The most straight-forward usage is to provide a string or DOM\n   *        element.\n   *\n   * @param {Object} [options]\n   *        Extra options which will be passed on to the {@link ModalDialog}.\n   *\n   * @return {ModalDialog}\n   *         the {@link ModalDialog} that was created\n   */\n\n  Player.prototype.createModal = function createModal(content, options) {\n    var _this5 = this;\n    options = options || {};\n    options.content = content || '';\n    var modal = new _modalDialog2['default'](this, options);\n    this.addChild(modal);\n    modal.on('dispose', function () {\n      _this5.removeChild(modal);\n    });\n    return modal.open();\n  };\n\n  /**\n   * Gets tag settings\n   *\n   * @param {Element} tag\n   *        The player tag\n   *\n   * @return {Object}\n   *         An object containing all of the settings\n   *         for a player tag\n   */\n\n  Player.getTagSettings = function getTagSettings(tag) {\n    var baseOptions = {\n      sources: [],\n      tracks: []\n    };\n    var tagOptions = Dom.getElAttributes(tag);\n    var dataSetup = tagOptions['data-setup'];\n    if (Dom.hasElClass(tag, 'vjs-fluid')) {\n      tagOptions.fluid = true;\n    }\n\n    // Check if data-setup attr exists.\n    if (dataSetup !== null) {\n      // Parse options JSON\n      // If empty string, make it a parsable json object.\n      var _safeParseTuple = (0, _tuple2['default'])(dataSetup || '{}'),\n        err = _safeParseTuple[0],\n        data = _safeParseTuple[1];\n      if (err) {\n        _log2['default'].error(err);\n      }\n      (0, _obj.assign)(tagOptions, data);\n    }\n    (0, _obj.assign)(baseOptions, tagOptions);\n\n    // Get tag children settings\n    if (tag.hasChildNodes()) {\n      var children = tag.childNodes;\n      for (var i = 0, j = children.length; i < j; i++) {\n        var child = children[i];\n        // Change case needed: http://ejohn.org/blog/nodename-case-sensitivity/\n        var childName = child.nodeName.toLowerCase();\n        if (childName === 'source') {\n          baseOptions.sources.push(Dom.getElAttributes(child));\n        } else if (childName === 'track') {\n          baseOptions.tracks.push(Dom.getElAttributes(child));\n        }\n      }\n    }\n    return baseOptions;\n  };\n\n  /**\n   * Determine wether or not flexbox is supported\n   *\n   * @return {boolean}\n   *         - true if flexbox is supported\n   *         - false if flexbox is not supported\n   */\n\n  Player.prototype.flexNotSupported_ = function flexNotSupported_() {\n    var elem = _document2['default'].createElement('i');\n\n    // Note: We don't actually use flexBasis (or flexOrder), but it's one of the more\n    // common flex features that we can rely on when checking for flex support.\n    return !('flexBasis' in elem.style || 'webkitFlexBasis' in elem.style || 'mozFlexBasis' in elem.style || 'msFlexBasis' in elem.style ||\n    // IE10-specific (2012 flex spec)\n    'msFlexOrder' in elem.style);\n  };\n  return Player;\n}(_component2['default']);\n\n/**\n * Global player list\n *\n * @type {Object}\n */\n\nPlayer.players = {};\nvar navigator = _window2['default'].navigator;\n\n/*\n * Player instance options, surfaced using options\n * options = Player.prototype.options_\n * Make changes in options, not here.\n *\n * @type {Object}\n * @private\n */\nPlayer.prototype.options_ = {\n  // Default order of fallback technology\n  techOrder: ['html5', 'flash'],\n  // techOrder: ['flash','html5'],\n\n  html5: {},\n  flash: {},\n  // defaultVolume: 0.85,\n  defaultVolume: 0.00,\n  // default inactivity timeout\n  inactivityTimeout: 2000,\n  // default playback rates\n  playbackRates: [],\n  // Add playback rate selection by adding rates\n  // 'playbackRates': [0.5, 1, 1.5, 2],\n\n  // Included control sets\n  children: ['mediaLoader', 'posterImage', 'textTrackDisplay', 'loadingSpinner', 'bigPlayButton', 'controlBar', 'errorDisplay', 'textTrackSettings'],\n  language: navigator && (navigator.languages && navigator.languages[0] || navigator.userLanguage || navigator.language) || 'en',\n  // locales and their language translations\n  languages: {},\n  // Default message to show when a video cannot be played.\n  notSupportedMessage: 'No compatible source was found for this media.'\n};\n[\n/**\n * Returns whether or not the player is in the \"ended\" state.\n *\n * @return {Boolean} True if the player is in the ended state, false if not.\n * @method Player#ended\n */\n'ended',\n/**\n * Returns whether or not the player is in the \"seeking\" state.\n *\n * @return {Boolean} True if the player is in the seeking state, false if not.\n * @method Player#seeking\n */\n'seeking',\n/**\n * Returns the TimeRanges of the media that are currently available\n * for seeking to.\n *\n * @return {TimeRanges} the seekable intervals of the media timeline\n * @method Player#seekable\n */\n'seekable',\n/**\n * Returns the current state of network activity for the element, from\n * the codes in the list below.\n * - NETWORK_EMPTY (numeric value 0)\n *   The element has not yet been initialised. All attributes are in\n *   their initial states.\n * - NETWORK_IDLE (numeric value 1)\n *   The element's resource selection algorithm is active and has\n *   selected a resource, but it is not actually using the network at\n *   this time.\n * - NETWORK_LOADING (numeric value 2)\n *   The user agent is actively trying to download data.\n * - NETWORK_NO_SOURCE (numeric value 3)\n *   The element's resource selection algorithm is active, but it has\n *   not yet found a resource to use.\n *\n * @see https://html.spec.whatwg.org/multipage/embedded-content.html#network-states\n * @return {number} the current network activity state\n * @method Player#networkState\n */\n'networkState',\n/**\n * Returns a value that expresses the current state of the element\n * with respect to rendering the current playback position, from the\n * codes in the list below.\n * - HAVE_NOTHING (numeric value 0)\n *   No information regarding the media resource is available.\n * - HAVE_METADATA (numeric value 1)\n *   Enough of the resource has been obtained that the duration of the\n *   resource is available.\n * - HAVE_CURRENT_DATA (numeric value 2)\n *   Data for the immediate current playback position is available.\n * - HAVE_FUTURE_DATA (numeric value 3)\n *   Data for the immediate current playback position is available, as\n *   well as enough data for the user agent to advance the current\n *   playback position in the direction of playback.\n * - HAVE_ENOUGH_DATA (numeric value 4)\n *   The user agent estimates that enough data is available for\n *   playback to proceed uninterrupted.\n *\n * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-readystate\n * @return {number} the current playback rendering state\n * @method Player#readyState\n */\n'readyState'].forEach(function (fn) {\n  Player.prototype[fn] = function () {\n    return this.techGet_(fn);\n  };\n});\nTECH_EVENTS_RETRIGGER.forEach(function (event) {\n  Player.prototype['handleTech' + (0, _toTitleCase2['default'])(event) + '_'] = function () {\n    return this.trigger(event);\n  };\n});\n\n/**\n * Fired when the player has initial duration and dimension information\n *\n * @event Player#loadedmetadata\n * @type {EventTarget~Event}\n */\n\n/**\n * Fired when the player has downloaded data at the current playback position\n *\n * @event Player#loadeddata\n * @type {EventTarget~Event}\n */\n\n/**\n * Fired when the current playback position has changed *\n * During playback this is fired every 15-250 milliseconds, depending on the\n * playback technology in use.\n *\n * @event Player#timeupdate\n * @type {EventTarget~Event}\n */\n\n/**\n * Fired when the volume changes\n *\n * @event Player#volumechange\n * @type {EventTarget~Event}\n */\n\n_component2['default'].registerComponent('Player', Player);\nexports['default'] = Player;","map":{"version":3,"names":["exports","__esModule","_component","require","_component2","_interopRequireDefault","_document","_document2","_window","_window2","_events","Events","_interopRequireWildcard","_dom","Dom","_fn","Fn","_guid","Guid","_browser","browser","_log","_log2","_toTitleCase","_toTitleCase2","_timeRanges","_buffer","_stylesheet","stylesheet","_fullscreenApi","_fullscreenApi2","_mediaError","_mediaError2","_tuple","_tuple2","_obj","_mergeOptions","_mergeOptions2","_textTrackListConverter","_textTrackListConverter2","_modalDialog","_modalDialog2","_tech","_tech2","_audioTrackList","_audioTrackList2","_videoTrackList","_videoTrackList2","obj","newObj","key","Object","prototype","hasOwnProperty","call","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","TECH_EVENTS_RETRIGGER","Player","_Component","tag","options","ready","id","newGUID","assign","getTagSettings","initChildren","createEl","reportTouchActivity","language","closest","getAttribute","element","nodeType","getElAttributes","parentNode","_this","options_","techOrder","length","Error","tagAttributes","languages","languagesToLower","getOwnPropertyNames","forEach","name","toLowerCase","languages_","cache_","poster_","poster","controls_","controls","scrubbing_","el_","playerOptionsCopy","plugins","error","playerOptions","isAudio","nodeName","addClass","setAttribute","flexNotSupported_","IS_IOS","players","id_","majorVersion","split","userActive","reportUserActivity","listenForUserActivity_","on","handleFullscreenChange_","handleStageClick_","dispose","trigger","off","styleEl_","removeChild","player","tech_","el","playerElIngest","playerElIngest_","hasAttribute","removeAttribute","attrs","attr","className","playerId","VIDEOJS_NO_DYNAMIC_STYLE","createStyleElement","defaultsStyleEl","$","head","insertBefore","nextSibling","firstChild","width","height","fluid","aspectRatio","links","getElementsByTagName","i","linkEl","item","addElClass","initNetworkState_","networkState","insertElFirst","children_","unshift","dimension","_dimension","privDimension","undefined","parsedVal","parseFloat","isNaN","updateStyleEl_","bool","fluid_","removeClass","ratio","aspectRatio_","test","_width","width_","_height","height_","techEl","idClass","videoWidth","videoHeight","ratioParts","ratioMultiplier","setTextContent","loadTech_","techName","source","_this2","unloadTech_","getTech","disposeMediaElement","techName_","isReady_","techOptions","nativeControlsForTouch","videoTracks_","textTracks_","audioTracks_","autoplay","playsinline","preload","loop","muted","currentType_","type","src","currentTime","startTime","sources","TechComponent","getComponent","bind","handleTechReady_","jsonToTextTracks","textTracksJson_","event","handleTechLoadStart_","handleTechWaiting_","handleTechCanPlay_","handleTechCanPlayThrough_","handleTechPlaying_","handleTechEnded_","handleTechSeeking_","handleTechSeeked_","handleTechPlay_","handleTechFirstPlay_","handleTechPause_","handleTechDurationChange_","handleTechFullscreenChange_","handleTechError_","handleTechPosterChange_","handleTechTextData_","usingNativeControls","techGet_","addTechControlsListeners_","videoTracks","textTracks","audioTracks","textTracksToJson","tech","safety","IWillNotUseThisInPlugins","errorText","alert","removeTechControlsListeners_","handleTechClick_","handleTechTouchStart_","handleTechTouchMove_","handleTechTouchEnd_","handleTechTap_","triggerReady","volume","techCall_","currentSrc","paused","e","play","hasStarted","_hasStarted","hasStarted_","_this3","one","starttime","warn","pause","duration","button","userWasActive","preventDefault","isFullscreen","data","arguments","getCache","method","arg","scrubbing","isScrubbing","seconds","NaN","Infinity","remainingTime","buffered","createTimeRange","bufferedPercent","bufferedEnd","end","percentAsDecimal","vol","Math","max","min","_muted","supportsFullScreen","isFS","isFullscreen_","requestFullscreen","fsApi","fullscreenchange","documentFullscreenChange","fullscreenElement","enterFullWindow","exitFullscreen","exitFullWindow","isFullWindow","docOrigOverflow","documentElement","style","overflow","fullWindowOnEscKey","body","keyCode","removeElClass","canPlayType","can","j","isSupported","selectSource","_this4","techs","map","filter","_ref","findFirstPassingTechSourcePair","outerArray","innerArray","tester","found","some","outerChoice","innerChoice","foundSourceAndTech","flip","fn","a","b","finder","_ref2","canPlaySource","sourceOrder","currentTech","Array","isArray","sourceList_","load","sourceTech","setTimeout","code","message","localize","notSupportedMessage","reset","currentSources","currentSource","keys","push","currentType","usingNativeControls_","err","error_","errorDisplay","close","errorTypes","userActivity_","userActive_","stopPropagation","mouseInProgress","lastMoveX","lastMoveY","handleActivity","handleMouseMove","screenX","screenY","handleMouseDown","clearInterval","setInterval","handleMouseUp","inactivityTimeout","clearTimeout","timeout","playbackRate","rate","featuresPlaybackRate","isAudio_","remoteTextTracks","remoteTextTrackEls","addTextTrack","kind","label","addRemoteTextTrack","manualCleanup","removeRemoteTextTrack","_ref3","_ref3$track","track","getVideoPlaybackQuality","language_","String","toJSON","tracks","createModal","content","_this5","modal","addChild","open","baseOptions","tagOptions","dataSetup","hasElClass","_safeParseTuple","hasChildNodes","children","childNodes","child","childName","elem","createElement","navigator","html5","flash","defaultVolume","playbackRates","userLanguage","registerComponent"],"sources":["C:/Users/babu7/OneDrive/Desktop/djangoyoutube2/reelyoutube/frontend/node_modules/videojs-react/node_modules/video.js/es5/player.js"],"sourcesContent":["'use strict';\n\nexports.__esModule = true;\n\nvar _component = require('./component.js');\n\nvar _component2 = _interopRequireDefault(_component);\n\nvar _document = require('global/document');\n\nvar _document2 = _interopRequireDefault(_document);\n\nvar _window = require('global/window');\n\nvar _window2 = _interopRequireDefault(_window);\n\nvar _events = require('./utils/events.js');\n\nvar Events = _interopRequireWildcard(_events);\n\nvar _dom = require('./utils/dom.js');\n\nvar Dom = _interopRequireWildcard(_dom);\n\nvar _fn = require('./utils/fn.js');\n\nvar Fn = _interopRequireWildcard(_fn);\n\nvar _guid = require('./utils/guid.js');\n\nvar Guid = _interopRequireWildcard(_guid);\n\nvar _browser = require('./utils/browser.js');\n\nvar browser = _interopRequireWildcard(_browser);\n\nvar _log = require('./utils/log.js');\n\nvar _log2 = _interopRequireDefault(_log);\n\nvar _toTitleCase = require('./utils/to-title-case.js');\n\nvar _toTitleCase2 = _interopRequireDefault(_toTitleCase);\n\nvar _timeRanges = require('./utils/time-ranges.js');\n\nvar _buffer = require('./utils/buffer.js');\n\nvar _stylesheet = require('./utils/stylesheet.js');\n\nvar stylesheet = _interopRequireWildcard(_stylesheet);\n\nvar _fullscreenApi = require('./fullscreen-api.js');\n\nvar _fullscreenApi2 = _interopRequireDefault(_fullscreenApi);\n\nvar _mediaError = require('./media-error.js');\n\nvar _mediaError2 = _interopRequireDefault(_mediaError);\n\nvar _tuple = require('safe-json-parse/tuple');\n\nvar _tuple2 = _interopRequireDefault(_tuple);\n\nvar _obj = require('./utils/obj');\n\nvar _mergeOptions = require('./utils/merge-options.js');\n\nvar _mergeOptions2 = _interopRequireDefault(_mergeOptions);\n\nvar _textTrackListConverter = require('./tracks/text-track-list-converter.js');\n\nvar _textTrackListConverter2 = _interopRequireDefault(_textTrackListConverter);\n\nvar _modalDialog = require('./modal-dialog');\n\nvar _modalDialog2 = _interopRequireDefault(_modalDialog);\n\nvar _tech = require('./tech/tech.js');\n\nvar _tech2 = _interopRequireDefault(_tech);\n\nvar _audioTrackList = require('./tracks/audio-track-list.js');\n\nvar _audioTrackList2 = _interopRequireDefault(_audioTrackList);\n\nvar _videoTrackList = require('./tracks/video-track-list.js');\n\nvar _videoTrackList2 = _interopRequireDefault(_videoTrackList);\n\nrequire('./tech/loader.js');\n\nrequire('./tech/flash.js');\n\nrequire('./poster-image.js');\n\nrequire('./tracks/text-track-display.js');\n\nrequire('./loading-spinner.js');\n\nrequire('./big-play-button.js');\n\nrequire('./close-button.js');\n\nrequire('./control-bar/control-bar.js');\n\nrequire('./error-display.js');\n\nrequire('./tracks/text-track-settings.js');\n\nrequire('./tech/html5.js');\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file player.js\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n// Subclasses Component\n\n\n// The following imports are used only to ensure that the corresponding modules\n// are always included in the video.js package. Importing the modules will\n// execute them and they will register themselves with video.js.\n\n\n// Import Html5 tech, at least for disposing the original video tag.\n\n\n// The following tech events are simply re-triggered\n// on the player when they happen\nvar TECH_EVENTS_RETRIGGER = [\n/**\n * Fired while the user agent is downloading media data.\n *\n * @event Player#progress\n * @type {EventTarget~Event}\n */\n/**\n * Retrigger the `progress` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechProgress_\n * @fires Player#progress\n * @listens Tech#progress\n */\n'progress',\n\n/**\n * Fires when the loading of an audio/video is aborted.\n *\n * @event Player#abort\n * @type {EventTarget~Event}\n */\n/**\n * Retrigger the `abort` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechAbort_\n * @fires Player#abort\n * @listens Tech#abort\n */\n'abort',\n\n/**\n * Fires when the browser is intentionally not getting media data.\n *\n * @event Player#suspend\n * @type {EventTarget~Event}\n */\n/**\n * Retrigger the `suspend` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechSuspend_\n * @fires Player#suspend\n * @listens Tech#suspend\n */\n'suspend',\n\n/**\n * Fires when the current playlist is empty.\n *\n * @event Player#emptied\n * @type {EventTarget~Event}\n */\n/**\n * Retrigger the `emptied` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechEmptied_\n * @fires Player#emptied\n * @listens Tech#emptied\n */\n'emptied',\n/**\n * Fires when the browser is trying to get media data, but data is not available.\n *\n * @event Player#stalled\n * @type {EventTarget~Event}\n */\n/**\n * Retrigger the `stalled` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechStalled_\n * @fires Player#stalled\n * @listens Tech#stalled\n */\n'stalled',\n\n/**\n * Fires when the browser has loaded meta data for the audio/video.\n *\n * @event Player#loadedmetadata\n * @type {EventTarget~Event}\n */\n/**\n * Retrigger the `stalled` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechLoadedmetadata_\n * @fires Player#loadedmetadata\n * @listens Tech#loadedmetadata\n */\n'loadedmetadata',\n\n/**\n * Fires when the browser has loaded the current frame of the audio/video.\n *\n * @event player#loadeddata\n * @type {event}\n */\n/**\n * Retrigger the `loadeddata` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechLoaddeddata_\n * @fires Player#loadeddata\n * @listens Tech#loadeddata\n */\n'loadeddata',\n\n/**\n * Fires when the current playback position has changed.\n *\n * @event player#timeupdate\n * @type {event}\n */\n/**\n * Retrigger the `timeupdate` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechTimeUpdate_\n * @fires Player#timeupdate\n * @listens Tech#timeupdate\n */\n'timeupdate',\n\n/**\n * Fires when the playing speed of the audio/video is changed\n *\n * @event player#ratechange\n * @type {event}\n */\n/**\n * Retrigger the `ratechange` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechRatechange_\n * @fires Player#ratechange\n * @listens Tech#ratechange\n */\n'ratechange',\n\n/**\n * Fires when the volume has been changed\n *\n * @event player#volumechange\n * @type {event}\n */\n/**\n * Retrigger the `volumechange` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechVolumechange_\n * @fires Player#volumechange\n * @listens Tech#volumechange\n */\n'volumechange',\n\n/**\n * Fires when the text track has been changed\n *\n * @event player#texttrackchange\n * @type {event}\n */\n/**\n * Retrigger the `texttrackchange` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechTexttrackchange_\n * @fires Player#texttrackchange\n * @listens Tech#texttrackchange\n */\n'texttrackchange'];\n\n/**\n * An instance of the `Player` class is created when any of the Video.js setup methods\n * are used to initialize a video.\n *\n * After an instance has been created it can be accessed globally in two ways:\n * 1. By calling `videojs('example_video_1');`\n * 2. By using it directly via  `videojs.players.example_video_1;`\n *\n * @extends Component\n */\n\nvar Player = function (_Component) {\n  _inherits(Player, _Component);\n\n  /**\n   * Create an instance of this class.\n   *\n   * @param {Element} tag\n   *        The original video DOM element used for configuring options.\n   *\n   * @param {Object} [options]\n   *        Object of option names and values.\n   *\n   * @param {Component~ReadyCallback} [ready]\n   *        Ready callback function.\n   */\n  function Player(tag, options, ready) {\n    _classCallCheck(this, Player);\n\n    // Make sure tag ID exists\n    tag.id = tag.id || 'vjs_video_' + Guid.newGUID();\n\n    // Set Options\n    // The options argument overrides options set in the video tag\n    // which overrides globally set options.\n    // This latter part coincides with the load order\n    // (tag must exist before Player)\n    options = (0, _obj.assign)(Player.getTagSettings(tag), options);\n\n    // Delay the initialization of children because we need to set up\n    // player properties first, and can't use `this` before `super()`\n    options.initChildren = false;\n\n    // Same with creating the element\n    options.createEl = false;\n\n    // we don't want the player to report touch activity on itself\n    // see enableTouchActivity in Component\n    options.reportTouchActivity = false;\n\n    // If language is not set, get the closest lang attribute\n    if (!options.language) {\n      if (typeof tag.closest === 'function') {\n        var closest = tag.closest('[lang]');\n\n        if (closest) {\n          options.language = closest.getAttribute('lang');\n        }\n      } else {\n        var element = tag;\n\n        while (element && element.nodeType === 1) {\n          if (Dom.getElAttributes(element).hasOwnProperty('lang')) {\n            options.language = element.getAttribute('lang');\n            break;\n          }\n          element = element.parentNode;\n        }\n      }\n    }\n\n    // Run base component initializing with new options\n\n    // if the global option object was accidentally blown away by\n    // someone, bail early with an informative error\n    var _this = _possibleConstructorReturn(this, _Component.call(this, null, options, ready));\n\n    if (!_this.options_ || !_this.options_.techOrder || !_this.options_.techOrder.length) {\n      throw new Error('No techOrder specified. Did you overwrite ' + 'videojs.options instead of just changing the ' + 'properties you want to override?');\n    }\n\n    // Store the original tag used to set options\n    _this.tag = tag;\n\n    // Store the tag attributes used to restore html5 element\n    _this.tagAttributes = tag && Dom.getElAttributes(tag);\n\n    // Update current language\n    _this.language(_this.options_.language);\n\n    // Update Supported Languages\n    if (options.languages) {\n      // Normalise player option languages to lowercase\n      var languagesToLower = {};\n\n      Object.getOwnPropertyNames(options.languages).forEach(function (name) {\n        languagesToLower[name.toLowerCase()] = options.languages[name];\n      });\n      _this.languages_ = languagesToLower;\n    } else {\n      _this.languages_ = Player.prototype.options_.languages;\n    }\n\n    // Cache for video property values.\n    _this.cache_ = {};\n\n    // Set poster\n    _this.poster_ = options.poster || '';\n\n    // Set controls\n    _this.controls_ = !!options.controls;\n\n    // Original tag settings stored in options\n    // now remove immediately so native controls don't flash.\n    // May be turned back on by HTML5 tech if nativeControlsForTouch is true\n    tag.controls = false;\n\n    /*\n     * Store the internal state of scrubbing\n     *\n     * @private\n     * @return {Boolean} True if the user is scrubbing\n     */\n    _this.scrubbing_ = false;\n\n    _this.el_ = _this.createEl();\n\n    // We also want to pass the original player options to each component and plugin\n    // as well so they don't need to reach back into the player for options later.\n    // We also need to do another copy of this.options_ so we don't end up with\n    // an infinite loop.\n    var playerOptionsCopy = (0, _mergeOptions2['default'])(_this.options_);\n\n    // Load plugins\n    if (options.plugins) {\n      var plugins = options.plugins;\n\n      Object.getOwnPropertyNames(plugins).forEach(function (name) {\n        if (typeof this[name] === 'function') {\n          this[name](plugins[name]);\n        } else {\n          _log2['default'].error('Unable to find plugin:', name);\n        }\n      }, _this);\n    }\n\n    _this.options_.playerOptions = playerOptionsCopy;\n\n    _this.initChildren();\n\n    // Set isAudio based on whether or not an audio tag was used\n    _this.isAudio(tag.nodeName.toLowerCase() === 'audio');\n\n    // Update controls className. Can't do this when the controls are initially\n    // set because the element doesn't exist yet.\n    if (_this.controls()) {\n      _this.addClass('vjs-controls-enabled');\n    } else {\n      _this.addClass('vjs-controls-disabled');\n    }\n\n    // Set ARIA label and region role depending on player type\n    _this.el_.setAttribute('role', 'region');\n    if (_this.isAudio()) {\n      _this.el_.setAttribute('aria-label', 'audio player');\n    } else {\n      _this.el_.setAttribute('aria-label', 'video player');\n    }\n\n    if (_this.isAudio()) {\n      _this.addClass('vjs-audio');\n    }\n\n    if (_this.flexNotSupported_()) {\n      _this.addClass('vjs-no-flex');\n    }\n\n    // TODO: Make this smarter. Toggle user state between touching/mousing\n    // using events, since devices can have both touch and mouse events.\n    // if (browser.TOUCH_ENABLED) {\n    //   this.addClass('vjs-touch-enabled');\n    // }\n\n    // iOS Safari has broken hover handling\n    if (!browser.IS_IOS) {\n      _this.addClass('vjs-workinghover');\n    }\n\n    // Make player easily findable by ID\n    Player.players[_this.id_] = _this;\n\n    // Add a major version class to aid css in plugins\n    var majorVersion = '5.20.5'.split('.')[0];\n\n    _this.addClass('vjs-v' + majorVersion);\n\n    // When the player is first initialized, trigger activity so components\n    // like the control bar show themselves if needed\n    _this.userActive(true);\n    _this.reportUserActivity();\n    _this.listenForUserActivity_();\n\n    _this.on('fullscreenchange', _this.handleFullscreenChange_);\n    _this.on('stageclick', _this.handleStageClick_);\n    return _this;\n  }\n\n  /**\n   * Destroys the video player and does any necessary cleanup.\n   *\n   * This is especially helpful if you are dynamically adding and removing videos\n   * to/from the DOM.\n   *\n   * @fires Player#dispose\n   */\n\n\n  Player.prototype.dispose = function dispose() {\n    /**\n     * Called when the player is being disposed of.\n     *\n     * @event Player#dispose\n     * @type {EventTarget~Event}\n     */\n    this.trigger('dispose');\n    // prevent dispose from being called twice\n    this.off('dispose');\n\n    if (this.styleEl_ && this.styleEl_.parentNode) {\n      this.styleEl_.parentNode.removeChild(this.styleEl_);\n    }\n\n    // Kill reference to this player\n    Player.players[this.id_] = null;\n\n    if (this.tag && this.tag.player) {\n      this.tag.player = null;\n    }\n\n    if (this.el_ && this.el_.player) {\n      this.el_.player = null;\n    }\n\n    if (this.tech_) {\n      this.tech_.dispose();\n    }\n\n    _Component.prototype.dispose.call(this);\n  };\n\n  /**\n   * Create the `Player`'s DOM element.\n   *\n   * @return {Element}\n   *         The DOM element that gets created.\n   */\n\n\n  Player.prototype.createEl = function createEl() {\n    var tag = this.tag;\n    var el = void 0;\n    var playerElIngest = this.playerElIngest_ = tag.parentNode && tag.parentNode.hasAttribute && tag.parentNode.hasAttribute('data-vjs-player');\n\n    if (playerElIngest) {\n      el = this.el_ = tag.parentNode;\n    } else {\n      el = this.el_ = _Component.prototype.createEl.call(this, 'div');\n    }\n\n    // set tabindex to -1 so we could focus on the player element\n    tag.setAttribute('tabindex', '-1');\n\n    // Remove width/height attrs from tag so CSS can make it 100% width/height\n    tag.removeAttribute('width');\n    tag.removeAttribute('height');\n\n    // Copy over all the attributes from the tag, including ID and class\n    // ID will now reference player box, not the video tag\n    var attrs = Dom.getElAttributes(tag);\n\n    Object.getOwnPropertyNames(attrs).forEach(function (attr) {\n      // workaround so we don't totally break IE7\n      // http://stackoverflow.com/questions/3653444/css-styles-not-applied-on-dynamic-elements-in-internet-explorer-7\n      if (attr === 'class') {\n        el.className += ' ' + attrs[attr];\n      } else {\n        el.setAttribute(attr, attrs[attr]);\n      }\n    });\n\n    // Update tag id/class for use as HTML5 playback tech\n    // Might think we should do this after embedding in container so .vjs-tech class\n    // doesn't flash 100% width/height, but class only applies with .video-js parent\n    tag.playerId = tag.id;\n    tag.id += '_html5_api';\n    tag.className = 'vjs-tech';\n\n    // Make player findable on elements\n    tag.player = el.player = this;\n    // Default state of video is paused\n    this.addClass('vjs-paused');\n\n    // Add a style element in the player that we'll use to set the width/height\n    // of the player in a way that's still overrideable by CSS, just like the\n    // video element\n    if (_window2['default'].VIDEOJS_NO_DYNAMIC_STYLE !== true) {\n      this.styleEl_ = stylesheet.createStyleElement('vjs-styles-dimensions');\n      var defaultsStyleEl = Dom.$('.vjs-styles-defaults');\n      var head = Dom.$('head');\n\n      head.insertBefore(this.styleEl_, defaultsStyleEl ? defaultsStyleEl.nextSibling : head.firstChild);\n    }\n\n    // Pass in the width/height/aspectRatio options which will update the style el\n    this.width(this.options_.width);\n    this.height(this.options_.height);\n    this.fluid(this.options_.fluid);\n    this.aspectRatio(this.options_.aspectRatio);\n\n    // Hide any links within the video/audio tag, because IE doesn't hide them completely.\n    var links = tag.getElementsByTagName('a');\n\n    for (var i = 0; i < links.length; i++) {\n      var linkEl = links.item(i);\n\n      Dom.addElClass(linkEl, 'vjs-hidden');\n      linkEl.setAttribute('hidden', 'hidden');\n    }\n\n    // insertElFirst seems to cause the networkState to flicker from 3 to 2, so\n    // keep track of the original for later so we can know if the source originally failed\n    tag.initNetworkState_ = tag.networkState;\n\n    // Wrap video tag in div (el/box) container\n    if (tag.parentNode && !playerElIngest) {\n      tag.parentNode.insertBefore(el, tag);\n    }\n\n    // insert the tag as the first child of the player element\n    // then manually add it to the children array so that this.addChild\n    // will work properly for other components\n    //\n    // Breaks iPhone, fixed in HTML5 setup.\n    Dom.insertElFirst(tag, el);\n    this.children_.unshift(tag);\n\n    this.el_ = el;\n\n    return el;\n  };\n\n  /**\n   * A getter/setter for the `Player`'s width.\n   *\n   * @param {number} [value]\n   *        The value to set the `Player's width to.\n   *\n   * @return {number}\n   *         The current width of the `Player`.\n   */\n\n\n  Player.prototype.width = function width(value) {\n    return this.dimension('width', value);\n  };\n\n  /**\n   * A getter/setter for the `Player`'s height.\n   *\n   * @param {number} [value]\n   *        The value to set the `Player's heigth to.\n   *\n   * @return {number}\n   *         The current heigth of the `Player`.\n   */\n\n\n  Player.prototype.height = function height(value) {\n    return this.dimension('height', value);\n  };\n\n  /**\n   * A getter/setter for the `Player`'s width & height.\n   *\n   * @param {string} dimension\n   *        This string can be:\n   *        - 'width'\n   *        - 'height'\n   *\n   * @param {number} [value]\n   *        Value for dimension specified in the first argument.\n   *\n   * @return {Player|number}\n   *         - Returns itself when setting; method can be chained.\n   *         - The dimension arguments value when getting (width/height).\n   */\n\n\n  Player.prototype.dimension = function dimension(_dimension, value) {\n    var privDimension = _dimension + '_';\n\n    if (value === undefined) {\n      return this[privDimension] || 0;\n    }\n\n    if (value === '') {\n      // If an empty string is given, reset the dimension to be automatic\n      this[privDimension] = undefined;\n    } else {\n      var parsedVal = parseFloat(value);\n\n      if (isNaN(parsedVal)) {\n        _log2['default'].error('Improper value \"' + value + '\" supplied for for ' + _dimension);\n        return this;\n      }\n\n      this[privDimension] = parsedVal;\n    }\n\n    this.updateStyleEl_();\n    return this;\n  };\n\n  /**\n   * A getter/setter/toggler for the vjs-fluid `className` on the `Player`.\n   *\n   * @param {boolean} [bool]\n   *        - A value of true adds the class.\n   *        - A value of false removes the class.\n   *        - No value will toggle the fluid class.\n   *\n   * @return {boolean|undefined}\n   *         - The value of fluid when getting.\n   *         - `undefined` when setting.\n   */\n\n\n  Player.prototype.fluid = function fluid(bool) {\n    if (bool === undefined) {\n      return !!this.fluid_;\n    }\n\n    this.fluid_ = !!bool;\n\n    if (bool) {\n      this.addClass('vjs-fluid');\n    } else {\n      this.removeClass('vjs-fluid');\n    }\n\n    this.updateStyleEl_();\n  };\n\n  /**\n   * Get/Set the aspect ratio\n   *\n   * @param {string} [ratio]\n   *        Aspect ratio for player\n   *\n   * @return {string|undefined}\n   *         returns the current aspect ratio when getting\n   */\n\n  /**\n   * A getter/setter for the `Player`'s aspect ratio.\n   *\n   * @param {string} [ratio]\n   *        The value to set the `Player's aspect ratio to.\n   *\n   * @return {string|undefined}\n   *         - The current aspect ratio of the `Player` when getting.\n   *         - undefined when setting\n   */\n\n\n  Player.prototype.aspectRatio = function aspectRatio(ratio) {\n    if (ratio === undefined) {\n      return this.aspectRatio_;\n    }\n\n    // Check for width:height format\n    if (!/^\\d+\\:\\d+$/.test(ratio)) {\n      throw new Error('Improper value supplied for aspect ratio. The format should be width:height, for example 16:9.');\n    }\n    this.aspectRatio_ = ratio;\n\n    // We're assuming if you set an aspect ratio you want fluid mode,\n    // because in fixed mode you could calculate width and height yourself.\n    this.fluid(true);\n\n    this.updateStyleEl_();\n  };\n\n  /**\n   * Update styles of the `Player` element (height, width and aspect ratio).\n   *\n   * @private\n   * @listens Tech#loadedmetadata\n   */\n\n\n  Player.prototype.updateStyleEl_ = function updateStyleEl_() {\n    if (_window2['default'].VIDEOJS_NO_DYNAMIC_STYLE === true) {\n      var _width = typeof this.width_ === 'number' ? this.width_ : this.options_.width;\n      var _height = typeof this.height_ === 'number' ? this.height_ : this.options_.height;\n      var techEl = this.tech_ && this.tech_.el();\n\n      if (techEl) {\n        if (_width >= 0) {\n          techEl.width = _width;\n        }\n        if (_height >= 0) {\n          techEl.height = _height;\n        }\n      }\n\n      return;\n    }\n\n    var width = void 0;\n    var height = void 0;\n    var aspectRatio = void 0;\n    var idClass = void 0;\n\n    // The aspect ratio is either used directly or to calculate width and height.\n    if (this.aspectRatio_ !== undefined && this.aspectRatio_ !== 'auto') {\n      // Use any aspectRatio that's been specifically set\n      aspectRatio = this.aspectRatio_;\n    } else if (this.videoWidth() > 0) {\n      // Otherwise try to get the aspect ratio from the video metadata\n      aspectRatio = this.videoWidth() + ':' + this.videoHeight();\n    } else {\n      // Or use a default. The video element's is 2:1, but 16:9 is more common.\n      aspectRatio = '16:9';\n    }\n\n    // Get the ratio as a decimal we can use to calculate dimensions\n    var ratioParts = aspectRatio.split(':');\n    var ratioMultiplier = ratioParts[1] / ratioParts[0];\n\n    if (this.width_ !== undefined) {\n      // Use any width that's been specifically set\n      width = this.width_;\n    } else if (this.height_ !== undefined) {\n      // Or calulate the width from the aspect ratio if a height has been set\n      width = this.height_ / ratioMultiplier;\n    } else {\n      // Or use the video's metadata, or use the video el's default of 300\n      width = this.videoWidth() || 300;\n    }\n\n    if (this.height_ !== undefined) {\n      // Use any height that's been specifically set\n      height = this.height_;\n    } else {\n      // Otherwise calculate the height from the ratio and the width\n      height = width * ratioMultiplier;\n    }\n\n    // Ensure the CSS class is valid by starting with an alpha character\n    if (/^[^a-zA-Z]/.test(this.id())) {\n      idClass = 'dimensions-' + this.id();\n    } else {\n      idClass = this.id() + '-dimensions';\n    }\n\n    // Ensure the right class is still on the player for the style element\n    this.addClass(idClass);\n\n    stylesheet.setTextContent(this.styleEl_, '\\n      .' + idClass + ' {\\n        width: ' + width + 'px;\\n        height: ' + height + 'px;\\n      }\\n\\n      .' + idClass + '.vjs-fluid {\\n        padding-top: ' + ratioMultiplier * 100 + '%;\\n      }\\n    ');\n  };\n\n  /**\n   * Load/Create an instance of playback {@link Tech} including element\n   * and API methods. Then append the `Tech` element in `Player` as a child.\n   *\n   * @param {string} techName\n   *        name of the playback technology\n   *\n   * @param {string} source\n   *        video source\n   *\n   * @private\n   */\n\n\n  Player.prototype.loadTech_ = function loadTech_(techName, source) {\n    var _this2 = this;\n\n    // Pause and remove current playback technology\n    if (this.tech_) {\n      this.unloadTech_();\n    }\n\n    // get rid of the HTML5 video tag as soon as we are using another tech\n    if (techName !== 'Html5' && this.tag) {\n      _tech2['default'].getTech('Html5').disposeMediaElement(this.tag);\n      this.tag.player = null;\n      this.tag = null;\n    }\n\n    this.techName_ = techName;\n\n    // Turn off API access because we're loading a new tech that might load asynchronously\n    this.isReady_ = false;\n\n    // Grab tech-specific options from player options and add source and parent element to use.\n    var techOptions = (0, _obj.assign)({\n      source: source,\n      'nativeControlsForTouch': this.options_.nativeControlsForTouch,\n      'playerId': this.id(),\n      'techId': this.id() + '_' + techName + '_api',\n      'videoTracks': this.videoTracks_,\n      'textTracks': this.textTracks_,\n      'audioTracks': this.audioTracks_,\n      'autoplay': this.options_.autoplay,\n      'playsinline': this.options_.playsinline,\n      'preload': this.options_.preload,\n      'loop': this.options_.loop,\n      'muted': this.options_.muted,\n      'poster': this.poster(),\n      'language': this.language(),\n      'playerElIngest': this.playerElIngest_ || false,\n      'vtt.js': this.options_['vtt.js']\n    }, this.options_[techName.toLowerCase()]);\n\n    if (this.tag) {\n      techOptions.tag = this.tag;\n    }\n\n    if (source) {\n      this.currentType_ = source.type;\n\n      if (source.src === this.cache_.src && this.cache_.currentTime > 0) {\n        techOptions.startTime = this.cache_.currentTime;\n      }\n\n      this.cache_.sources = null;\n      this.cache_.source = source;\n      this.cache_.src = source.src;\n    }\n\n    // Initialize tech instance\n    var TechComponent = _tech2['default'].getTech(techName);\n\n    // Support old behavior of techs being registered as components.\n    // Remove once that deprecated behavior is removed.\n    if (!TechComponent) {\n      TechComponent = _component2['default'].getComponent(techName);\n    }\n    this.tech_ = new TechComponent(techOptions);\n\n    // player.triggerReady is always async, so don't need this to be async\n    this.tech_.ready(Fn.bind(this, this.handleTechReady_), true);\n\n    _textTrackListConverter2['default'].jsonToTextTracks(this.textTracksJson_ || [], this.tech_);\n\n    // Listen to all HTML5-defined events and trigger them on the player\n    TECH_EVENTS_RETRIGGER.forEach(function (event) {\n      _this2.on(_this2.tech_, event, _this2['handleTech' + (0, _toTitleCase2['default'])(event) + '_']);\n    });\n    this.on(this.tech_, 'loadstart', this.handleTechLoadStart_);\n    this.on(this.tech_, 'waiting', this.handleTechWaiting_);\n    this.on(this.tech_, 'canplay', this.handleTechCanPlay_);\n    this.on(this.tech_, 'canplaythrough', this.handleTechCanPlayThrough_);\n    this.on(this.tech_, 'playing', this.handleTechPlaying_);\n    this.on(this.tech_, 'ended', this.handleTechEnded_);\n    this.on(this.tech_, 'seeking', this.handleTechSeeking_);\n    this.on(this.tech_, 'seeked', this.handleTechSeeked_);\n    this.on(this.tech_, 'play', this.handleTechPlay_);\n    this.on(this.tech_, 'firstplay', this.handleTechFirstPlay_);\n    this.on(this.tech_, 'pause', this.handleTechPause_);\n    this.on(this.tech_, 'durationchange', this.handleTechDurationChange_);\n    this.on(this.tech_, 'fullscreenchange', this.handleTechFullscreenChange_);\n    this.on(this.tech_, 'error', this.handleTechError_);\n    this.on(this.tech_, 'loadedmetadata', this.updateStyleEl_);\n    this.on(this.tech_, 'posterchange', this.handleTechPosterChange_);\n    this.on(this.tech_, 'textdata', this.handleTechTextData_);\n\n    this.usingNativeControls(this.techGet_('controls'));\n\n    if (this.controls() && !this.usingNativeControls()) {\n      this.addTechControlsListeners_();\n    }\n\n    // Add the tech element in the DOM if it was not already there\n    // Make sure to not insert the original video element if using Html5\n    if (this.tech_.el().parentNode !== this.el() && (techName !== 'Html5' || !this.tag)) {\n      Dom.insertElFirst(this.tech_.el(), this.el());\n    }\n\n    // Get rid of the original video tag reference after the first tech is loaded\n    if (this.tag) {\n      this.tag.player = null;\n      this.tag = null;\n    }\n  };\n\n  /**\n   * Unload and dispose of the current playback {@link Tech}.\n   *\n   * @private\n   */\n\n\n  Player.prototype.unloadTech_ = function unloadTech_() {\n    // Save the current text tracks so that we can reuse the same text tracks with the next tech\n    this.videoTracks_ = this.videoTracks();\n    this.textTracks_ = this.textTracks();\n    this.audioTracks_ = this.audioTracks();\n    this.textTracksJson_ = _textTrackListConverter2['default'].textTracksToJson(this.tech_);\n\n    this.isReady_ = false;\n\n    this.tech_.dispose();\n\n    this.tech_ = false;\n  };\n\n  /**\n   * Return a reference to the current {@link Tech}, but only if given an object with the\n   * `IWillNotUseThisInPlugins` property having a true value. This is try and prevent misuse\n   * of techs by plugins.\n   *\n   * @param {Object} safety\n   *        An object that must contain `{IWillNotUseThisInPlugins: true}`\n   *\n   * @param {boolean} safety.IWillNotUseThisInPlugins\n   *        Must be set to true or else this function will throw an error.\n   *\n   * @return {Tech}\n   *         The Tech\n   */\n\n\n  Player.prototype.tech = function tech(safety) {\n    if (safety && safety.IWillNotUseThisInPlugins) {\n      return this.tech_;\n    }\n    var errorText = '\\n      Please make sure that you are not using this inside of a plugin.\\n      To disable this alert and error, please pass in an object with\\n      `IWillNotUseThisInPlugins` to the `tech` method. See\\n      https://github.com/videojs/video.js/issues/2617 for more info.\\n    ';\n\n    _window2['default'].alert(errorText);\n    throw new Error(errorText);\n  };\n\n  /**\n   * Set up click and touch listeners for the playback element\n   *\n   * - On desktops: a click on the video itself will toggle playback\n   * - On mobile devices: a click on the video toggles controls\n   *   which is done by toggling the user state between active and\n   *   inactive\n   * - A tap can signal that a user has become active or has become inactive\n   *   e.g. a quick tap on an iPhone movie should reveal the controls. Another\n   *   quick tap should hide them again (signaling the user is in an inactive\n   *   viewing state)\n   * - In addition to this, we still want the user to be considered inactive after\n   *   a few seconds of inactivity.\n   *\n   * > Note: the only part of iOS interaction we can't mimic with this setup\n   * is a touch and hold on the video element counting as activity in order to\n   * keep the controls showing, but that shouldn't be an issue. A touch and hold\n   * on any controls will still keep the user active\n   *\n   * @private\n   */\n\n\n  Player.prototype.addTechControlsListeners_ = function addTechControlsListeners_() {\n    // Make sure to remove all the previous listeners in case we are called multiple times.\n    this.removeTechControlsListeners_();\n\n    // Some browsers (Chrome & IE) don't trigger a click on a flash swf, but do\n    // trigger mousedown/up.\n    // http://stackoverflow.com/questions/1444562/javascript-onclick-event-over-flash-object\n    // Any touch events are set to block the mousedown event from happening\n    this.on(this.tech_, 'mousedown', this.handleTechClick_);\n\n    // If the controls were hidden we don't want that to change without a tap event\n    // so we'll check if the controls were already showing before reporting user\n    // activity\n    this.on(this.tech_, 'touchstart', this.handleTechTouchStart_);\n    this.on(this.tech_, 'touchmove', this.handleTechTouchMove_);\n    this.on(this.tech_, 'touchend', this.handleTechTouchEnd_);\n\n    // The tap listener needs to come after the touchend listener because the tap\n    // listener cancels out any reportedUserActivity when setting userActive(false)\n    this.on(this.tech_, 'tap', this.handleTechTap_);\n  };\n\n  /**\n   * Remove the listeners used for click and tap controls. This is needed for\n   * toggling to controls disabled, where a tap/touch should do nothing.\n   *\n   * @private\n   */\n\n\n  Player.prototype.removeTechControlsListeners_ = function removeTechControlsListeners_() {\n    // We don't want to just use `this.off()` because there might be other needed\n    // listeners added by techs that extend this.\n    this.off(this.tech_, 'tap', this.handleTechTap_);\n    this.off(this.tech_, 'touchstart', this.handleTechTouchStart_);\n    this.off(this.tech_, 'touchmove', this.handleTechTouchMove_);\n    this.off(this.tech_, 'touchend', this.handleTechTouchEnd_);\n    this.off(this.tech_, 'mousedown', this.handleTechClick_);\n  };\n\n  /**\n   * Player waits for the tech to be ready\n   *\n   * @private\n   */\n\n\n  Player.prototype.handleTechReady_ = function handleTechReady_() {\n    this.triggerReady();\n\n    // Keep the same volume as before\n    if (this.cache_.volume) {\n      this.techCall_('setVolume', this.cache_.volume);\n    }\n\n    // Look if the tech found a higher resolution poster while loading\n    this.handleTechPosterChange_();\n\n    // Update the duration if available\n    this.handleTechDurationChange_();\n\n    // Chrome and Safari both have issues with autoplay.\n    // In Safari (5.1.1), when we move the video element into the container div, autoplay doesn't work.\n    // In Chrome (15), if you have autoplay + a poster + no controls, the video gets hidden (but audio plays)\n    // This fixes both issues. Need to wait for API, so it updates displays correctly\n    if ((this.src() || this.currentSrc()) && this.tag && this.options_.autoplay && this.paused()) {\n      try {\n        // Chrome Fix. Fixed in Chrome v16.\n        delete this.tag.poster;\n      } catch (e) {\n        (0, _log2['default'])('deleting tag.poster throws in some browsers', e);\n      }\n      this.play();\n    }\n  };\n\n  /**\n   * Retrigger the `loadstart` event that was triggered by the {@link Tech}. This\n   * function will also trigger {@link Player#firstplay} if it is the first loadstart\n   * for a video.\n   *\n   * @fires Player#loadstart\n   * @fires Player#firstplay\n   * @listens Tech#loadstart\n   * @private\n   */\n\n\n  Player.prototype.handleTechLoadStart_ = function handleTechLoadStart_() {\n    // TODO: Update to use `emptied` event instead. See #1277.\n\n    this.removeClass('vjs-ended');\n    this.removeClass('vjs-seeking');\n\n    // reset the error state\n    this.error(null);\n\n    // If it's already playing we want to trigger a firstplay event now.\n    // The firstplay event relies on both the play and loadstart events\n    // which can happen in any order for a new source\n    if (!this.paused()) {\n      /**\n       * Fired when the user agent begins looking for media data\n       *\n       * @event Player#loadstart\n       * @type {EventTarget~Event}\n       */\n      this.trigger('loadstart');\n      this.trigger('firstplay');\n    } else {\n      // reset the hasStarted state\n      this.hasStarted(false);\n      this.trigger('loadstart');\n    }\n  };\n\n  /**\n   * Add/remove the vjs-has-started class\n   *\n   * @fires Player#firstplay\n   *\n   * @param {boolean} hasStarted\n   *        - true: adds the class\n   *        - false: remove the class\n   *\n   * @return {boolean}\n   *         the boolean value of hasStarted\n   */\n\n\n  Player.prototype.hasStarted = function hasStarted(_hasStarted) {\n    if (_hasStarted !== undefined) {\n      // only update if this is a new value\n      if (this.hasStarted_ !== _hasStarted) {\n        this.hasStarted_ = _hasStarted;\n        if (_hasStarted) {\n          this.addClass('vjs-has-started');\n          // trigger the firstplay event if this newly has played\n          this.trigger('firstplay');\n        } else {\n          this.removeClass('vjs-has-started');\n        }\n      }\n      return this;\n    }\n    return !!this.hasStarted_;\n  };\n\n  /**\n   * Fired whenever the media begins or resumes playback\n   *\n   * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-play}\n   * @fires Player#play\n   * @listens Tech#play\n   * @private\n   */\n\n\n  Player.prototype.handleTechPlay_ = function handleTechPlay_() {\n    this.removeClass('vjs-ended');\n    this.removeClass('vjs-paused');\n    this.addClass('vjs-playing');\n\n    // hide the poster when the user hits play\n    this.hasStarted(true);\n    /**\n     * Triggered whenever an {@link Tech#play} event happens. Indicates that\n     * playback has started or resumed.\n     *\n     * @event Player#play\n     * @type {EventTarget~Event}\n     */\n    this.trigger('play');\n  };\n\n  /**\n   * Retrigger the `waiting` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#waiting\n   * @listens Tech#waiting\n   * @private\n   */\n\n\n  Player.prototype.handleTechWaiting_ = function handleTechWaiting_() {\n    var _this3 = this;\n\n    this.addClass('vjs-waiting');\n    /**\n     * A readyState change on the DOM element has caused playback to stop.\n     *\n     * @event Player#waiting\n     * @type {EventTarget~Event}\n     */\n    this.trigger('waiting');\n    this.one('timeupdate', function () {\n      return _this3.removeClass('vjs-waiting');\n    });\n  };\n\n  /**\n   * Retrigger the `canplay` event that was triggered by the {@link Tech}.\n   * > Note: This is not consistent between browsers. See #1351\n   *\n   * @fires Player#canplay\n   * @listens Tech#canplay\n   * @private\n   */\n\n\n  Player.prototype.handleTechCanPlay_ = function handleTechCanPlay_() {\n    this.removeClass('vjs-waiting');\n    /**\n     * The media has a readyState of HAVE_FUTURE_DATA or greater.\n     *\n     * @event Player#canplay\n     * @type {EventTarget~Event}\n     */\n    this.trigger('canplay');\n  };\n\n  /**\n   * Retrigger the `canplaythrough` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#canplaythrough\n   * @listens Tech#canplaythrough\n   * @private\n   */\n\n\n  Player.prototype.handleTechCanPlayThrough_ = function handleTechCanPlayThrough_() {\n    this.removeClass('vjs-waiting');\n    /**\n     * The media has a readyState of HAVE_ENOUGH_DATA or greater. This means that the\n     * entire media file can be played without buffering.\n     *\n     * @event Player#canplaythrough\n     * @type {EventTarget~Event}\n     */\n    this.trigger('canplaythrough');\n  };\n\n  /**\n   * Retrigger the `playing` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#playing\n   * @listens Tech#playing\n   * @private\n   */\n\n\n  Player.prototype.handleTechPlaying_ = function handleTechPlaying_() {\n    this.removeClass('vjs-waiting');\n    /**\n     * The media is no longer blocked from playback, and has started playing.\n     *\n     * @event Player#playing\n     * @type {EventTarget~Event}\n     */\n    this.trigger('playing');\n  };\n\n  /**\n   * Retrigger the `seeking` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#seeking\n   * @listens Tech#seeking\n   * @private\n   */\n\n\n  Player.prototype.handleTechSeeking_ = function handleTechSeeking_() {\n    this.addClass('vjs-seeking');\n    /**\n     * Fired whenever the player is jumping to a new time\n     *\n     * @event Player#seeking\n     * @type {EventTarget~Event}\n     */\n    this.trigger('seeking');\n  };\n\n  /**\n   * Retrigger the `seeked` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#seeked\n   * @listens Tech#seeked\n   * @private\n   */\n\n\n  Player.prototype.handleTechSeeked_ = function handleTechSeeked_() {\n    this.removeClass('vjs-seeking');\n    /**\n     * Fired when the player has finished jumping to a new time\n     *\n     * @event Player#seeked\n     * @type {EventTarget~Event}\n     */\n    this.trigger('seeked');\n  };\n\n  /**\n   * Retrigger the `firstplay` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#firstplay\n   * @listens Tech#firstplay\n   * @deprecated As of 6.0 passing the `starttime` option to the player will be deprecated\n   * @private\n   */\n\n\n  Player.prototype.handleTechFirstPlay_ = function handleTechFirstPlay_() {\n    // If the first starttime attribute is specified\n    // then we will start at the given offset in seconds\n    if (this.options_.starttime) {\n      _log2['default'].warn('Passing the `starttime` option to the player will be deprecated in 6.0');\n      this.currentTime(this.options_.starttime);\n    }\n\n    this.addClass('vjs-has-started');\n    /**\n     * Fired the first time a video is played. Not part of the HLS spec, and this is\n     * probably not the best implementation yet, so use sparingly. If you don't have a\n     * reason to prevent playback, use `myPlayer.one('play');` instead.\n     *\n     * @event Player#firstplay\n     * @type {EventTarget~Event}\n     */\n    this.trigger('firstplay');\n  };\n\n  /**\n   * Retrigger the `pause` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#pause\n   * @listens Tech#pause\n   * @private\n   */\n\n\n  Player.prototype.handleTechPause_ = function handleTechPause_() {\n    this.removeClass('vjs-playing');\n    this.addClass('vjs-paused');\n    /**\n     * Fired whenever the media has been paused\n     *\n     * @event Player#pause\n     * @type {EventTarget~Event}\n     */\n    this.trigger('pause');\n  };\n\n  /**\n   * Retrigger the `ended` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#ended\n   * @listens Tech#ended\n   * @private\n   */\n\n\n  Player.prototype.handleTechEnded_ = function handleTechEnded_() {\n    this.addClass('vjs-ended');\n    if (this.options_.loop) {\n      this.currentTime(0);\n      this.play();\n    } else if (!this.paused()) {\n      this.pause();\n    }\n\n    /**\n     * Fired when the end of the media resource is reached (currentTime == duration)\n     *\n     * @event Player#ended\n     * @type {EventTarget~Event}\n     */\n    this.trigger('ended');\n  };\n\n  /**\n   * Fired when the duration of the media resource is first known or changed\n   *\n   * @listens Tech#durationchange\n   * @private\n   */\n\n\n  Player.prototype.handleTechDurationChange_ = function handleTechDurationChange_() {\n    this.duration(this.techGet_('duration'));\n  };\n\n  /**\n   * Handle a click on the media element to play/pause\n   *\n   * @param {EventTarget~Event} event\n   *        the event that caused this function to trigger\n   *\n   * @listens Tech#mousedown\n   * @private\n   */\n\n\n  Player.prototype.handleTechClick_ = function handleTechClick_(event) {\n    // We're using mousedown to detect clicks thanks to Flash, but mousedown\n    // will also be triggered with right-clicks, so we need to prevent that\n    if (event.button !== 0) {\n      return;\n    }\n\n    // When controls are disabled a click should not toggle playback because\n    // the click is considered a control\n    if (this.controls()) {\n      if (this.paused()) {\n        this.play();\n      } else {\n        this.pause();\n      }\n    }\n  };\n\n  /**\n   * Handle a tap on the media element. It will toggle the user\n   * activity state, which hides and shows the controls.\n   *\n   * @listens Tech#tap\n   * @private\n   */\n\n\n  Player.prototype.handleTechTap_ = function handleTechTap_() {\n    this.userActive(!this.userActive());\n  };\n\n  /**\n   * Handle touch to start\n   *\n   * @listens Tech#touchstart\n   * @private\n   */\n\n\n  Player.prototype.handleTechTouchStart_ = function handleTechTouchStart_() {\n    this.userWasActive = this.userActive();\n  };\n\n  /**\n   * Handle touch to move\n   *\n   * @listens Tech#touchmove\n   * @private\n   */\n\n\n  Player.prototype.handleTechTouchMove_ = function handleTechTouchMove_() {\n    if (this.userWasActive) {\n      this.reportUserActivity();\n    }\n  };\n\n  /**\n   * Handle touch to end\n   *\n   * @param {EventTarget~Event} event\n   *        the touchend event that triggered\n   *        this function\n   *\n   * @listens Tech#touchend\n   * @private\n   */\n\n\n  Player.prototype.handleTechTouchEnd_ = function handleTechTouchEnd_(event) {\n    // Stop the mouse events from also happening\n    event.preventDefault();\n  };\n\n  /**\n   * Fired when the player switches in or out of fullscreen mode\n   *\n   * @private\n   * @listens Player#fullscreenchange\n   */\n\n\n  Player.prototype.handleFullscreenChange_ = function handleFullscreenChange_() {\n    if (this.isFullscreen()) {\n      this.addClass('vjs-fullscreen');\n    } else {\n      this.removeClass('vjs-fullscreen');\n    }\n  };\n\n  /**\n   * native click events on the SWF aren't triggered on IE11, Win8.1RT\n   * use stageclick events triggered from inside the SWF instead\n   *\n   * @private\n   * @listens stageclick\n   */\n\n\n  Player.prototype.handleStageClick_ = function handleStageClick_() {\n    this.reportUserActivity();\n  };\n\n  /**\n   * Handle Tech Fullscreen Change\n   *\n   * @param {EventTarget~Event} event\n   *        the fullscreenchange event that triggered this function\n   *\n   * @param {Object} data\n   *        the data that was sent with the event\n   *\n   * @private\n   * @listens Tech#fullscreenchange\n   * @fires Player#fullscreenchange\n   */\n\n\n  Player.prototype.handleTechFullscreenChange_ = function handleTechFullscreenChange_(event, data) {\n    if (data) {\n      this.isFullscreen(data.isFullscreen);\n    }\n    /**\n     * Fired when going in and out of fullscreen.\n     *\n     * @event Player#fullscreenchange\n     * @type {EventTarget~Event}\n     */\n    this.trigger('fullscreenchange');\n  };\n\n  /**\n   * Fires when an error occurred during the loading of an audio/video.\n   *\n   * @private\n   * @listens Tech#error\n   */\n\n\n  Player.prototype.handleTechError_ = function handleTechError_() {\n    var error = this.tech_.error();\n\n    this.error(error);\n  };\n\n  /**\n   * Retrigger the `textdata` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#textdata\n   * @listens Tech#textdata\n   * @private\n   */\n\n\n  Player.prototype.handleTechTextData_ = function handleTechTextData_() {\n    var data = null;\n\n    if (arguments.length > 1) {\n      data = arguments[1];\n    }\n\n    /**\n     * Fires when we get a textdata event from tech\n     *\n     * @event Player#textdata\n     * @type {EventTarget~Event}\n     */\n    this.trigger('textdata', data);\n  };\n\n  /**\n   * Get object for cached values.\n   *\n   * @return {Object}\n   *         get the current object cache\n   */\n\n\n  Player.prototype.getCache = function getCache() {\n    return this.cache_;\n  };\n\n  /**\n   * Pass values to the playback tech\n   *\n   * @param {string} [method]\n   *        the method to call\n   *\n   * @param {Object} arg\n   *        the argument to pass\n   *\n   * @private\n   */\n\n\n  Player.prototype.techCall_ = function techCall_(method, arg) {\n    // If it's not ready yet, call method when it is\n    if (this.tech_ && !this.tech_.isReady_) {\n      this.tech_.ready(function () {\n        this[method](arg);\n      }, true);\n\n      // Otherwise call method now\n    } else {\n      try {\n        if (this.tech_) {\n          this.tech_[method](arg);\n        }\n      } catch (e) {\n        (0, _log2['default'])(e);\n        throw e;\n      }\n    }\n  };\n\n  /**\n   * Get calls can't wait for the tech, and sometimes don't need to.\n   *\n   * @param {string} method\n   *        Tech method\n   *\n   * @return {Function|undefined}\n   *         the method or undefined\n   *\n   * @private\n   */\n\n\n  Player.prototype.techGet_ = function techGet_(method) {\n    if (this.tech_ && this.tech_.isReady_) {\n\n      // Flash likes to die and reload when you hide or reposition it.\n      // In these cases the object methods go away and we get errors.\n      // When that happens we'll catch the errors and inform tech that it's not ready any more.\n      try {\n        return this.tech_[method]();\n      } catch (e) {\n        // When building additional tech libs, an expected method may not be defined yet\n        if (this.tech_[method] === undefined) {\n          (0, _log2['default'])('Video.js: ' + method + ' method not defined for ' + this.techName_ + ' playback technology.', e);\n\n          // When a method isn't available on the object it throws a TypeError\n        } else if (e.name === 'TypeError') {\n          (0, _log2['default'])('Video.js: ' + method + ' unavailable on ' + this.techName_ + ' playback technology element.', e);\n          this.tech_.isReady_ = false;\n        } else {\n          (0, _log2['default'])(e);\n        }\n        throw e;\n      }\n    }\n\n    return;\n  };\n\n  /**\n   * start media playback\n   *\n   * @return {Player}\n   *         A reference to the player object this function was called on\n   */\n\n\n  Player.prototype.play = function play() {\n    // Only calls the tech's play if we already have a src loaded\n    if (this.src() || this.currentSrc()) {\n      this.techCall_('play');\n    } else {\n      this.tech_.one('loadstart', function () {\n        this.play();\n      });\n    }\n\n    return this;\n  };\n\n  /**\n   * Pause the video playback\n   *\n   * @return {Player}\n   *         A reference to the player object this function was called on\n   */\n\n\n  Player.prototype.pause = function pause() {\n    this.techCall_('pause');\n    return this;\n  };\n\n  /**\n   * Check if the player is paused or has yet to play\n   *\n   * @return {boolean}\n   *         - false: if the media is currently playing\n   *         - true: if media is not currently playing\n   */\n\n\n  Player.prototype.paused = function paused() {\n    // The initial state of paused should be true (in Safari it's actually false)\n    return this.techGet_('paused') === false ? false : true;\n  };\n\n  /**\n   * Returns whether or not the user is \"scrubbing\". Scrubbing is\n   * when the user has clicked the progress bar handle and is\n   * dragging it along the progress bar.\n   *\n   * @param {boolean} [isScrubbing]\n   *        wether the user is or is not scrubbing\n   *\n   * @return {boolean|Player}\n   *         A instance of the player that called this function when setting,\n   *         and the value of scrubbing when getting\n   */\n\n\n  Player.prototype.scrubbing = function scrubbing(isScrubbing) {\n    if (isScrubbing !== undefined) {\n      this.scrubbing_ = !!isScrubbing;\n\n      if (isScrubbing) {\n        this.addClass('vjs-scrubbing');\n      } else {\n        this.removeClass('vjs-scrubbing');\n      }\n\n      return this;\n    }\n\n    return this.scrubbing_;\n  };\n\n  /**\n   * Get or set the current time (in seconds)\n   *\n   * @param {number|string} [seconds]\n   *        The time to seek to in seconds\n   *\n   * @return {Player|number}\n   *         - the current time in seconds when getting\n   *         - a reference to the current player object when setting\n   */\n\n\n  Player.prototype.currentTime = function currentTime(seconds) {\n    if (seconds !== undefined) {\n\n      this.techCall_('setCurrentTime', seconds);\n\n      return this;\n    }\n\n    // cache last currentTime and return. default to 0 seconds\n    //\n    // Caching the currentTime is meant to prevent a massive amount of reads on the tech's\n    // currentTime when scrubbing, but may not provide much performance benefit afterall.\n    // Should be tested. Also something has to read the actual current time or the cache will\n    // never get updated.\n    this.cache_.currentTime = this.techGet_('currentTime') || 0;\n    return this.cache_.currentTime;\n  };\n\n  /**\n   * Normally gets the length in time of the video in seconds;\n   * in all but the rarest use cases an argument will NOT be passed to the method\n   *\n   * > **NOTE**: The video must have started loading before the duration can be\n   * known, and in the case of Flash, may not be known until the video starts\n   * playing.\n   *\n   * @fires Player#durationchange\n   *\n   * @param {number} [seconds]\n   *        The duration of the video to set in seconds\n   *\n   * @return {number|Player}\n   *         - The duration of the video in seconds when getting\n   *         - A reference to the player that called this function\n   *           when setting\n   */\n\n\n  Player.prototype.duration = function duration(seconds) {\n    if (seconds === undefined) {\n      // return NaN if the duration is not known\n      return this.cache_.duration !== undefined ? this.cache_.duration : NaN;\n    }\n\n    seconds = parseFloat(seconds);\n\n    // Standardize on Inifity for signaling video is live\n    if (seconds < 0) {\n      seconds = Infinity;\n    }\n\n    if (seconds !== this.cache_.duration) {\n      // Cache the last set value for optimized scrubbing (esp. Flash)\n      this.cache_.duration = seconds;\n\n      if (seconds === Infinity) {\n        this.addClass('vjs-live');\n      } else {\n        this.removeClass('vjs-live');\n      }\n      /**\n       * @event Player#durationchange\n       * @type {EventTarget~Event}\n       */\n      this.trigger('durationchange');\n    }\n\n    return this;\n  };\n\n  /**\n   * Calculates how much time is left in the video. Not part\n   * of the native video API.\n   *\n   * @return {number}\n   *         The time remaining in seconds\n   */\n\n\n  Player.prototype.remainingTime = function remainingTime() {\n    return this.duration() - this.currentTime();\n  };\n\n  //\n  // Kind of like an array of portions of the video that have been downloaded.\n\n  /**\n   * Get a TimeRange object with an array of the times of the video\n   * that have been downloaded. If you just want the percent of the\n   * video that's been downloaded, use bufferedPercent.\n   *\n   * @see [Buffered Spec]{@link http://dev.w3.org/html5/spec/video.html#dom-media-buffered}\n   *\n   * @return {TimeRange}\n   *         A mock TimeRange object (following HTML spec)\n   */\n\n\n  Player.prototype.buffered = function buffered() {\n    var buffered = this.techGet_('buffered');\n\n    if (!buffered || !buffered.length) {\n      buffered = (0, _timeRanges.createTimeRange)(0, 0);\n    }\n\n    return buffered;\n  };\n\n  /**\n   * Get the percent (as a decimal) of the video that's been downloaded.\n   * This method is not a part of the native HTML video API.\n   *\n   * @return {number}\n   *         A decimal between 0 and 1 representing the percent\n   *         that is bufferred 0 being 0% and 1 being 100%\n   */\n\n\n  Player.prototype.bufferedPercent = function bufferedPercent() {\n    return (0, _buffer.bufferedPercent)(this.buffered(), this.duration());\n  };\n\n  /**\n   * Get the ending time of the last buffered time range\n   * This is used in the progress bar to encapsulate all time ranges.\n   *\n   * @return {number}\n   *         The end of the last buffered time range\n   */\n\n\n  Player.prototype.bufferedEnd = function bufferedEnd() {\n    var buffered = this.buffered();\n    var duration = this.duration();\n    var end = buffered.end(buffered.length - 1);\n\n    if (end > duration) {\n      end = duration;\n    }\n\n    return end;\n  };\n\n  /**\n   * Get or set the current volume of the media\n   *\n   * @param  {number} [percentAsDecimal]\n   *         The new volume as a decimal percent:\n   *         - 0 is muted/0%/off\n   *         - 1.0 is 100%/full\n   *         - 0.5 is half volume or 50%\n   *\n   * @return {Player|number}\n   *         a reference to the calling player when setting and the\n   *         current volume as a percent when getting\n   */\n\n\n  Player.prototype.volume = function volume(percentAsDecimal) {\n    var vol = void 0;\n\n    if (percentAsDecimal !== undefined) {\n      // Force value to between 0 and 1\n      vol = Math.max(0, Math.min(1, parseFloat(percentAsDecimal)));\n      this.cache_.volume = vol;\n      this.techCall_('setVolume', vol);\n\n      return this;\n    }\n\n    // Default to 1 when returning current volume.\n    vol = parseFloat(this.techGet_('volume'));\n    return isNaN(vol) ? 1 : vol;\n  };\n\n  /**\n   * Get the current muted state, or turn mute on or off\n   *\n   * @param {boolean} [muted]\n   *        - true to mute\n   *        - false to unmute\n   *\n   * @return {boolean|Player}\n   *         - true if mute is on and getting\n   *         - false if mute is off and getting\n   *         - A reference to the current player when setting\n   */\n\n\n  Player.prototype.muted = function muted(_muted) {\n    if (_muted !== undefined) {\n      this.techCall_('setMuted', _muted);\n      return this;\n    }\n    return this.techGet_('muted') || false;\n  };\n\n  /**\n   * Check if current tech can support native fullscreen\n   * (e.g. with built in controls like iOS, so not our flash swf)\n   *\n   * @return {boolean}\n   *         if native fullscreen is supported\n   */\n\n\n  Player.prototype.supportsFullScreen = function supportsFullScreen() {\n    return this.techGet_('supportsFullScreen') || false;\n  };\n\n  /**\n   * Check if the player is in fullscreen mode or tell the player that it\n   * is or is not in fullscreen mode.\n   *\n   * > NOTE: As of the latest HTML5 spec, isFullscreen is no longer an official\n   * property and instead document.fullscreenElement is used. But isFullscreen is\n   * still a valuable property for internal player workings.\n   *\n   * @param  {boolean} [isFS]\n   *         Set the players current fullscreen state\n   *\n   * @return {boolean|Player}\n   *         - true if fullscreen is on and getting\n   *         - false if fullscreen is off and getting\n   *         - A reference to the current player when setting\n   */\n\n\n  Player.prototype.isFullscreen = function isFullscreen(isFS) {\n    if (isFS !== undefined) {\n      this.isFullscreen_ = !!isFS;\n      return this;\n    }\n    return !!this.isFullscreen_;\n  };\n\n  /**\n   * Increase the size of the video to full screen\n   * In some browsers, full screen is not supported natively, so it enters\n   * \"full window mode\", where the video fills the browser window.\n   * In browsers and devices that support native full screen, sometimes the\n   * browser's default controls will be shown, and not the Video.js custom skin.\n   * This includes most mobile devices (iOS, Android) and older versions of\n   * Safari.\n   *\n   * @fires Player#fullscreenchange\n   * @return {Player}\n   *         A reference to the current player\n   */\n\n\n  Player.prototype.requestFullscreen = function requestFullscreen() {\n    var fsApi = _fullscreenApi2['default'];\n\n    this.isFullscreen(true);\n\n    if (fsApi.requestFullscreen) {\n      // the browser supports going fullscreen at the element level so we can\n      // take the controls fullscreen as well as the video\n\n      // Trigger fullscreenchange event after change\n      // We have to specifically add this each time, and remove\n      // when canceling fullscreen. Otherwise if there's multiple\n      // players on a page, they would all be reacting to the same fullscreen\n      // events\n      Events.on(_document2['default'], fsApi.fullscreenchange, Fn.bind(this, function documentFullscreenChange(e) {\n        this.isFullscreen(_document2['default'][fsApi.fullscreenElement]);\n\n        // If cancelling fullscreen, remove event listener.\n        if (this.isFullscreen() === false) {\n          Events.off(_document2['default'], fsApi.fullscreenchange, documentFullscreenChange);\n        }\n        /**\n         * @event Player#fullscreenchange\n         * @type {EventTarget~Event}\n         */\n        this.trigger('fullscreenchange');\n      }));\n\n      this.el_[fsApi.requestFullscreen]();\n    } else if (this.tech_.supportsFullScreen()) {\n      // we can't take the video.js controls fullscreen but we can go fullscreen\n      // with native controls\n      this.techCall_('enterFullScreen');\n    } else {\n      // fullscreen isn't supported so we'll just stretch the video element to\n      // fill the viewport\n      this.enterFullWindow();\n      /**\n       * @event Player#fullscreenchange\n       * @type {EventTarget~Event}\n       */\n      this.trigger('fullscreenchange');\n    }\n\n    return this;\n  };\n\n  /**\n   * Return the video to its normal size after having been in full screen mode\n   *\n   * @fires Player#fullscreenchange\n   *\n   * @return {Player}\n   *         A reference to the current player\n   */\n\n\n  Player.prototype.exitFullscreen = function exitFullscreen() {\n    var fsApi = _fullscreenApi2['default'];\n\n    this.isFullscreen(false);\n\n    // Check for browser element fullscreen support\n    if (fsApi.requestFullscreen) {\n      _document2['default'][fsApi.exitFullscreen]();\n    } else if (this.tech_.supportsFullScreen()) {\n      this.techCall_('exitFullScreen');\n    } else {\n      this.exitFullWindow();\n      /**\n       * @event Player#fullscreenchange\n       * @type {EventTarget~Event}\n       */\n      this.trigger('fullscreenchange');\n    }\n\n    return this;\n  };\n\n  /**\n   * When fullscreen isn't supported we can stretch the\n   * video container to as wide as the browser will let us.\n   *\n   * @fires Player#enterFullWindow\n   */\n\n\n  Player.prototype.enterFullWindow = function enterFullWindow() {\n    this.isFullWindow = true;\n\n    // Storing original doc overflow value to return to when fullscreen is off\n    this.docOrigOverflow = _document2['default'].documentElement.style.overflow;\n\n    // Add listener for esc key to exit fullscreen\n    Events.on(_document2['default'], 'keydown', Fn.bind(this, this.fullWindowOnEscKey));\n\n    // Hide any scroll bars\n    _document2['default'].documentElement.style.overflow = 'hidden';\n\n    // Apply fullscreen styles\n    Dom.addElClass(_document2['default'].body, 'vjs-full-window');\n\n    /**\n     * @event Player#enterFullWindow\n     * @type {EventTarget~Event}\n     */\n    this.trigger('enterFullWindow');\n  };\n\n  /**\n   * Check for call to either exit full window or\n   * full screen on ESC key\n   *\n   * @param {string} event\n   *        Event to check for key press\n   */\n\n\n  Player.prototype.fullWindowOnEscKey = function fullWindowOnEscKey(event) {\n    if (event.keyCode === 27) {\n      if (this.isFullscreen() === true) {\n        this.exitFullscreen();\n      } else {\n        this.exitFullWindow();\n      }\n    }\n  };\n\n  /**\n   * Exit full window\n   *\n   * @fires Player#exitFullWindow\n   */\n\n\n  Player.prototype.exitFullWindow = function exitFullWindow() {\n    this.isFullWindow = false;\n    Events.off(_document2['default'], 'keydown', this.fullWindowOnEscKey);\n\n    // Unhide scroll bars.\n    _document2['default'].documentElement.style.overflow = this.docOrigOverflow;\n\n    // Remove fullscreen styles\n    Dom.removeElClass(_document2['default'].body, 'vjs-full-window');\n\n    // Resize the box, controller, and poster to original sizes\n    // this.positionAll();\n    /**\n     * @event Player#exitFullWindow\n     * @type {EventTarget~Event}\n     */\n    this.trigger('exitFullWindow');\n  };\n\n  /**\n   * Check whether the player can play a given mimetype\n   *\n   * @see https://www.w3.org/TR/2011/WD-html5-20110113/video.html#dom-navigator-canplaytype\n   *\n   * @param {string} type\n   *        The mimetype to check\n   *\n   * @return {string}\n   *         'probably', 'maybe', or '' (empty string)\n   */\n\n\n  Player.prototype.canPlayType = function canPlayType(type) {\n    var can = void 0;\n\n    // Loop through each playback technology in the options order\n    for (var i = 0, j = this.options_.techOrder; i < j.length; i++) {\n      var techName = (0, _toTitleCase2['default'])(j[i]);\n      var tech = _tech2['default'].getTech(techName);\n\n      // Support old behavior of techs being registered as components.\n      // Remove once that deprecated behavior is removed.\n      if (!tech) {\n        tech = _component2['default'].getComponent(techName);\n      }\n\n      // Check if the current tech is defined before continuing\n      if (!tech) {\n        _log2['default'].error('The \"' + techName + '\" tech is undefined. Skipped browser support check for that tech.');\n        continue;\n      }\n\n      // Check if the browser supports this technology\n      if (tech.isSupported()) {\n        can = tech.canPlayType(type);\n\n        if (can) {\n          return can;\n        }\n      }\n    }\n\n    return '';\n  };\n\n  /**\n   * Select source based on tech-order or source-order\n   * Uses source-order selection if `options.sourceOrder` is truthy. Otherwise,\n   * defaults to tech-order selection\n   *\n   * @param {Array} sources\n   *        The sources for a media asset\n   *\n   * @return {Object|boolean}\n   *         Object of source and tech order or false\n   */\n\n\n  Player.prototype.selectSource = function selectSource(sources) {\n    var _this4 = this;\n\n    // Get only the techs specified in `techOrder` that exist and are supported by the\n    // current platform\n    var techs = this.options_.techOrder.map(_toTitleCase2['default']).map(function (techName) {\n      // `Component.getComponent(...)` is for support of old behavior of techs\n      // being registered as components.\n      // Remove once that deprecated behavior is removed.\n      return [techName, _tech2['default'].getTech(techName) || _component2['default'].getComponent(techName)];\n    }).filter(function (_ref) {\n      var techName = _ref[0],\n          tech = _ref[1];\n\n      // Check if the current tech is defined before continuing\n      if (tech) {\n        // Check if the browser supports this technology\n        return tech.isSupported();\n      }\n\n      _log2['default'].error('The \"' + techName + '\" tech is undefined. Skipped browser support check for that tech.');\n      return false;\n    });\n\n    // Iterate over each `innerArray` element once per `outerArray` element and execute\n    // `tester` with both. If `tester` returns a non-falsy value, exit early and return\n    // that value.\n    var findFirstPassingTechSourcePair = function findFirstPassingTechSourcePair(outerArray, innerArray, tester) {\n      var found = void 0;\n\n      outerArray.some(function (outerChoice) {\n        return innerArray.some(function (innerChoice) {\n          found = tester(outerChoice, innerChoice);\n\n          if (found) {\n            return true;\n          }\n        });\n      });\n\n      return found;\n    };\n\n    var foundSourceAndTech = void 0;\n    var flip = function flip(fn) {\n      return function (a, b) {\n        return fn(b, a);\n      };\n    };\n    var finder = function finder(_ref2, source) {\n      var techName = _ref2[0],\n          tech = _ref2[1];\n\n      if (tech.canPlaySource(source, _this4.options_[techName.toLowerCase()])) {\n        return { source: source, tech: techName };\n      }\n    };\n\n    // Depending on the truthiness of `options.sourceOrder`, we swap the order of techs and sources\n    // to select from them based on their priority.\n    if (this.options_.sourceOrder) {\n      // Source-first ordering\n      foundSourceAndTech = findFirstPassingTechSourcePair(sources, techs, flip(finder));\n    } else {\n      // Tech-first ordering\n      foundSourceAndTech = findFirstPassingTechSourcePair(techs, sources, finder);\n    }\n\n    return foundSourceAndTech || false;\n  };\n\n  /**\n   * The source function updates the video source\n   * There are three types of variables you can pass as the argument.\n   * **URL string**: A URL to the the video file. Use this method if you are sure\n   * the current playback technology (HTML5/Flash) can support the source you\n   * provide. Currently only MP4 files can be used in both HTML5 and Flash.\n   *\n   * @param {Tech~SourceObject|Tech~SourceObject[]} [source]\n   *        One SourceObject or an array of SourceObjects\n   *\n   * @return {string|Player}\n   *         - The current video source when getting\n   *         - The player when setting\n   */\n\n\n  Player.prototype.src = function src(source) {\n    if (source === undefined) {\n      return this.techGet_('src');\n    }\n\n    var currentTech = _tech2['default'].getTech(this.techName_);\n\n    // Support old behavior of techs being registered as components.\n    // Remove once that deprecated behavior is removed.\n    if (!currentTech) {\n      currentTech = _component2['default'].getComponent(this.techName_);\n    }\n\n    // case: Array of source objects to choose from and pick the best to play\n    if (Array.isArray(source)) {\n      this.sourceList_(source);\n\n      // case: URL String (http://myvideo...)\n    } else if (typeof source === 'string') {\n      // create a source object from the string\n      this.src({ src: source });\n\n      // case: Source object { src: '', type: '' ... }\n    } else if (source instanceof Object) {\n      // check if the source has a type and the loaded tech cannot play the source\n      // if there's no type we'll just try the current tech\n      if (source.type && !currentTech.canPlaySource(source, this.options_[this.techName_.toLowerCase()])) {\n        // create a source list with the current source and send through\n        // the tech loop to check for a compatible technology\n        this.sourceList_([source]);\n      } else {\n        this.cache_.sources = null;\n        this.cache_.source = source;\n        this.cache_.src = source.src;\n\n        this.currentType_ = source.type || '';\n\n        // wait until the tech is ready to set the source\n        this.ready(function () {\n\n          // The setSource tech method was added with source handlers\n          // so older techs won't support it\n          // We need to check the direct prototype for the case where subclasses\n          // of the tech do not support source handlers\n          if (currentTech.prototype.hasOwnProperty('setSource')) {\n            this.techCall_('setSource', source);\n          } else {\n            this.techCall_('src', source.src);\n          }\n\n          if (this.options_.preload === 'auto') {\n            this.load();\n          }\n\n          if (this.options_.autoplay) {\n            this.play();\n          }\n\n          // Set the source synchronously if possible (#2326)\n        }, true);\n      }\n    }\n\n    return this;\n  };\n\n  /**\n   * Handle an array of source objects\n   *\n   * @param  {Tech~SourceObject[]} sources\n   *         Array of source objects\n   *\n   * @private\n   */\n\n\n  Player.prototype.sourceList_ = function sourceList_(sources) {\n    var sourceTech = this.selectSource(sources);\n\n    if (sourceTech) {\n      if (sourceTech.tech === this.techName_) {\n        // if this technology is already loaded, set the source\n        this.src(sourceTech.source);\n      } else {\n        // load this technology with the chosen source\n        this.loadTech_(sourceTech.tech, sourceTech.source);\n      }\n\n      this.cache_.sources = sources;\n    } else {\n      // We need to wrap this in a timeout to give folks a chance to add error event handlers\n      this.setTimeout(function () {\n        this.error({ code: 4, message: this.localize(this.options_.notSupportedMessage) });\n      }, 0);\n\n      // we could not find an appropriate tech, but let's still notify the delegate that this is it\n      // this needs a better comment about why this is needed\n      this.triggerReady();\n    }\n  };\n\n  /**\n   * Begin loading the src data.\n   *\n   * @return {Player}\n   *         A reference to the player\n   */\n\n\n  Player.prototype.load = function load() {\n    this.techCall_('load');\n    return this;\n  };\n\n  /**\n   * Reset the player. Loads the first tech in the techOrder,\n   * and calls `reset` on the tech`.\n   *\n   * @return {Player}\n   *         A reference to the player\n   */\n\n\n  Player.prototype.reset = function reset() {\n    this.loadTech_((0, _toTitleCase2['default'])(this.options_.techOrder[0]), null);\n    this.techCall_('reset');\n    return this;\n  };\n\n  /**\n   * Returns all of the current source objects.\n   *\n   * @return {Tech~SourceObject[]}\n   *         The current source objects\n   */\n\n\n  Player.prototype.currentSources = function currentSources() {\n    var source = this.currentSource();\n    var sources = [];\n\n    // assume `{}` or `{ src }`\n    if (Object.keys(source).length !== 0) {\n      sources.push(source);\n    }\n\n    return this.cache_.sources || sources;\n  };\n\n  /**\n   * Returns the current source object.\n   *\n   * @return {Tech~SourceObject}\n   *         The current source object\n   */\n\n\n  Player.prototype.currentSource = function currentSource() {\n    var source = {};\n    var src = this.currentSrc();\n\n    if (src) {\n      source.src = src;\n    }\n\n    return this.cache_.source || source;\n  };\n\n  /**\n   * Returns the fully qualified URL of the current source value e.g. http://mysite.com/video.mp4\n   * Can be used in conjuction with `currentType` to assist in rebuilding the current source object.\n   *\n   * @return {string}\n   *         The current source\n   */\n\n\n  Player.prototype.currentSrc = function currentSrc() {\n    return this.techGet_('currentSrc') || this.cache_.src || '';\n  };\n\n  /**\n   * Get the current source type e.g. video/mp4\n   * This can allow you rebuild the current source object so that you could load the same\n   * source and tech later\n   *\n   * @return {string}\n   *         The source MIME type\n   */\n\n\n  Player.prototype.currentType = function currentType() {\n    return this.currentType_ || '';\n  };\n\n  /**\n   * Get or set the preload attribute\n   *\n   * @param {boolean} [value]\n   *        - true means that we should preload\n   *        - false maens that we should not preload\n   *\n   * @return {string|Player}\n   *         - the preload attribute value when getting\n   *         - the player when setting\n   */\n\n\n  Player.prototype.preload = function preload(value) {\n    if (value !== undefined) {\n      this.techCall_('setPreload', value);\n      this.options_.preload = value;\n      return this;\n    }\n    return this.techGet_('preload');\n  };\n\n  /**\n   * Get or set the autoplay attribute.\n   *\n   * @param {boolean} [value]\n   *        - true means that we should autoplay\n   *        - false maens that we should not autoplay\n   *\n   * @return {string|Player}\n   *         - the current value of autoplay\n   *         - the player when setting\n   */\n\n\n  Player.prototype.autoplay = function autoplay(value) {\n    if (value !== undefined) {\n      this.techCall_('setAutoplay', value);\n      this.options_.autoplay = value;\n      return this;\n    }\n    return this.techGet_('autoplay', value);\n  };\n\n  /**\n   * Set or unset the playsinline attribute.\n   * Playsinline tells the browser that non-fullscreen playback is preferred.\n   *\n   * @param {boolean} [value]\n   *        - true means that we should try to play inline by default\n   *        - false means that we should use the browser's default playback mode,\n   *          which in most cases is inline. iOS Safari is a notable exception\n   *          and plays fullscreen by default.\n   *\n   * @return {string|Player}\n   *         - the current value of playsinline\n   *         - the player when setting\n   *\n   * @see [Spec]{@link https://html.spec.whatwg.org/#attr-video-playsinline}\n   */\n\n\n  Player.prototype.playsinline = function playsinline(value) {\n    if (value !== undefined) {\n      this.techCall_('setPlaysinline', value);\n      this.options_.playsinline = value;\n      return this;\n    }\n    return this.techGet_('playsinline');\n  };\n\n  /**\n   * Get or set the loop attribute on the video element.\n   *\n   * @param {boolean} [value]\n   *        - true means that we should loop the video\n   *        - false means that we should not loop the video\n   *\n   * @return {string|Player}\n   *         - the current value of loop when getting\n   *         - the player when setting\n   */\n\n\n  Player.prototype.loop = function loop(value) {\n    if (value !== undefined) {\n      this.techCall_('setLoop', value);\n      this.options_.loop = value;\n      return this;\n    }\n    return this.techGet_('loop');\n  };\n\n  /**\n   * Get or set the poster image source url\n   *\n   * @fires Player#posterchange\n   *\n   * @param {string} [src]\n   *        Poster image source URL\n   *\n   * @return {string|Player}\n   *         - the current value of poster when getting\n   *         - the player when setting\n   */\n\n\n  Player.prototype.poster = function poster(src) {\n    if (src === undefined) {\n      return this.poster_;\n    }\n\n    // The correct way to remove a poster is to set as an empty string\n    // other falsey values will throw errors\n    if (!src) {\n      src = '';\n    }\n\n    // update the internal poster variable\n    this.poster_ = src;\n\n    // update the tech's poster\n    this.techCall_('setPoster', src);\n\n    // alert components that the poster has been set\n    /**\n     * This event fires when the poster image is changed on the player.\n     *\n     * @event Player#posterchange\n     * @type {EventTarget~Event}\n     */\n    this.trigger('posterchange');\n\n    return this;\n  };\n\n  /**\n   * Some techs (e.g. YouTube) can provide a poster source in an\n   * asynchronous way. We want the poster component to use this\n   * poster source so that it covers up the tech's controls.\n   * (YouTube's play button). However we only want to use this\n   * soruce if the player user hasn't set a poster through\n   * the normal APIs.\n   *\n   * @fires Player#posterchange\n   * @listens Tech#posterchange\n   * @private\n   */\n\n\n  Player.prototype.handleTechPosterChange_ = function handleTechPosterChange_() {\n    if (!this.poster_ && this.tech_ && this.tech_.poster) {\n      this.poster_ = this.tech_.poster() || '';\n\n      // Let components know the poster has changed\n      this.trigger('posterchange');\n    }\n  };\n\n  /**\n   * Get or set whether or not the controls are showing.\n   *\n   * @fires Player#controlsenabled\n   *\n   * @param {boolean} [bool]\n   *        - true to turn controls on\n   *        - false to turn controls off\n   *\n   * @return {boolean|Player}\n   *         - the current value of controls when getting\n   *         - the player when setting\n   */\n\n\n  Player.prototype.controls = function controls(bool) {\n    if (bool !== undefined) {\n      bool = !!bool;\n\n      // Don't trigger a change event unless it actually changed\n      if (this.controls_ !== bool) {\n        this.controls_ = bool;\n\n        if (this.usingNativeControls()) {\n          this.techCall_('setControls', bool);\n        }\n\n        if (bool) {\n          this.removeClass('vjs-controls-disabled');\n          this.addClass('vjs-controls-enabled');\n          /**\n           * @event Player#controlsenabled\n           * @type {EventTarget~Event}\n           */\n          this.trigger('controlsenabled');\n\n          if (!this.usingNativeControls()) {\n            this.addTechControlsListeners_();\n          }\n        } else {\n          this.removeClass('vjs-controls-enabled');\n          this.addClass('vjs-controls-disabled');\n          /**\n           * @event Player#controlsdisabled\n           * @type {EventTarget~Event}\n           */\n          this.trigger('controlsdisabled');\n\n          if (!this.usingNativeControls()) {\n            this.removeTechControlsListeners_();\n          }\n        }\n      }\n      return this;\n    }\n    return !!this.controls_;\n  };\n\n  /**\n   * Toggle native controls on/off. Native controls are the controls built into\n   * devices (e.g. default iPhone controls), Flash, or other techs\n   * (e.g. Vimeo Controls)\n   * **This should only be set by the current tech, because only the tech knows\n   * if it can support native controls**\n   *\n   * @fires Player#usingnativecontrols\n   * @fires Player#usingcustomcontrols\n   *\n   * @param {boolean} [bool]\n   *        - true to turn native controls on\n   *        - false to turn native controls off\n   *\n   * @return {boolean|Player}\n   *         - the current value of native controls when getting\n   *         - the player when setting\n   */\n\n\n  Player.prototype.usingNativeControls = function usingNativeControls(bool) {\n    if (bool !== undefined) {\n      bool = !!bool;\n\n      // Don't trigger a change event unless it actually changed\n      if (this.usingNativeControls_ !== bool) {\n        this.usingNativeControls_ = bool;\n        if (bool) {\n          this.addClass('vjs-using-native-controls');\n\n          /**\n           * player is using the native device controls\n           *\n           * @event Player#usingnativecontrols\n           * @type {EventTarget~Event}\n           */\n          this.trigger('usingnativecontrols');\n        } else {\n          this.removeClass('vjs-using-native-controls');\n\n          /**\n           * player is using the custom HTML controls\n           *\n           * @event Player#usingcustomcontrols\n           * @type {EventTarget~Event}\n           */\n          this.trigger('usingcustomcontrols');\n        }\n      }\n      return this;\n    }\n    return !!this.usingNativeControls_;\n  };\n\n  /**\n   * Set or get the current MediaError\n   *\n   * @fires Player#error\n   *\n   * @param  {MediaError|string|number} [err]\n   *         A MediaError or a string/number to be turned\n   *         into a MediaError\n   *\n   * @return {MediaError|null|Player}\n   *         - The current MediaError when getting (or null)\n   *         - The player when setting\n   */\n\n\n  Player.prototype.error = function error(err) {\n    if (err === undefined) {\n      return this.error_ || null;\n    }\n\n    // restoring to default\n    if (err === null) {\n      this.error_ = err;\n      this.removeClass('vjs-error');\n      if (this.errorDisplay) {\n        this.errorDisplay.close();\n      }\n      return this;\n    }\n\n    this.error_ = new _mediaError2['default'](err);\n\n    // add the vjs-error classname to the player\n    this.addClass('vjs-error');\n\n    // log the name of the error type and any message\n    // ie8 just logs \"[object object]\" if you just log the error object\n    _log2['default'].error('(CODE:' + this.error_.code + ' ' + _mediaError2['default'].errorTypes[this.error_.code] + ')', this.error_.message, this.error_);\n\n    /**\n     * @event Player#error\n     * @type {EventTarget~Event}\n     */\n    this.trigger('error');\n\n    return this;\n  };\n\n  /**\n   * Report user activity\n   *\n   * @param {Object} event\n   *        Event object\n   */\n\n\n  Player.prototype.reportUserActivity = function reportUserActivity(event) {\n    this.userActivity_ = true;\n  };\n\n  /**\n   * Get/set if user is active\n   *\n   * @fires Player#useractive\n   * @fires Player#userinactive\n   *\n   * @param {boolean} [bool]\n   *        - true if the user is active\n   *        - false if the user is inactive\n   * @return {boolean|Player}\n   *         - the current value of userActive when getting\n   *         - the player when setting\n   */\n\n\n  Player.prototype.userActive = function userActive(bool) {\n    if (bool !== undefined) {\n      bool = !!bool;\n      if (bool !== this.userActive_) {\n        this.userActive_ = bool;\n        if (bool) {\n          // If the user was inactive and is now active we want to reset the\n          // inactivity timer\n          this.userActivity_ = true;\n          this.removeClass('vjs-user-inactive');\n          this.addClass('vjs-user-active');\n          /**\n           * @event Player#useractive\n           * @type {EventTarget~Event}\n           */\n          this.trigger('useractive');\n        } else {\n          // We're switching the state to inactive manually, so erase any other\n          // activity\n          this.userActivity_ = false;\n\n          // Chrome/Safari/IE have bugs where when you change the cursor it can\n          // trigger a mousemove event. This causes an issue when you're hiding\n          // the cursor when the user is inactive, and a mousemove signals user\n          // activity. Making it impossible to go into inactive mode. Specifically\n          // this happens in fullscreen when we really need to hide the cursor.\n          //\n          // When this gets resolved in ALL browsers it can be removed\n          // https://code.google.com/p/chromium/issues/detail?id=103041\n          if (this.tech_) {\n            this.tech_.one('mousemove', function (e) {\n              e.stopPropagation();\n              e.preventDefault();\n            });\n          }\n\n          this.removeClass('vjs-user-active');\n          this.addClass('vjs-user-inactive');\n          /**\n           * @event Player#userinactive\n           * @type {EventTarget~Event}\n           */\n          this.trigger('userinactive');\n        }\n      }\n      return this;\n    }\n    return this.userActive_;\n  };\n\n  /**\n   * Listen for user activity based on timeout value\n   *\n   * @private\n   */\n\n\n  Player.prototype.listenForUserActivity_ = function listenForUserActivity_() {\n    var mouseInProgress = void 0;\n    var lastMoveX = void 0;\n    var lastMoveY = void 0;\n    var handleActivity = Fn.bind(this, this.reportUserActivity);\n\n    var handleMouseMove = function handleMouseMove(e) {\n      // #1068 - Prevent mousemove spamming\n      // Chrome Bug: https://code.google.com/p/chromium/issues/detail?id=366970\n      if (e.screenX !== lastMoveX || e.screenY !== lastMoveY) {\n        lastMoveX = e.screenX;\n        lastMoveY = e.screenY;\n        handleActivity();\n      }\n    };\n\n    var handleMouseDown = function handleMouseDown() {\n      handleActivity();\n      // For as long as the they are touching the device or have their mouse down,\n      // we consider them active even if they're not moving their finger or mouse.\n      // So we want to continue to update that they are active\n      this.clearInterval(mouseInProgress);\n      // Setting userActivity=true now and setting the interval to the same time\n      // as the activityCheck interval (250) should ensure we never miss the\n      // next activityCheck\n      mouseInProgress = this.setInterval(handleActivity, 250);\n    };\n\n    var handleMouseUp = function handleMouseUp(event) {\n      handleActivity();\n      // Stop the interval that maintains activity if the mouse/touch is down\n      this.clearInterval(mouseInProgress);\n    };\n\n    // Any mouse movement will be considered user activity\n    this.on('mousedown', handleMouseDown);\n    this.on('mousemove', handleMouseMove);\n    this.on('mouseup', handleMouseUp);\n\n    // Listen for keyboard navigation\n    // Shouldn't need to use inProgress interval because of key repeat\n    this.on('keydown', handleActivity);\n    this.on('keyup', handleActivity);\n\n    // Run an interval every 250 milliseconds instead of stuffing everything into\n    // the mousemove/touchmove function itself, to prevent performance degradation.\n    // `this.reportUserActivity` simply sets this.userActivity_ to true, which\n    // then gets picked up by this loop\n    // http://ejohn.org/blog/learning-from-twitter/\n    var inactivityTimeout = void 0;\n\n    this.setInterval(function () {\n      // Check to see if mouse/touch activity has happened\n      if (this.userActivity_) {\n        // Reset the activity tracker\n        this.userActivity_ = false;\n\n        // If the user state was inactive, set the state to active\n        this.userActive(true);\n\n        // Clear any existing inactivity timeout to start the timer over\n        this.clearTimeout(inactivityTimeout);\n\n        var timeout = this.options_.inactivityTimeout;\n\n        if (timeout > 0) {\n          // In <timeout> milliseconds, if no more activity has occurred the\n          // user will be considered inactive\n          inactivityTimeout = this.setTimeout(function () {\n            // Protect against the case where the inactivityTimeout can trigger just\n            // before the next user activity is picked up by the activity check loop\n            // causing a flicker\n            if (!this.userActivity_) {\n              this.userActive(false);\n            }\n          }, timeout);\n        }\n      }\n    }, 250);\n  };\n\n  /**\n   * Gets or sets the current playback rate. A playback rate of\n   * 1.0 represents normal speed and 0.5 would indicate half-speed\n   * playback, for instance.\n   *\n   * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-playbackrate\n   *\n   * @param {number} [rate]\n   *       New playback rate to set.\n   *\n   * @return {number|Player}\n   *         - The current playback rate when getting or 1.0\n   *         - the player when setting\n   */\n\n\n  Player.prototype.playbackRate = function playbackRate(rate) {\n    if (rate !== undefined) {\n      this.techCall_('setPlaybackRate', rate);\n      return this;\n    }\n\n    if (this.tech_ && this.tech_.featuresPlaybackRate) {\n      return this.techGet_('playbackRate');\n    }\n    return 1.0;\n  };\n\n  /**\n   * Gets or sets the audio flag\n   *\n   * @param {boolean} bool\n   *        - true signals that this is an audio player\n   *        - false signals that this is not an audio player\n   *\n   * @return {Player|boolean}\n   *         - the current value of isAudio when getting\n   *         - the player if setting\n   */\n\n\n  Player.prototype.isAudio = function isAudio(bool) {\n    if (bool !== undefined) {\n      this.isAudio_ = !!bool;\n      return this;\n    }\n\n    return !!this.isAudio_;\n  };\n\n  /**\n   * Get the {@link VideoTrackList}\n   *\n   * @see https://html.spec.whatwg.org/multipage/embedded-content.html#videotracklist\n   *\n   * @return {VideoTrackList}\n   *         the current video track list\n   */\n\n\n  Player.prototype.videoTracks = function videoTracks() {\n    // if we have not yet loadTech_, we create videoTracks_\n    // these will be passed to the tech during loading\n    if (!this.tech_) {\n      this.videoTracks_ = this.videoTracks_ || new _videoTrackList2['default']();\n      return this.videoTracks_;\n    }\n\n    return this.tech_.videoTracks();\n  };\n\n  /**\n   * Get the {@link AudioTrackList}\n   *\n   * @see https://html.spec.whatwg.org/multipage/embedded-content.html#audiotracklist\n   *\n   * @return {AudioTrackList}\n   *         the current audio track list\n   */\n\n\n  Player.prototype.audioTracks = function audioTracks() {\n    // if we have not yet loadTech_, we create videoTracks_\n    // these will be passed to the tech during loading\n    if (!this.tech_) {\n      this.audioTracks_ = this.audioTracks_ || new _audioTrackList2['default']();\n      return this.audioTracks_;\n    }\n\n    return this.tech_.audioTracks();\n  };\n\n  /**\n   * Get the {@link TextTrackList}\n   *\n   * Text tracks are tracks of timed text events.\n   * - Captions: text displayed over the video\n   *             for the hearing impaired\n   * - Subtitles: text displayed over the video for\n   *              those who don't understand language in the video\n   * - Chapters: text displayed in a menu allowing the user to jump\n   *             to particular points (chapters) in the video\n   * - Descriptions: (not yet implemented) audio descriptions that are read back to\n   *                 the user by a screen reading device\n   *\n   * @see http://www.w3.org/html/wg/drafts/html/master/embedded-content-0.html#dom-media-texttracks\n   *\n   * @return {TextTrackList|undefined}\n   *         The current TextTrackList or undefined if\n   *         or undefined if we don't have a tech\n   */\n\n\n  Player.prototype.textTracks = function textTracks() {\n    // cannot use techGet_ directly because it checks to see whether the tech is ready.\n    // Flash is unlikely to be ready in time but textTracks should still work.\n    if (this.tech_) {\n      return this.tech_.textTracks();\n    }\n  };\n\n  /**\n   * Get the \"remote\" {@link TextTrackList}. Remote Text Tracks\n   * are tracks that were added to the HTML video element and can\n   * be removed, whereas normal texttracks cannot be removed.\n   *\n   *\n   * @return {TextTrackList|undefined}\n   *         The current remote text track list or undefined\n   *         if we don't have a tech\n   */\n\n\n  Player.prototype.remoteTextTracks = function remoteTextTracks() {\n    if (this.tech_) {\n      return this.tech_.remoteTextTracks();\n    }\n  };\n\n  /**\n   * Get the \"remote\" {@link HTMLTrackElementList}.\n   * This gives the user all of the DOM elements that match up\n   * with the remote {@link TextTrackList}.\n   *\n   * @return {HTMLTrackElementList}\n   *         The current remote text track list elements\n   *         or undefined if we don't have a tech\n   */\n\n\n  Player.prototype.remoteTextTrackEls = function remoteTextTrackEls() {\n    if (this.tech_) {\n      return this.tech_.remoteTextTrackEls();\n    }\n  };\n\n  /**\n   * A helper method for adding a {@link TextTrack} to our\n   * {@link TextTrackList}.\n   *\n   * In addition to the W3C settings we allow adding additional info through options.\n   *\n   * @see http://www.w3.org/html/wg/drafts/html/master/embedded-content-0.html#dom-media-addtexttrack\n   *\n   * @param {string} [kind]\n   *        the kind of TextTrack you are adding\n   *\n   * @param {string} [label]\n   *        the label to give the TextTrack label\n   *\n   * @param {string} [language]\n   *        the language to set on the TextTrack\n   *\n   * @return {TextTrack|undefined}\n   *         the TextTrack that was added or undefined\n   *         if there is no tech\n   */\n\n\n  Player.prototype.addTextTrack = function addTextTrack(kind, label, language) {\n    if (this.tech_) {\n      return this.tech_.addTextTrack(kind, label, language);\n    }\n  };\n\n  /**\n   * Create a remote {@link TextTrack} and an {@link HTMLTrackElement}. It will\n   * automatically removed from the video element whenever the source changes, unless\n   * manualCleanup is set to false.\n   *\n   * @param {Object} options\n   *        Options to pass to {@link HTMLTrackElement} during creation. See\n   *        {@link HTMLTrackElement} for object properties that you should use.\n   *\n   * @param {boolean} [manualCleanup=true] if set to false, the TextTrack will be\n   *\n   * @return {HTMLTrackElement}\n   *         the HTMLTrackElement that was created and added\n   *         to the HTMLTrackElementList and the remote\n   *         TextTrackList\n   *\n   * @deprecated The default value of the \"manualCleanup\" parameter will default\n   *             to \"false\" in upcoming versions of Video.js\n   */\n\n\n  Player.prototype.addRemoteTextTrack = function addRemoteTextTrack(options, manualCleanup) {\n    if (this.tech_) {\n      return this.tech_.addRemoteTextTrack(options, manualCleanup);\n    }\n  };\n\n  /**\n   * Remove a remote {@link TextTrack} from the respective\n   * {@link TextTrackList} and {@link HTMLTrackElementList}.\n   *\n   * @param {Object} track\n   *        Remote {@link TextTrack} to remove\n   *\n   * @return {undefined}\n   *         does not return anything\n   */\n\n\n  Player.prototype.removeRemoteTextTrack = function removeRemoteTextTrack() {\n    var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref3$track = _ref3.track,\n        track = _ref3$track === undefined ? arguments[0] : _ref3$track;\n\n    // destructure the input into an object with a track argument, defaulting to arguments[0]\n    // default the whole argument to an empty object if nothing was passed in\n\n    if (this.tech_) {\n      return this.tech_.removeRemoteTextTrack(track);\n    }\n  };\n\n  /**\n   * Gets available media playback quality metrics as specified by the W3C's Media\n   * Playback Quality API.\n   *\n   * @see [Spec]{@link https://wicg.github.io/media-playback-quality}\n   *\n   * @return {Object|undefined}\n   *         An object with supported media playback quality metrics or undefined if there\n   *         is no tech or the tech does not support it.\n   */\n\n\n  Player.prototype.getVideoPlaybackQuality = function getVideoPlaybackQuality() {\n    return this.techGet_('getVideoPlaybackQuality');\n  };\n\n  /**\n   * Get video width\n   *\n   * @return {number}\n   *         current video width\n   */\n\n\n  Player.prototype.videoWidth = function videoWidth() {\n    return this.tech_ && this.tech_.videoWidth && this.tech_.videoWidth() || 0;\n  };\n\n  /**\n   * Get video height\n   *\n   * @return {number}\n   *         current video height\n   */\n\n\n  Player.prototype.videoHeight = function videoHeight() {\n    return this.tech_ && this.tech_.videoHeight && this.tech_.videoHeight() || 0;\n  };\n\n  // Methods to add support for\n  // initialTime: function() { return this.techCall_('initialTime'); },\n  // startOffsetTime: function() { return this.techCall_('startOffsetTime'); },\n  // played: function() { return this.techCall_('played'); },\n  // defaultPlaybackRate: function() { return this.techCall_('defaultPlaybackRate'); },\n  // defaultMuted: function() { return this.techCall_('defaultMuted'); }\n\n  /**\n   * The player's language code\n   * NOTE: The language should be set in the player options if you want the\n   * the controls to be built with a specific language. Changing the lanugage\n   * later will not update controls text.\n   *\n   * @param {string} [code]\n   *        the language code to set the player to\n   *\n   * @return {string|Player}\n   *         - The current language code when getting\n   *         - A reference to the player when setting\n   */\n\n\n  Player.prototype.language = function language(code) {\n    if (code === undefined) {\n      return this.language_;\n    }\n\n    this.language_ = String(code).toLowerCase();\n    return this;\n  };\n\n  /**\n   * Get the player's language dictionary\n   * Merge every time, because a newly added plugin might call videojs.addLanguage() at any time\n   * Languages specified directly in the player options have precedence\n   *\n   * @return {Array}\n   *         An array of of supported languages\n   */\n\n\n  Player.prototype.languages = function languages() {\n    return (0, _mergeOptions2['default'])(Player.prototype.options_.languages, this.languages_);\n  };\n\n  /**\n   * returns a JavaScript object reperesenting the current track\n   * information. **DOES not return it as JSON**\n   *\n   * @return {Object}\n   *         Object representing the current of track info\n   */\n\n\n  Player.prototype.toJSON = function toJSON() {\n    var options = (0, _mergeOptions2['default'])(this.options_);\n    var tracks = options.tracks;\n\n    options.tracks = [];\n\n    for (var i = 0; i < tracks.length; i++) {\n      var track = tracks[i];\n\n      // deep merge tracks and null out player so no circular references\n      track = (0, _mergeOptions2['default'])(track);\n      track.player = undefined;\n      options.tracks[i] = track;\n    }\n\n    return options;\n  };\n\n  /**\n   * Creates a simple modal dialog (an instance of the {@link ModalDialog}\n   * component) that immediately overlays the player with arbitrary\n   * content and removes itself when closed.\n   *\n   * @param {string|Function|Element|Array|null} content\n   *        Same as {@link ModalDialog#content}'s param of the same name.\n   *        The most straight-forward usage is to provide a string or DOM\n   *        element.\n   *\n   * @param {Object} [options]\n   *        Extra options which will be passed on to the {@link ModalDialog}.\n   *\n   * @return {ModalDialog}\n   *         the {@link ModalDialog} that was created\n   */\n\n\n  Player.prototype.createModal = function createModal(content, options) {\n    var _this5 = this;\n\n    options = options || {};\n    options.content = content || '';\n\n    var modal = new _modalDialog2['default'](this, options);\n\n    this.addChild(modal);\n    modal.on('dispose', function () {\n      _this5.removeChild(modal);\n    });\n\n    return modal.open();\n  };\n\n  /**\n   * Gets tag settings\n   *\n   * @param {Element} tag\n   *        The player tag\n   *\n   * @return {Object}\n   *         An object containing all of the settings\n   *         for a player tag\n   */\n\n\n  Player.getTagSettings = function getTagSettings(tag) {\n    var baseOptions = {\n      sources: [],\n      tracks: []\n    };\n\n    var tagOptions = Dom.getElAttributes(tag);\n    var dataSetup = tagOptions['data-setup'];\n\n    if (Dom.hasElClass(tag, 'vjs-fluid')) {\n      tagOptions.fluid = true;\n    }\n\n    // Check if data-setup attr exists.\n    if (dataSetup !== null) {\n      // Parse options JSON\n      // If empty string, make it a parsable json object.\n      var _safeParseTuple = (0, _tuple2['default'])(dataSetup || '{}'),\n          err = _safeParseTuple[0],\n          data = _safeParseTuple[1];\n\n      if (err) {\n        _log2['default'].error(err);\n      }\n      (0, _obj.assign)(tagOptions, data);\n    }\n\n    (0, _obj.assign)(baseOptions, tagOptions);\n\n    // Get tag children settings\n    if (tag.hasChildNodes()) {\n      var children = tag.childNodes;\n\n      for (var i = 0, j = children.length; i < j; i++) {\n        var child = children[i];\n        // Change case needed: http://ejohn.org/blog/nodename-case-sensitivity/\n        var childName = child.nodeName.toLowerCase();\n\n        if (childName === 'source') {\n          baseOptions.sources.push(Dom.getElAttributes(child));\n        } else if (childName === 'track') {\n          baseOptions.tracks.push(Dom.getElAttributes(child));\n        }\n      }\n    }\n\n    return baseOptions;\n  };\n\n  /**\n   * Determine wether or not flexbox is supported\n   *\n   * @return {boolean}\n   *         - true if flexbox is supported\n   *         - false if flexbox is not supported\n   */\n\n\n  Player.prototype.flexNotSupported_ = function flexNotSupported_() {\n    var elem = _document2['default'].createElement('i');\n\n    // Note: We don't actually use flexBasis (or flexOrder), but it's one of the more\n    // common flex features that we can rely on when checking for flex support.\n    return !('flexBasis' in elem.style || 'webkitFlexBasis' in elem.style || 'mozFlexBasis' in elem.style || 'msFlexBasis' in elem.style ||\n    // IE10-specific (2012 flex spec)\n    'msFlexOrder' in elem.style);\n  };\n\n  return Player;\n}(_component2['default']);\n\n/**\n * Global player list\n *\n * @type {Object}\n */\n\n\nPlayer.players = {};\n\nvar navigator = _window2['default'].navigator;\n\n/*\n * Player instance options, surfaced using options\n * options = Player.prototype.options_\n * Make changes in options, not here.\n *\n * @type {Object}\n * @private\n */\nPlayer.prototype.options_ = {\n  // Default order of fallback technology\n  techOrder: ['html5', 'flash'],\n  // techOrder: ['flash','html5'],\n\n  html5: {},\n  flash: {},\n\n  // defaultVolume: 0.85,\n  defaultVolume: 0.00,\n\n  // default inactivity timeout\n  inactivityTimeout: 2000,\n\n  // default playback rates\n  playbackRates: [],\n  // Add playback rate selection by adding rates\n  // 'playbackRates': [0.5, 1, 1.5, 2],\n\n  // Included control sets\n  children: ['mediaLoader', 'posterImage', 'textTrackDisplay', 'loadingSpinner', 'bigPlayButton', 'controlBar', 'errorDisplay', 'textTrackSettings'],\n\n  language: navigator && (navigator.languages && navigator.languages[0] || navigator.userLanguage || navigator.language) || 'en',\n\n  // locales and their language translations\n  languages: {},\n\n  // Default message to show when a video cannot be played.\n  notSupportedMessage: 'No compatible source was found for this media.'\n};\n\n[\n/**\n * Returns whether or not the player is in the \"ended\" state.\n *\n * @return {Boolean} True if the player is in the ended state, false if not.\n * @method Player#ended\n */\n'ended',\n/**\n * Returns whether or not the player is in the \"seeking\" state.\n *\n * @return {Boolean} True if the player is in the seeking state, false if not.\n * @method Player#seeking\n */\n'seeking',\n/**\n * Returns the TimeRanges of the media that are currently available\n * for seeking to.\n *\n * @return {TimeRanges} the seekable intervals of the media timeline\n * @method Player#seekable\n */\n'seekable',\n/**\n * Returns the current state of network activity for the element, from\n * the codes in the list below.\n * - NETWORK_EMPTY (numeric value 0)\n *   The element has not yet been initialised. All attributes are in\n *   their initial states.\n * - NETWORK_IDLE (numeric value 1)\n *   The element's resource selection algorithm is active and has\n *   selected a resource, but it is not actually using the network at\n *   this time.\n * - NETWORK_LOADING (numeric value 2)\n *   The user agent is actively trying to download data.\n * - NETWORK_NO_SOURCE (numeric value 3)\n *   The element's resource selection algorithm is active, but it has\n *   not yet found a resource to use.\n *\n * @see https://html.spec.whatwg.org/multipage/embedded-content.html#network-states\n * @return {number} the current network activity state\n * @method Player#networkState\n */\n'networkState',\n/**\n * Returns a value that expresses the current state of the element\n * with respect to rendering the current playback position, from the\n * codes in the list below.\n * - HAVE_NOTHING (numeric value 0)\n *   No information regarding the media resource is available.\n * - HAVE_METADATA (numeric value 1)\n *   Enough of the resource has been obtained that the duration of the\n *   resource is available.\n * - HAVE_CURRENT_DATA (numeric value 2)\n *   Data for the immediate current playback position is available.\n * - HAVE_FUTURE_DATA (numeric value 3)\n *   Data for the immediate current playback position is available, as\n *   well as enough data for the user agent to advance the current\n *   playback position in the direction of playback.\n * - HAVE_ENOUGH_DATA (numeric value 4)\n *   The user agent estimates that enough data is available for\n *   playback to proceed uninterrupted.\n *\n * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-readystate\n * @return {number} the current playback rendering state\n * @method Player#readyState\n */\n'readyState'].forEach(function (fn) {\n  Player.prototype[fn] = function () {\n    return this.techGet_(fn);\n  };\n});\n\nTECH_EVENTS_RETRIGGER.forEach(function (event) {\n  Player.prototype['handleTech' + (0, _toTitleCase2['default'])(event) + '_'] = function () {\n    return this.trigger(event);\n  };\n});\n\n/**\n * Fired when the player has initial duration and dimension information\n *\n * @event Player#loadedmetadata\n * @type {EventTarget~Event}\n */\n\n/**\n * Fired when the player has downloaded data at the current playback position\n *\n * @event Player#loadeddata\n * @type {EventTarget~Event}\n */\n\n/**\n * Fired when the current playback position has changed *\n * During playback this is fired every 15-250 milliseconds, depending on the\n * playback technology in use.\n *\n * @event Player#timeupdate\n * @type {EventTarget~Event}\n */\n\n/**\n * Fired when the volume changes\n *\n * @event Player#volumechange\n * @type {EventTarget~Event}\n */\n\n_component2['default'].registerComponent('Player', Player);\nexports['default'] = Player;\n"],"mappings":"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Y,EAAE;IAAK;EAAE,CAAC,CAAC;EAAE,IAAIN,UAAU,EAAEb,MAAM,CAACoB,cAAc,GAAGpB,MAAM,CAACoB,cAAc,CAACR,QAAQ,EAAEC,UAAU,CAAC,GAAGD,QAAQ,CAACS,SAAS,GAAGR,UAAU;AAAE,CAAC,CAAC;AAC/e;AACA;AACA;;AAGA;AACA;AACA;;AAGA;;AAGA;AACA;AACA,IAAIS,qBAAqB,GAAG;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAEhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AAEZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AAEZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AAEZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AAEd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,CAAC;;AAElB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,MAAM,GAA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"},"metadata":{},"sourceType":"script","externalDependencies":[]}