{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nvar _tech = require('./tech');\nvar _tech2 = _interopRequireDefault(_tech);\nvar _dom = require('../utils/dom.js');\nvar Dom = _interopRequireWildcard(_dom);\nvar _url = require('../utils/url.js');\nvar Url = _interopRequireWildcard(_url);\nvar _timeRanges = require('../utils/time-ranges.js');\nvar _flashRtmp = require('./flash-rtmp');\nvar _flashRtmp2 = _interopRequireDefault(_flashRtmp);\nvar _component = require('../component');\nvar _component2 = _interopRequireDefault(_component);\nvar _window = require('global/window');\nvar _window2 = _interopRequireDefault(_window);\nvar _obj = require('../utils/obj');\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n    newObj['default'] = obj;\n    return newObj;\n  }\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n} /**\n   * @file flash.js\n   * VideoJS-SWF - Custom Flash Player with HTML5-ish API\n   * https://github.com/zencoder/video-js-swf\n   * Not using setupTriggers. Using global onEvent func to distribute events\n   */\n\nvar navigator = _window2['default'].navigator;\n\n/**\n * Flash Media Controller - Wrapper for Flash Media API\n *\n * @mixes FlashRtmpDecorator\n * @mixes Tech~SouceHandlerAdditions\n * @extends Tech\n */\n\nvar Flash = function (_Tech) {\n  _inherits(Flash, _Tech);\n\n  /**\n   * Create an instance of this Tech.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @param {Component~ReadyCallback} ready\n   *        Callback function to call when the `Flash` Tech is ready.\n   */\n  function Flash(options, ready) {\n    _classCallCheck(this, Flash);\n\n    // Set the source when ready\n    var _this = _possibleConstructorReturn(this, _Tech.call(this, options, ready));\n    if (options.source) {\n      _this.ready(function () {\n        this.setSource(options.source);\n      }, true);\n    }\n\n    // Having issues with Flash reloading on certain page actions (hide/resize/fullscreen) in certain browsers\n    // This allows resetting the playhead when we catch the reload\n    if (options.startTime) {\n      _this.ready(function () {\n        this.load();\n        this.play();\n        this.currentTime(options.startTime);\n      }, true);\n    }\n\n    // Add global window functions that the swf expects\n    // A 4.x workflow we weren't able to solve for in 5.0\n    // because of the need to hard code these functions\n    // into the swf for security reasons\n    _window2['default'].videojs = _window2['default'].videojs || {};\n    _window2['default'].videojs.Flash = _window2['default'].videojs.Flash || {};\n    _window2['default'].videojs.Flash.onReady = Flash.onReady;\n    _window2['default'].videojs.Flash.onEvent = Flash.onEvent;\n    _window2['default'].videojs.Flash.onError = Flash.onError;\n    _this.on('seeked', function () {\n      this.lastSeekTarget_ = undefined;\n    });\n    return _this;\n  }\n\n  /**\n   * Create the `Flash` Tech's DOM element.\n   *\n   * @return {Element}\n   *         The element that gets created.\n   */\n\n  Flash.prototype.createEl = function createEl() {\n    var options = this.options_;\n\n    // If video.js is hosted locally you should also set the location\n    // for the hosted swf, which should be relative to the page (not video.js)\n    // Otherwise this adds a CDN url.\n    // The CDN also auto-adds a swf URL for that specific version.\n    if (!options.swf) {\n      var ver = '5.4.1';\n      options.swf = '//vjs.zencdn.net/swf/' + ver + '/video-js.swf';\n    }\n\n    // Generate ID for swf object\n    var objId = options.techId;\n\n    // Merge default flashvars with ones passed in to init\n    var flashVars = (0, _obj.assign)({\n      // SWF Callback Functions\n      readyFunction: 'videojs.Flash.onReady',\n      eventProxyFunction: 'videojs.Flash.onEvent',\n      errorEventProxyFunction: 'videojs.Flash.onError',\n      // Player Settings\n      autoplay: options.autoplay,\n      preload: options.preload,\n      loop: options.loop,\n      muted: options.muted\n    }, options.flashVars);\n\n    // Merge default parames with ones passed in\n    var params = (0, _obj.assign)({\n      // Opaque is needed to overlay controls, but can affect playback performance\n      wmode: 'opaque',\n      // Using bgcolor prevents a white flash when the object is loading\n      bgcolor: '#000000'\n    }, options.params);\n\n    // Merge default attributes with ones passed in\n    var attributes = (0, _obj.assign)({\n      // Both ID and Name needed or swf to identify itself\n      id: objId,\n      name: objId,\n      'class': 'vjs-tech'\n    }, options.attributes);\n    this.el_ = Flash.embed(options.swf, flashVars, params, attributes);\n    this.el_.tech = this;\n    return this.el_;\n  };\n\n  /**\n   * Called by {@link Player#play} to play using the `Flash` `Tech`.\n   */\n\n  Flash.prototype.play = function play() {\n    if (this.ended()) {\n      this.setCurrentTime(0);\n    }\n    this.el_.vjs_play();\n  };\n\n  /**\n   * Called by {@link Player#pause} to pause using the `Flash` `Tech`.\n   */\n\n  Flash.prototype.pause = function pause() {\n    this.el_.vjs_pause();\n  };\n\n  /**\n   * A getter/setter for the `Flash` Tech's source object.\n   * > Note: Please use {@link Flash#setSource}\n   *\n   * @param {Tech~SourceObject} [src]\n   *        The source object you want to set on the `Flash` techs.\n   *\n   * @return {Tech~SourceObject|undefined}\n   *         - The current source object when a source is not passed in.\n   *         - undefined when setting\n   *\n   * @deprecated Since version 5.\n   */\n\n  Flash.prototype.src = function src(_src) {\n    if (_src === undefined) {\n      return this.currentSrc();\n    }\n\n    // Setting src through `src` not `setSrc` will be deprecated\n    return this.setSrc(_src);\n  };\n\n  /**\n   * A getter/setter for the `Flash` Tech's source object.\n   *\n   * @param {Tech~SourceObject} [src]\n   *        The source object you want to set on the `Flash` techs.\n   *\n   * @return {Tech~SourceObject|undefined}\n   *         - The current source object when a source is not passed in.\n   *         - undefined when setting\n   */\n\n  Flash.prototype.setSrc = function setSrc(src) {\n    var _this2 = this;\n\n    // Make sure source URL is absolute.\n    src = Url.getAbsoluteURL(src);\n    this.el_.vjs_src(src);\n\n    // Currently the SWF doesn't autoplay if you load a source later.\n    // e.g. Load player w/ no source, wait 2s, set src.\n    if (this.autoplay()) {\n      this.setTimeout(function () {\n        return _this2.play();\n      }, 0);\n    }\n  };\n\n  /**\n   * Indicates whether the media is currently seeking to a new position or not.\n   *\n   * @return {boolean}\n   *         - True if seeking to a new position\n   *         - False otherwise\n   */\n\n  Flash.prototype.seeking = function seeking() {\n    return this.lastSeekTarget_ !== undefined;\n  };\n\n  /**\n   * Returns the current time in seconds that the media is at in playback.\n   *\n   * @param {number} time\n   *        Current playtime of the media in seconds.\n   */\n\n  Flash.prototype.setCurrentTime = function setCurrentTime(time) {\n    var seekable = this.seekable();\n    if (seekable.length) {\n      // clamp to the current seekable range\n      time = time > seekable.start(0) ? time : seekable.start(0);\n      time = time < seekable.end(seekable.length - 1) ? time : seekable.end(seekable.length - 1);\n      this.lastSeekTarget_ = time;\n      this.trigger('seeking');\n      this.el_.vjs_setProperty('currentTime', time);\n      _Tech.prototype.setCurrentTime.call(this);\n    }\n  };\n\n  /**\n   * Get the current playback time in seconds\n   *\n   * @return {number}\n   *         The current time of playback in seconds.\n   */\n\n  Flash.prototype.currentTime = function currentTime() {\n    // when seeking make the reported time keep up with the requested time\n    // by reading the time we're seeking to\n    if (this.seeking()) {\n      return this.lastSeekTarget_ || 0;\n    }\n    return this.el_.vjs_getProperty('currentTime');\n  };\n\n  /**\n   * Get the current source\n   *\n   * @method currentSrc\n   * @return {Tech~SourceObject}\n   *         The current source\n   */\n\n  Flash.prototype.currentSrc = function currentSrc() {\n    if (this.currentSource_) {\n      return this.currentSource_.src;\n    }\n    return this.el_.vjs_getProperty('currentSrc');\n  };\n\n  /**\n   * Get the total duration of the current media.\n   *\n   * @return {number}\n   8          The total duration of the current media.\n   */\n\n  Flash.prototype.duration = function duration() {\n    if (this.readyState() === 0) {\n      return NaN;\n    }\n    var duration = this.el_.vjs_getProperty('duration');\n    return duration >= 0 ? duration : Infinity;\n  };\n\n  /**\n   * Load media into Tech.\n   */\n\n  Flash.prototype.load = function load() {\n    this.el_.vjs_load();\n  };\n\n  /**\n   * Get the poster image that was set on the tech.\n   */\n\n  Flash.prototype.poster = function poster() {\n    this.el_.vjs_getProperty('poster');\n  };\n\n  /**\n   * Poster images are not handled by the Flash tech so make this is a no-op.\n   */\n\n  Flash.prototype.setPoster = function setPoster() {};\n\n  /**\n   * Determine the time ranges that can be seeked to in the media.\n   *\n   * @return {TimeRange}\n   *         Returns the time ranges that can be seeked to.\n   */\n\n  Flash.prototype.seekable = function seekable() {\n    var duration = this.duration();\n    if (duration === 0) {\n      return (0, _timeRanges.createTimeRange)();\n    }\n    return (0, _timeRanges.createTimeRange)(0, duration);\n  };\n\n  /**\n   * Get and create a `TimeRange` object for buffering.\n   *\n   * @return {TimeRange}\n   *         The time range object that was created.\n   */\n\n  Flash.prototype.buffered = function buffered() {\n    var ranges = this.el_.vjs_getProperty('buffered');\n    if (ranges.length === 0) {\n      return (0, _timeRanges.createTimeRange)();\n    }\n    return (0, _timeRanges.createTimeRange)(ranges[0][0], ranges[0][1]);\n  };\n\n  /**\n   * Get fullscreen support -\n   *\n   * Flash does not allow fullscreen through javascript\n   * so this always returns false.\n   *\n   * @return {boolean}\n   *         The Flash tech does not support fullscreen, so it will always return false.\n   */\n\n  Flash.prototype.supportsFullScreen = function supportsFullScreen() {\n    // Flash does not allow fullscreen through javascript\n    return false;\n  };\n\n  /**\n   * Flash does not allow fullscreen through javascript\n   * so this always returns false.\n   *\n   * @return {boolean}\n   *         The Flash tech does not support fullscreen, so it will always return false.\n   */\n\n  Flash.prototype.enterFullScreen = function enterFullScreen() {\n    return false;\n  };\n\n  /**\n   * Gets available media playback quality metrics as specified by the W3C's Media\n   * Playback Quality API.\n   *\n   * @see [Spec]{@link https://wicg.github.io/media-playback-quality}\n   *\n   * @return {Object}\n   *         An object with supported media playback quality metrics\n   */\n\n  Flash.prototype.getVideoPlaybackQuality = function getVideoPlaybackQuality() {\n    var videoPlaybackQuality = this.el_.vjs_getProperty('getVideoPlaybackQuality');\n    if (_window2['default'].performance && typeof _window2['default'].performance.now === 'function') {\n      videoPlaybackQuality.creationTime = _window2['default'].performance.now();\n    } else if (_window2['default'].performance && _window2['default'].performance.timing && typeof _window2['default'].performance.timing.navigationStart === 'number') {\n      videoPlaybackQuality.creationTime = _window2['default'].Date.now() - _window2['default'].performance.timing.navigationStart;\n    }\n    return videoPlaybackQuality;\n  };\n  return Flash;\n}(_tech2['default']);\n\n// Create setters and getters for attributes\n\nvar _api = Flash.prototype;\nvar _readWrite = 'rtmpConnection,rtmpStream,preload,defaultPlaybackRate,playbackRate,autoplay,loop,mediaGroup,controller,controls,volume,muted,defaultMuted'.split(',');\nvar _readOnly = 'networkState,readyState,initialTime,startOffsetTime,paused,ended,videoWidth,videoHeight'.split(',');\nfunction _createSetter(attr) {\n  var attrUpper = attr.charAt(0).toUpperCase() + attr.slice(1);\n  _api['set' + attrUpper] = function (val) {\n    return this.el_.vjs_setProperty(attr, val);\n  };\n}\nfunction _createGetter(attr) {\n  _api[attr] = function () {\n    return this.el_.vjs_getProperty(attr);\n  };\n}\n\n// Create getter and setters for all read/write attributes\nfor (var i = 0; i < _readWrite.length; i++) {\n  _createGetter(_readWrite[i]);\n  _createSetter(_readWrite[i]);\n}\n\n// Create getters for read-only attributes\nfor (var _i = 0; _i < _readOnly.length; _i++) {\n  _createGetter(_readOnly[_i]);\n}\n\n/** ------------------------------ Getters ------------------------------ **/\n/**\n * Get the value of `rtmpConnection` from the swf.\n *\n * @method Flash#rtmpConnection\n * @return {string}\n *         The current value of `rtmpConnection` on the swf.\n */\n\n/**\n * Get the value of `rtmpStream` from the swf.\n *\n * @method Flash#rtmpStream\n * @return {string}\n *         The current value of `rtmpStream` on the swf.\n */\n\n/**\n * Get the value of `preload` from the swf. `preload` indicates\n * what should download before the media is interacted with. It can have the following\n * values:\n * - none: nothing should be downloaded\n * - metadata: poster and the first few frames of the media may be downloaded to get\n *   media dimensions and other metadata\n * - auto: allow the media and metadata for the media to be downloaded before\n *    interaction\n *\n * @method Flash#preload\n * @return {string}\n *         The value of `preload` from the swf. Will be 'none', 'metadata',\n *         or 'auto'.\n */\n\n/**\n * Get the value of `defaultPlaybackRate` from the swf.\n *\n * @method Flash#defaultPlaybackRate\n * @return {number}\n *         The current value of `defaultPlaybackRate` on the swf.\n */\n\n/**\n * Get the value of `playbackRate` from the swf. `playbackRate` indicates\n * the rate at which the media is currently playing back. Examples:\n *   - if playbackRate is set to 2, media will play twice as fast.\n *   - if playbackRate is set to 0.5, media will play half as fast.\n *\n * @method Flash#playbackRate\n * @return {number}\n *         The value of `playbackRate` from the swf. A number indicating\n *         the current playback speed of the media, where 1 is normal speed.\n */\n\n/**\n * Get the value of `autoplay` from the swf. `autoplay` indicates\n * that the media should start to play as soon as the page is ready.\n *\n * @method Flash#autoplay\n * @return {boolean}\n *         - The value of `autoplay` from the swf.\n *         - True indicates that the media ashould start as soon as the page loads.\n *         - False indicates that the media should not start as soon as the page loads.\n */\n\n/**\n * Get the value of `loop` from the swf. `loop` indicates\n * that the media should return to the start of the media and continue playing once\n * it reaches the end.\n *\n * @method Flash#loop\n * @return {boolean}\n *         - The value of `loop` from the swf.\n *         - True indicates that playback should seek back to start once\n *           the end of a media is reached.\n *         - False indicates that playback should not loop back to the start when the\n *           end of the media is reached.\n */\n\n/**\n * Get the value of `mediaGroup` from the swf.\n *\n * @method Flash#mediaGroup\n * @return {string}\n *         The current value of `mediaGroup` on the swf.\n */\n\n/**\n * Get the value of `controller` from the swf.\n *\n * @method Flash#controller\n * @return {string}\n *         The current value of `controller` on the swf.\n */\n\n/**\n * Get the value of `controls` from the swf. `controls` indicates\n * whether the native flash controls should be shown or hidden.\n *\n * @method Flash#controls\n * @return {boolean}\n *         - The value of `controls` from the swf.\n *         - True indicates that native controls should be showing.\n *         - False indicates that native controls should be hidden.\n */\n\n/**\n * Get the value of the `volume` from the swf. `volume` indicates the current\n * audio level as a percentage in decimal form. This means that 1 is 100%, 0.5 is 50%, and\n * so on.\n *\n * @method Flash#volume\n * @return {number}\n *         The volume percent as a decimal. Value will be between 0-1.\n */\n\n/**\n * Get the value of the `muted` from the swf. `muted` indicates the current\n * audio level should be silent.\n *\n * @method Flash#muted\n * @return {boolean}\n *         - True if the audio should be set to silent\n *         - False otherwise\n */\n\n/**\n * Get the value of `defaultMuted` from the swf. `defaultMuted` indicates\n * whether the media should start muted or not. Only changes the default state of the\n * media. `muted` and `defaultMuted` can have different values. `muted` indicates the\n * current state.\n *\n * @method Flash#defaultMuted\n * @return {boolean}\n *         - The value of `defaultMuted` from the swf.\n *         - True indicates that the media should start muted.\n *         - False indicates that the media should not start muted.\n */\n\n/**\n * Get the value of `networkState` from the swf. `networkState` indicates\n * the current network state. It returns an enumeration from the following list:\n * - 0: NETWORK_EMPTY\n * - 1: NEWORK_IDLE\n * - 2: NETWORK_LOADING\n * - 3: NETWORK_NO_SOURCE\n *\n * @method Flash#networkState\n * @return {number}\n *         The value of `networkState` from the swf. This will be a number\n *         from the list in the description.\n */\n\n/**\n * Get the value of `readyState` from the swf. `readyState` indicates\n * the current state of the media element. It returns an enumeration from the\n * following list:\n * - 0: HAVE_NOTHING\n * - 1: HAVE_METADATA\n * - 2: HAVE_CURRENT_DATA\n * - 3: HAVE_FUTURE_DATA\n * - 4: HAVE_ENOUGH_DATA\n *\n * @method Flash#readyState\n * @return {number}\n *         The value of `readyState` from the swf. This will be a number\n *         from the list in the description.\n */\n\n/**\n * Get the value of `readyState` from the swf. `readyState` indicates\n * the current state of the media element. It returns an enumeration from the\n * following list:\n * - 0: HAVE_NOTHING\n * - 1: HAVE_METADATA\n * - 2: HAVE_CURRENT_DATA\n * - 3: HAVE_FUTURE_DATA\n * - 4: HAVE_ENOUGH_DATA\n *\n * @method Flash#readyState\n * @return {number}\n *         The value of `readyState` from the swf. This will be a number\n *         from the list in the description.\n */\n\n/**\n * Get the value of `initialTime` from the swf.\n *\n * @method Flash#initialTime\n * @return {number}\n *         The `initialTime` proprety on the swf.\n */\n\n/**\n * Get the value of `startOffsetTime` from the swf.\n *\n * @method Flash#startOffsetTime\n * @return {number}\n *         The `startOffsetTime` proprety on the swf.\n */\n\n/**\n * Get the value of `paused` from the swf. `paused` indicates whether the swf\n * is current paused or not.\n *\n * @method Flash#paused\n * @return {boolean}\n *         The value of `paused` from the swf.\n */\n\n/**\n * Get the value of `ended` from the swf. `ended` indicates whether\n * the media has reached the end or not.\n *\n * @method Flash#ended\n * @return {boolean}\n *         - True indicates that the media has ended.\n *         - False indicates that the media has not ended.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-ended}\n */\n\n/**\n * Get the value of `videoWidth` from the swf. `videoWidth` indicates\n * the current width of the media in css pixels.\n *\n * @method Flash#videoWidth\n * @return {number}\n *         The value of `videoWidth` from the swf. This will be a number\n *         in css pixels.\n */\n\n/**\n * Get the value of `videoHeight` from the swf. `videoHeigth` indicates\n * the current height of the media in css pixels.\n *\n * @method Flassh.prototype.videoHeight\n * @return {number}\n *         The value of `videoHeight` from the swf. This will be a number\n *         in css pixels.\n */\n/** ------------------------------ Setters ------------------------------ **/\n\n/**\n * Set the value of `rtmpConnection` on the swf.\n *\n * @method Flash#setRtmpConnection\n * @param {string} rtmpConnection\n *        New value to set the `rtmpConnection` property to.\n */\n\n/**\n * Set the value of `rtmpStream` on the swf.\n *\n * @method Flash#setRtmpStream\n * @param {string} rtmpStream\n *        New value to set the `rtmpStream` property to.\n */\n\n/**\n * Set the value of `preload` on the swf. `preload` indicates\n * what should download before the media is interacted with. It can have the following\n * values:\n * - none: nothing should be downloaded\n * - metadata: poster and the first few frames of the media may be downloaded to get\n *   media dimensions and other metadata\n * - auto: allow the media and metadata for the media to be downloaded before\n *    interaction\n *\n * @method Flash#setPreload\n * @param {string} preload\n *        The value of `preload` to set on the swf. Should be 'none', 'metadata',\n *        or 'auto'.\n */\n\n/**\n * Set the value of `defaultPlaybackRate` on the swf.\n *\n * @method Flash#setDefaultPlaybackRate\n * @param {number} defaultPlaybackRate\n *        New value to set the `defaultPlaybackRate` property to.\n */\n\n/**\n * Set the value of `playbackRate` on the swf. `playbackRate` indicates\n * the rate at which the media is currently playing back. Examples:\n *   - if playbackRate is set to 2, media will play twice as fast.\n *   - if playbackRate is set to 0.5, media will play half as fast.\n *\n * @method Flash#setPlaybackRate\n * @param {number} playbackRate\n *        New value of `playbackRate` on the swf. A number indicating\n *        the current playback speed of the media, where 1 is normal speed.\n */\n\n/**\n * Set the value of `autoplay` on the swf. `autoplay` indicates\n * that the media should start to play as soon as the page is ready.\n *\n * @method Flash#setAutoplay\n * @param {boolean} autoplay\n *        - The value of `autoplay` from the swf.\n *        - True indicates that the media ashould start as soon as the page loads.\n *        - False indicates that the media should not start as soon as the page loads.\n */\n\n/**\n * Set the value of `loop` on the swf. `loop` indicates\n * that the media should return to the start of the media and continue playing once\n * it reaches the end.\n *\n * @method Flash#setLoop\n * @param {boolean} loop\n *        - True indicates that playback should seek back to start once\n *          the end of a media is reached.\n *        - False indicates that playback should not loop back to the start when the\n *          end of the media is reached.\n */\n\n/**\n * Set the value of `mediaGroup` on the swf.\n *\n * @method Flash#setMediaGroup\n * @param {string} mediaGroup\n *        New value of `mediaGroup` to set on the swf.\n */\n\n/**\n * Set the value of `controller` on the swf.\n *\n * @method Flash#setController\n * @param {string} controller\n *        New value the current value of `controller` on the swf.\n */\n\n/**\n * Get the value of `controls` from the swf. `controls` indicates\n * whether the native flash controls should be shown or hidden.\n *\n * @method Flash#controls\n * @return {boolean}\n *         - The value of `controls` from the swf.\n *         - True indicates that native controls should be showing.\n *         - False indicates that native controls should be hidden.\n */\n\n/**\n * Set the value of the `volume` on the swf. `volume` indicates the current\n * audio level as a percentage in decimal form. This means that 1 is 100%, 0.5 is 50%, and\n * so on.\n *\n * @method Flash#setVolume\n * @param {number} percentAsDecimal\n *         The volume percent as a decimal. Value will be between 0-1.\n */\n\n/**\n * Set the value of the `muted` on the swf. `muted` indicates that the current\n * audio level should be silent.\n *\n * @method Flash#setMuted\n * @param {boolean} muted\n *         - True if the audio should be set to silent\n *         - False otherwise\n */\n\n/**\n * Set the value of `defaultMuted` on the swf. `defaultMuted` indicates\n * whether the media should start muted or not. Only changes the default state of the\n * media. `muted` and `defaultMuted` can have different values. `muted` indicates the\n * current state.\n *\n * @method Flash#setDefaultMuted\n * @param {boolean} defaultMuted\n *         - True indicates that the media should start muted.\n *         - False indicates that the media should not start muted.\n */\n\n/* Flash Support Testing -------------------------------------------------------- */\n\n/**\n * Check if the Flash tech is currently supported.\n *\n * @return {boolean}\n *          - True if the flash tech is supported.\n *          - False otherwise.\n */\nFlash.isSupported = function () {\n  return Flash.version()[0] >= 10;\n  // return swfobject.hasFlashPlayerVersion('10');\n};\n\n// Add Source Handler pattern functions to this tech\n_tech2['default'].withSourceHandlers(Flash);\n\n/*\n * Native source handler for flash,  simply passes the source to the swf element.\n *\n * @property {Tech~SourceObject} source\n *           The source object\n *\n * @property {Flash} tech\n *           The instance of the Flash tech\n */\nFlash.nativeSourceHandler = {};\n\n/**\n * Check if the Flash can play the given mime type.\n *\n * @param {string} type\n *        The mimetype to check\n *\n * @return {string}\n *         'maybe', or '' (empty string)\n */\nFlash.nativeSourceHandler.canPlayType = function (type) {\n  if (type in Flash.formats) {\n    return 'maybe';\n  }\n  return '';\n};\n\n/**\n * Check if the media element can handle a source natively.\n *\n * @param {Tech~SourceObject} source\n *         The source object\n *\n * @param {Object} [options]\n *         Options to be passed to the tech.\n *\n * @return {string}\n *         'maybe', or '' (empty string).\n */\nFlash.nativeSourceHandler.canHandleSource = function (source, options) {\n  var type = void 0;\n  function guessMimeType(src) {\n    var ext = Url.getFileExtension(src);\n    if (ext) {\n      return 'video/' + ext;\n    }\n    return '';\n  }\n  if (!source.type) {\n    type = guessMimeType(source.src);\n  } else {\n    // Strip code information from the type because we don't get that specific\n    type = source.type.replace(/;.*/, '').toLowerCase();\n  }\n  return Flash.nativeSourceHandler.canPlayType(type);\n};\n\n/**\n * Pass the source to the swf.\n *\n * @param {Tech~SourceObject} source\n *        The source object\n *\n * @param {Flash} tech\n *        The instance of the Flash tech\n *\n * @param {Object} [options]\n *        The options to pass to the source\n */\nFlash.nativeSourceHandler.handleSource = function (source, tech, options) {\n  tech.setSrc(source.src);\n};\n\n/**\n * noop for native source handler dispose, as cleanup will happen automatically.\n */\nFlash.nativeSourceHandler.dispose = function () {};\n\n// Register the native source handler\nFlash.registerSourceHandler(Flash.nativeSourceHandler);\n\n/**\n * Flash supported mime types.\n *\n * @constant {Object}\n */\nFlash.formats = {\n  'video/flv': 'FLV',\n  'video/x-flv': 'FLV',\n  'video/mp4': 'MP4',\n  'video/m4v': 'MP4'\n};\n\n/**\n * Called when the the swf is \"ready\", and makes sure that the swf is really\n * ready using {@link Flash#checkReady}\n */\nFlash.onReady = function (currSwf) {\n  var el = Dom.getEl(currSwf);\n  var tech = el && el.tech;\n\n  // if there is no el then the tech has been disposed\n  // and the tech element was removed from the player div\n  if (tech && tech.el()) {\n    // check that the flash object is really ready\n    Flash.checkReady(tech);\n  }\n};\n\n/**\n * The SWF isn't always ready when it says it is. Sometimes the API functions still\n * need to be added to the object. If it's not ready, we set a timeout to check again\n * shortly.\n *\n * @param {Flash} tech\n *        The instance of the flash tech to check.\n */\nFlash.checkReady = function (tech) {\n  // stop worrying if the tech has been disposed\n  if (!tech.el()) {\n    return;\n  }\n\n  // check if API property exists\n  if (tech.el().vjs_getProperty) {\n    // tell tech it's ready\n    tech.triggerReady();\n  } else {\n    // wait longer\n    this.setTimeout(function () {\n      Flash.checkReady(tech);\n    }, 50);\n  }\n};\n\n/**\n * Trigger events from the swf on the Flash Tech.\n *\n * @param {number} swfID\n *        The id of the swf that had the event\n *\n * @param {string} eventName\n *        The name of the event to trigger\n */\nFlash.onEvent = function (swfID, eventName) {\n  var tech = Dom.getEl(swfID).tech;\n  var args = Array.prototype.slice.call(arguments, 2);\n\n  // dispatch Flash events asynchronously for two reasons:\n  // - Flash swallows any exceptions generated by javascript it\n  //   invokes\n  // - Flash is suspended until the javascript returns which may cause\n  //   playback performance issues\n  tech.setTimeout(function () {\n    tech.trigger(eventName, args);\n  }, 1);\n};\n\n/**\n * Log errors from the swf on the Flash tech.\n *\n * @param {number} swfID\n *        The id of the swf that had an error.\n *\n * @param {string} The error string\n *        The error to set on the Flash Tech.\n *\n * @return {MediaError|undefined}\n *          - Returns a MediaError when err is 'srcnotfound'\n *          - Returns undefined otherwise.\n */\nFlash.onError = function (swfID, err) {\n  var tech = Dom.getEl(swfID).tech;\n\n  // trigger MEDIA_ERR_SRC_NOT_SUPPORTED\n  if (err === 'srcnotfound') {\n    return tech.error(4);\n  }\n\n  // trigger a custom error\n  tech.error('FLASH: ' + err);\n};\n\n/**\n * Get the current version of Flash that is in use on the page.\n *\n * @return {Array}\n *          an array of versions that are available.\n */\nFlash.version = function () {\n  var version = '0,0,0';\n\n  // IE\n  try {\n    version = new _window2['default'].ActiveXObject('ShockwaveFlash.ShockwaveFlash').GetVariable('$version').replace(/\\D+/g, ',').match(/^,?(.+),?$/)[1];\n\n    // other browsers\n  } catch (e) {\n    try {\n      if (navigator.mimeTypes['application/x-shockwave-flash'].enabledPlugin) {\n        version = (navigator.plugins['Shockwave Flash 2.0'] || navigator.plugins['Shockwave Flash']).description.replace(/\\D+/g, ',').match(/^,?(.+),?$/)[1];\n      }\n    } catch (err) {\n      // satisfy linter\n    }\n  }\n  return version.split(',');\n};\n\n/**\n * Only use for non-iframe embeds.\n *\n * @param {Object} swf\n *        The videojs-swf object.\n *\n * @param {Object} flashVars\n *        Names and values to use as flash option variables.\n *\n * @param {Object} params\n *        Style parameters to set on the object.\n *\n * @param {Object} attributes\n *        Attributes to set on the element.\n *\n * @return {Element}\n *          The embeded Flash DOM element.\n */\nFlash.embed = function (swf, flashVars, params, attributes) {\n  var code = Flash.getEmbedCode(swf, flashVars, params, attributes);\n\n  // Get element by embedding code and retrieving created element\n  var obj = Dom.createEl('div', {\n    innerHTML: code\n  }).childNodes[0];\n  return obj;\n};\n\n/**\n * Only use for non-iframe embeds.\n *\n * @param {Object} swf\n *        The videojs-swf object.\n *\n * @param {Object} flashVars\n *        Names and values to use as flash option variables.\n *\n * @param {Object} params\n *        Style parameters to set on the object.\n *\n * @param {Object} attributes\n *        Attributes to set on the element.\n *\n * @return {Element}\n *          The embeded Flash DOM element.\n */\nFlash.getEmbedCode = function (swf, flashVars, params, attributes) {\n  var objTag = '<object type=\"application/x-shockwave-flash\" ';\n  var flashVarsString = '';\n  var paramsString = '';\n  var attrsString = '';\n\n  // Convert flash vars to string\n  if (flashVars) {\n    Object.getOwnPropertyNames(flashVars).forEach(function (key) {\n      flashVarsString += key + '=' + flashVars[key] + '&amp;';\n    });\n  }\n\n  // Add swf, flashVars, and other default params\n  params = (0, _obj.assign)({\n    movie: swf,\n    flashvars: flashVarsString,\n    // Required to talk to swf\n    allowScriptAccess: 'always',\n    // All should be default, but having security issues.\n    allowNetworking: 'all'\n  }, params);\n\n  // Create param tags string\n  Object.getOwnPropertyNames(params).forEach(function (key) {\n    paramsString += '<param name=\"' + key + '\" value=\"' + params[key] + '\" />';\n  });\n  attributes = (0, _obj.assign)({\n    // Add swf to attributes (need both for IE and Others to work)\n    data: swf,\n    // Default to 100% width/height\n    width: '100%',\n    height: '100%'\n  }, attributes);\n\n  // Create Attributes string\n  Object.getOwnPropertyNames(attributes).forEach(function (key) {\n    attrsString += key + '=\"' + attributes[key] + '\" ';\n  });\n  return '' + objTag + attrsString + '>' + paramsString + '</object>';\n};\n\n// Run Flash through the RTMP decorator\n(0, _flashRtmp2['default'])(Flash);\n_component2['default'].registerComponent('Flash', Flash);\n_tech2['default'].registerTech('Flash', Flash);\nexports['default'] = Flash;","map":{"version":3,"names":["exports","__esModule","_tech","require","_tech2","_interopRequireDefault","_dom","Dom","_interopRequireWildcard","_url","Url","_timeRanges","_flashRtmp","_flashRtmp2","_component","_component2","_window","_window2","_obj","obj","newObj","key","Object","prototype","hasOwnProperty","call","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","navigator","Flash","_Tech","options","ready","_this","source","setSource","startTime","load","play","currentTime","videojs","onReady","onEvent","onError","on","lastSeekTarget_","undefined","createEl","options_","swf","ver","objId","techId","flashVars","assign","readyFunction","eventProxyFunction","errorEventProxyFunction","autoplay","preload","loop","muted","params","wmode","bgcolor","attributes","id","name","el_","embed","tech","ended","setCurrentTime","vjs_play","pause","vjs_pause","src","_src","currentSrc","setSrc","_this2","getAbsoluteURL","vjs_src","setTimeout","seeking","time","seekable","length","start","end","trigger","vjs_setProperty","vjs_getProperty","currentSource_","duration","readyState","NaN","Infinity","vjs_load","poster","setPoster","createTimeRange","buffered","ranges","supportsFullScreen","enterFullScreen","getVideoPlaybackQuality","videoPlaybackQuality","performance","now","creationTime","timing","navigationStart","Date","_api","_readWrite","split","_readOnly","_createSetter","attr","attrUpper","charAt","toUpperCase","slice","val","_createGetter","i","_i","isSupported","version","withSourceHandlers","nativeSourceHandler","canPlayType","type","formats","canHandleSource","guessMimeType","ext","getFileExtension","replace","toLowerCase","handleSource","dispose","registerSourceHandler","currSwf","el","getEl","checkReady","triggerReady","swfID","eventName","args","Array","arguments","err","error","ActiveXObject","GetVariable","match","e","mimeTypes","enabledPlugin","plugins","description","code","getEmbedCode","innerHTML","childNodes","objTag","flashVarsString","paramsString","attrsString","getOwnPropertyNames","forEach","movie","flashvars","allowScriptAccess","allowNetworking","data","width","height","registerComponent","registerTech"],"sources":["C:/Users/babu7/OneDrive/Desktop/djangoyoutube2/reelyoutube/frontend/node_modules/videojs-react/node_modules/video.js/es5/tech/flash.js"],"sourcesContent":["'use strict';\n\nexports.__esModule = true;\n\nvar _tech = require('./tech');\n\nvar _tech2 = _interopRequireDefault(_tech);\n\nvar _dom = require('../utils/dom.js');\n\nvar Dom = _interopRequireWildcard(_dom);\n\nvar _url = require('../utils/url.js');\n\nvar Url = _interopRequireWildcard(_url);\n\nvar _timeRanges = require('../utils/time-ranges.js');\n\nvar _flashRtmp = require('./flash-rtmp');\n\nvar _flashRtmp2 = _interopRequireDefault(_flashRtmp);\n\nvar _component = require('../component');\n\nvar _component2 = _interopRequireDefault(_component);\n\nvar _window = require('global/window');\n\nvar _window2 = _interopRequireDefault(_window);\n\nvar _obj = require('../utils/obj');\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file flash.js\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * VideoJS-SWF - Custom Flash Player with HTML5-ish API\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * https://github.com/zencoder/video-js-swf\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Not using setupTriggers. Using global onEvent func to distribute events\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\nvar navigator = _window2['default'].navigator;\n\n/**\n * Flash Media Controller - Wrapper for Flash Media API\n *\n * @mixes FlashRtmpDecorator\n * @mixes Tech~SouceHandlerAdditions\n * @extends Tech\n */\n\nvar Flash = function (_Tech) {\n  _inherits(Flash, _Tech);\n\n  /**\n   * Create an instance of this Tech.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @param {Component~ReadyCallback} ready\n   *        Callback function to call when the `Flash` Tech is ready.\n   */\n  function Flash(options, ready) {\n    _classCallCheck(this, Flash);\n\n    // Set the source when ready\n    var _this = _possibleConstructorReturn(this, _Tech.call(this, options, ready));\n\n    if (options.source) {\n      _this.ready(function () {\n        this.setSource(options.source);\n      }, true);\n    }\n\n    // Having issues with Flash reloading on certain page actions (hide/resize/fullscreen) in certain browsers\n    // This allows resetting the playhead when we catch the reload\n    if (options.startTime) {\n      _this.ready(function () {\n        this.load();\n        this.play();\n        this.currentTime(options.startTime);\n      }, true);\n    }\n\n    // Add global window functions that the swf expects\n    // A 4.x workflow we weren't able to solve for in 5.0\n    // because of the need to hard code these functions\n    // into the swf for security reasons\n    _window2['default'].videojs = _window2['default'].videojs || {};\n    _window2['default'].videojs.Flash = _window2['default'].videojs.Flash || {};\n    _window2['default'].videojs.Flash.onReady = Flash.onReady;\n    _window2['default'].videojs.Flash.onEvent = Flash.onEvent;\n    _window2['default'].videojs.Flash.onError = Flash.onError;\n\n    _this.on('seeked', function () {\n      this.lastSeekTarget_ = undefined;\n    });\n\n    return _this;\n  }\n\n  /**\n   * Create the `Flash` Tech's DOM element.\n   *\n   * @return {Element}\n   *         The element that gets created.\n   */\n\n\n  Flash.prototype.createEl = function createEl() {\n    var options = this.options_;\n\n    // If video.js is hosted locally you should also set the location\n    // for the hosted swf, which should be relative to the page (not video.js)\n    // Otherwise this adds a CDN url.\n    // The CDN also auto-adds a swf URL for that specific version.\n    if (!options.swf) {\n      var ver = '5.4.1';\n\n      options.swf = '//vjs.zencdn.net/swf/' + ver + '/video-js.swf';\n    }\n\n    // Generate ID for swf object\n    var objId = options.techId;\n\n    // Merge default flashvars with ones passed in to init\n    var flashVars = (0, _obj.assign)({\n\n      // SWF Callback Functions\n      readyFunction: 'videojs.Flash.onReady',\n      eventProxyFunction: 'videojs.Flash.onEvent',\n      errorEventProxyFunction: 'videojs.Flash.onError',\n\n      // Player Settings\n      autoplay: options.autoplay,\n      preload: options.preload,\n      loop: options.loop,\n      muted: options.muted\n\n    }, options.flashVars);\n\n    // Merge default parames with ones passed in\n    var params = (0, _obj.assign)({\n      // Opaque is needed to overlay controls, but can affect playback performance\n      wmode: 'opaque',\n      // Using bgcolor prevents a white flash when the object is loading\n      bgcolor: '#000000'\n    }, options.params);\n\n    // Merge default attributes with ones passed in\n    var attributes = (0, _obj.assign)({\n      // Both ID and Name needed or swf to identify itself\n      id: objId,\n      name: objId,\n      'class': 'vjs-tech'\n    }, options.attributes);\n\n    this.el_ = Flash.embed(options.swf, flashVars, params, attributes);\n    this.el_.tech = this;\n\n    return this.el_;\n  };\n\n  /**\n   * Called by {@link Player#play} to play using the `Flash` `Tech`.\n   */\n\n\n  Flash.prototype.play = function play() {\n    if (this.ended()) {\n      this.setCurrentTime(0);\n    }\n    this.el_.vjs_play();\n  };\n\n  /**\n   * Called by {@link Player#pause} to pause using the `Flash` `Tech`.\n   */\n\n\n  Flash.prototype.pause = function pause() {\n    this.el_.vjs_pause();\n  };\n\n  /**\n   * A getter/setter for the `Flash` Tech's source object.\n   * > Note: Please use {@link Flash#setSource}\n   *\n   * @param {Tech~SourceObject} [src]\n   *        The source object you want to set on the `Flash` techs.\n   *\n   * @return {Tech~SourceObject|undefined}\n   *         - The current source object when a source is not passed in.\n   *         - undefined when setting\n   *\n   * @deprecated Since version 5.\n   */\n\n\n  Flash.prototype.src = function src(_src) {\n    if (_src === undefined) {\n      return this.currentSrc();\n    }\n\n    // Setting src through `src` not `setSrc` will be deprecated\n    return this.setSrc(_src);\n  };\n\n  /**\n   * A getter/setter for the `Flash` Tech's source object.\n   *\n   * @param {Tech~SourceObject} [src]\n   *        The source object you want to set on the `Flash` techs.\n   *\n   * @return {Tech~SourceObject|undefined}\n   *         - The current source object when a source is not passed in.\n   *         - undefined when setting\n   */\n\n\n  Flash.prototype.setSrc = function setSrc(src) {\n    var _this2 = this;\n\n    // Make sure source URL is absolute.\n    src = Url.getAbsoluteURL(src);\n    this.el_.vjs_src(src);\n\n    // Currently the SWF doesn't autoplay if you load a source later.\n    // e.g. Load player w/ no source, wait 2s, set src.\n    if (this.autoplay()) {\n      this.setTimeout(function () {\n        return _this2.play();\n      }, 0);\n    }\n  };\n\n  /**\n   * Indicates whether the media is currently seeking to a new position or not.\n   *\n   * @return {boolean}\n   *         - True if seeking to a new position\n   *         - False otherwise\n   */\n\n\n  Flash.prototype.seeking = function seeking() {\n    return this.lastSeekTarget_ !== undefined;\n  };\n\n  /**\n   * Returns the current time in seconds that the media is at in playback.\n   *\n   * @param {number} time\n   *        Current playtime of the media in seconds.\n   */\n\n\n  Flash.prototype.setCurrentTime = function setCurrentTime(time) {\n    var seekable = this.seekable();\n\n    if (seekable.length) {\n      // clamp to the current seekable range\n      time = time > seekable.start(0) ? time : seekable.start(0);\n      time = time < seekable.end(seekable.length - 1) ? time : seekable.end(seekable.length - 1);\n\n      this.lastSeekTarget_ = time;\n      this.trigger('seeking');\n      this.el_.vjs_setProperty('currentTime', time);\n      _Tech.prototype.setCurrentTime.call(this);\n    }\n  };\n\n  /**\n   * Get the current playback time in seconds\n   *\n   * @return {number}\n   *         The current time of playback in seconds.\n   */\n\n\n  Flash.prototype.currentTime = function currentTime() {\n    // when seeking make the reported time keep up with the requested time\n    // by reading the time we're seeking to\n    if (this.seeking()) {\n      return this.lastSeekTarget_ || 0;\n    }\n    return this.el_.vjs_getProperty('currentTime');\n  };\n\n  /**\n   * Get the current source\n   *\n   * @method currentSrc\n   * @return {Tech~SourceObject}\n   *         The current source\n   */\n\n\n  Flash.prototype.currentSrc = function currentSrc() {\n    if (this.currentSource_) {\n      return this.currentSource_.src;\n    }\n    return this.el_.vjs_getProperty('currentSrc');\n  };\n\n  /**\n   * Get the total duration of the current media.\n   *\n   * @return {number}\n   8          The total duration of the current media.\n   */\n\n\n  Flash.prototype.duration = function duration() {\n    if (this.readyState() === 0) {\n      return NaN;\n    }\n    var duration = this.el_.vjs_getProperty('duration');\n\n    return duration >= 0 ? duration : Infinity;\n  };\n\n  /**\n   * Load media into Tech.\n   */\n\n\n  Flash.prototype.load = function load() {\n    this.el_.vjs_load();\n  };\n\n  /**\n   * Get the poster image that was set on the tech.\n   */\n\n\n  Flash.prototype.poster = function poster() {\n    this.el_.vjs_getProperty('poster');\n  };\n\n  /**\n   * Poster images are not handled by the Flash tech so make this is a no-op.\n   */\n\n\n  Flash.prototype.setPoster = function setPoster() {};\n\n  /**\n   * Determine the time ranges that can be seeked to in the media.\n   *\n   * @return {TimeRange}\n   *         Returns the time ranges that can be seeked to.\n   */\n\n\n  Flash.prototype.seekable = function seekable() {\n    var duration = this.duration();\n\n    if (duration === 0) {\n      return (0, _timeRanges.createTimeRange)();\n    }\n    return (0, _timeRanges.createTimeRange)(0, duration);\n  };\n\n  /**\n   * Get and create a `TimeRange` object for buffering.\n   *\n   * @return {TimeRange}\n   *         The time range object that was created.\n   */\n\n\n  Flash.prototype.buffered = function buffered() {\n    var ranges = this.el_.vjs_getProperty('buffered');\n\n    if (ranges.length === 0) {\n      return (0, _timeRanges.createTimeRange)();\n    }\n    return (0, _timeRanges.createTimeRange)(ranges[0][0], ranges[0][1]);\n  };\n\n  /**\n   * Get fullscreen support -\n   *\n   * Flash does not allow fullscreen through javascript\n   * so this always returns false.\n   *\n   * @return {boolean}\n   *         The Flash tech does not support fullscreen, so it will always return false.\n   */\n\n\n  Flash.prototype.supportsFullScreen = function supportsFullScreen() {\n    // Flash does not allow fullscreen through javascript\n    return false;\n  };\n\n  /**\n   * Flash does not allow fullscreen through javascript\n   * so this always returns false.\n   *\n   * @return {boolean}\n   *         The Flash tech does not support fullscreen, so it will always return false.\n   */\n\n\n  Flash.prototype.enterFullScreen = function enterFullScreen() {\n    return false;\n  };\n\n  /**\n   * Gets available media playback quality metrics as specified by the W3C's Media\n   * Playback Quality API.\n   *\n   * @see [Spec]{@link https://wicg.github.io/media-playback-quality}\n   *\n   * @return {Object}\n   *         An object with supported media playback quality metrics\n   */\n\n\n  Flash.prototype.getVideoPlaybackQuality = function getVideoPlaybackQuality() {\n    var videoPlaybackQuality = this.el_.vjs_getProperty('getVideoPlaybackQuality');\n\n    if (_window2['default'].performance && typeof _window2['default'].performance.now === 'function') {\n      videoPlaybackQuality.creationTime = _window2['default'].performance.now();\n    } else if (_window2['default'].performance && _window2['default'].performance.timing && typeof _window2['default'].performance.timing.navigationStart === 'number') {\n      videoPlaybackQuality.creationTime = _window2['default'].Date.now() - _window2['default'].performance.timing.navigationStart;\n    }\n\n    return videoPlaybackQuality;\n  };\n\n  return Flash;\n}(_tech2['default']);\n\n// Create setters and getters for attributes\n\n\nvar _api = Flash.prototype;\nvar _readWrite = 'rtmpConnection,rtmpStream,preload,defaultPlaybackRate,playbackRate,autoplay,loop,mediaGroup,controller,controls,volume,muted,defaultMuted'.split(',');\nvar _readOnly = 'networkState,readyState,initialTime,startOffsetTime,paused,ended,videoWidth,videoHeight'.split(',');\n\nfunction _createSetter(attr) {\n  var attrUpper = attr.charAt(0).toUpperCase() + attr.slice(1);\n\n  _api['set' + attrUpper] = function (val) {\n    return this.el_.vjs_setProperty(attr, val);\n  };\n}\n\nfunction _createGetter(attr) {\n  _api[attr] = function () {\n    return this.el_.vjs_getProperty(attr);\n  };\n}\n\n// Create getter and setters for all read/write attributes\nfor (var i = 0; i < _readWrite.length; i++) {\n  _createGetter(_readWrite[i]);\n  _createSetter(_readWrite[i]);\n}\n\n// Create getters for read-only attributes\nfor (var _i = 0; _i < _readOnly.length; _i++) {\n  _createGetter(_readOnly[_i]);\n}\n\n/** ------------------------------ Getters ------------------------------ **/\n/**\n * Get the value of `rtmpConnection` from the swf.\n *\n * @method Flash#rtmpConnection\n * @return {string}\n *         The current value of `rtmpConnection` on the swf.\n */\n\n/**\n * Get the value of `rtmpStream` from the swf.\n *\n * @method Flash#rtmpStream\n * @return {string}\n *         The current value of `rtmpStream` on the swf.\n */\n\n/**\n * Get the value of `preload` from the swf. `preload` indicates\n * what should download before the media is interacted with. It can have the following\n * values:\n * - none: nothing should be downloaded\n * - metadata: poster and the first few frames of the media may be downloaded to get\n *   media dimensions and other metadata\n * - auto: allow the media and metadata for the media to be downloaded before\n *    interaction\n *\n * @method Flash#preload\n * @return {string}\n *         The value of `preload` from the swf. Will be 'none', 'metadata',\n *         or 'auto'.\n */\n\n/**\n * Get the value of `defaultPlaybackRate` from the swf.\n *\n * @method Flash#defaultPlaybackRate\n * @return {number}\n *         The current value of `defaultPlaybackRate` on the swf.\n */\n\n/**\n * Get the value of `playbackRate` from the swf. `playbackRate` indicates\n * the rate at which the media is currently playing back. Examples:\n *   - if playbackRate is set to 2, media will play twice as fast.\n *   - if playbackRate is set to 0.5, media will play half as fast.\n *\n * @method Flash#playbackRate\n * @return {number}\n *         The value of `playbackRate` from the swf. A number indicating\n *         the current playback speed of the media, where 1 is normal speed.\n */\n\n/**\n * Get the value of `autoplay` from the swf. `autoplay` indicates\n * that the media should start to play as soon as the page is ready.\n *\n * @method Flash#autoplay\n * @return {boolean}\n *         - The value of `autoplay` from the swf.\n *         - True indicates that the media ashould start as soon as the page loads.\n *         - False indicates that the media should not start as soon as the page loads.\n */\n\n/**\n * Get the value of `loop` from the swf. `loop` indicates\n * that the media should return to the start of the media and continue playing once\n * it reaches the end.\n *\n * @method Flash#loop\n * @return {boolean}\n *         - The value of `loop` from the swf.\n *         - True indicates that playback should seek back to start once\n *           the end of a media is reached.\n *         - False indicates that playback should not loop back to the start when the\n *           end of the media is reached.\n */\n\n/**\n * Get the value of `mediaGroup` from the swf.\n *\n * @method Flash#mediaGroup\n * @return {string}\n *         The current value of `mediaGroup` on the swf.\n */\n\n/**\n * Get the value of `controller` from the swf.\n *\n * @method Flash#controller\n * @return {string}\n *         The current value of `controller` on the swf.\n */\n\n/**\n * Get the value of `controls` from the swf. `controls` indicates\n * whether the native flash controls should be shown or hidden.\n *\n * @method Flash#controls\n * @return {boolean}\n *         - The value of `controls` from the swf.\n *         - True indicates that native controls should be showing.\n *         - False indicates that native controls should be hidden.\n */\n\n/**\n * Get the value of the `volume` from the swf. `volume` indicates the current\n * audio level as a percentage in decimal form. This means that 1 is 100%, 0.5 is 50%, and\n * so on.\n *\n * @method Flash#volume\n * @return {number}\n *         The volume percent as a decimal. Value will be between 0-1.\n */\n\n/**\n * Get the value of the `muted` from the swf. `muted` indicates the current\n * audio level should be silent.\n *\n * @method Flash#muted\n * @return {boolean}\n *         - True if the audio should be set to silent\n *         - False otherwise\n */\n\n/**\n * Get the value of `defaultMuted` from the swf. `defaultMuted` indicates\n * whether the media should start muted or not. Only changes the default state of the\n * media. `muted` and `defaultMuted` can have different values. `muted` indicates the\n * current state.\n *\n * @method Flash#defaultMuted\n * @return {boolean}\n *         - The value of `defaultMuted` from the swf.\n *         - True indicates that the media should start muted.\n *         - False indicates that the media should not start muted.\n */\n\n/**\n * Get the value of `networkState` from the swf. `networkState` indicates\n * the current network state. It returns an enumeration from the following list:\n * - 0: NETWORK_EMPTY\n * - 1: NEWORK_IDLE\n * - 2: NETWORK_LOADING\n * - 3: NETWORK_NO_SOURCE\n *\n * @method Flash#networkState\n * @return {number}\n *         The value of `networkState` from the swf. This will be a number\n *         from the list in the description.\n */\n\n/**\n * Get the value of `readyState` from the swf. `readyState` indicates\n * the current state of the media element. It returns an enumeration from the\n * following list:\n * - 0: HAVE_NOTHING\n * - 1: HAVE_METADATA\n * - 2: HAVE_CURRENT_DATA\n * - 3: HAVE_FUTURE_DATA\n * - 4: HAVE_ENOUGH_DATA\n *\n * @method Flash#readyState\n * @return {number}\n *         The value of `readyState` from the swf. This will be a number\n *         from the list in the description.\n */\n\n/**\n * Get the value of `readyState` from the swf. `readyState` indicates\n * the current state of the media element. It returns an enumeration from the\n * following list:\n * - 0: HAVE_NOTHING\n * - 1: HAVE_METADATA\n * - 2: HAVE_CURRENT_DATA\n * - 3: HAVE_FUTURE_DATA\n * - 4: HAVE_ENOUGH_DATA\n *\n * @method Flash#readyState\n * @return {number}\n *         The value of `readyState` from the swf. This will be a number\n *         from the list in the description.\n */\n\n/**\n * Get the value of `initialTime` from the swf.\n *\n * @method Flash#initialTime\n * @return {number}\n *         The `initialTime` proprety on the swf.\n */\n\n/**\n * Get the value of `startOffsetTime` from the swf.\n *\n * @method Flash#startOffsetTime\n * @return {number}\n *         The `startOffsetTime` proprety on the swf.\n */\n\n/**\n * Get the value of `paused` from the swf. `paused` indicates whether the swf\n * is current paused or not.\n *\n * @method Flash#paused\n * @return {boolean}\n *         The value of `paused` from the swf.\n */\n\n/**\n * Get the value of `ended` from the swf. `ended` indicates whether\n * the media has reached the end or not.\n *\n * @method Flash#ended\n * @return {boolean}\n *         - True indicates that the media has ended.\n *         - False indicates that the media has not ended.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-ended}\n */\n\n/**\n * Get the value of `videoWidth` from the swf. `videoWidth` indicates\n * the current width of the media in css pixels.\n *\n * @method Flash#videoWidth\n * @return {number}\n *         The value of `videoWidth` from the swf. This will be a number\n *         in css pixels.\n */\n\n/**\n * Get the value of `videoHeight` from the swf. `videoHeigth` indicates\n * the current height of the media in css pixels.\n *\n * @method Flassh.prototype.videoHeight\n * @return {number}\n *         The value of `videoHeight` from the swf. This will be a number\n *         in css pixels.\n */\n/** ------------------------------ Setters ------------------------------ **/\n\n/**\n * Set the value of `rtmpConnection` on the swf.\n *\n * @method Flash#setRtmpConnection\n * @param {string} rtmpConnection\n *        New value to set the `rtmpConnection` property to.\n */\n\n/**\n * Set the value of `rtmpStream` on the swf.\n *\n * @method Flash#setRtmpStream\n * @param {string} rtmpStream\n *        New value to set the `rtmpStream` property to.\n */\n\n/**\n * Set the value of `preload` on the swf. `preload` indicates\n * what should download before the media is interacted with. It can have the following\n * values:\n * - none: nothing should be downloaded\n * - metadata: poster and the first few frames of the media may be downloaded to get\n *   media dimensions and other metadata\n * - auto: allow the media and metadata for the media to be downloaded before\n *    interaction\n *\n * @method Flash#setPreload\n * @param {string} preload\n *        The value of `preload` to set on the swf. Should be 'none', 'metadata',\n *        or 'auto'.\n */\n\n/**\n * Set the value of `defaultPlaybackRate` on the swf.\n *\n * @method Flash#setDefaultPlaybackRate\n * @param {number} defaultPlaybackRate\n *        New value to set the `defaultPlaybackRate` property to.\n */\n\n/**\n * Set the value of `playbackRate` on the swf. `playbackRate` indicates\n * the rate at which the media is currently playing back. Examples:\n *   - if playbackRate is set to 2, media will play twice as fast.\n *   - if playbackRate is set to 0.5, media will play half as fast.\n *\n * @method Flash#setPlaybackRate\n * @param {number} playbackRate\n *        New value of `playbackRate` on the swf. A number indicating\n *        the current playback speed of the media, where 1 is normal speed.\n */\n\n/**\n * Set the value of `autoplay` on the swf. `autoplay` indicates\n * that the media should start to play as soon as the page is ready.\n *\n * @method Flash#setAutoplay\n * @param {boolean} autoplay\n *        - The value of `autoplay` from the swf.\n *        - True indicates that the media ashould start as soon as the page loads.\n *        - False indicates that the media should not start as soon as the page loads.\n */\n\n/**\n * Set the value of `loop` on the swf. `loop` indicates\n * that the media should return to the start of the media and continue playing once\n * it reaches the end.\n *\n * @method Flash#setLoop\n * @param {boolean} loop\n *        - True indicates that playback should seek back to start once\n *          the end of a media is reached.\n *        - False indicates that playback should not loop back to the start when the\n *          end of the media is reached.\n */\n\n/**\n * Set the value of `mediaGroup` on the swf.\n *\n * @method Flash#setMediaGroup\n * @param {string} mediaGroup\n *        New value of `mediaGroup` to set on the swf.\n */\n\n/**\n * Set the value of `controller` on the swf.\n *\n * @method Flash#setController\n * @param {string} controller\n *        New value the current value of `controller` on the swf.\n */\n\n/**\n * Get the value of `controls` from the swf. `controls` indicates\n * whether the native flash controls should be shown or hidden.\n *\n * @method Flash#controls\n * @return {boolean}\n *         - The value of `controls` from the swf.\n *         - True indicates that native controls should be showing.\n *         - False indicates that native controls should be hidden.\n */\n\n/**\n * Set the value of the `volume` on the swf. `volume` indicates the current\n * audio level as a percentage in decimal form. This means that 1 is 100%, 0.5 is 50%, and\n * so on.\n *\n * @method Flash#setVolume\n * @param {number} percentAsDecimal\n *         The volume percent as a decimal. Value will be between 0-1.\n */\n\n/**\n * Set the value of the `muted` on the swf. `muted` indicates that the current\n * audio level should be silent.\n *\n * @method Flash#setMuted\n * @param {boolean} muted\n *         - True if the audio should be set to silent\n *         - False otherwise\n */\n\n/**\n * Set the value of `defaultMuted` on the swf. `defaultMuted` indicates\n * whether the media should start muted or not. Only changes the default state of the\n * media. `muted` and `defaultMuted` can have different values. `muted` indicates the\n * current state.\n *\n * @method Flash#setDefaultMuted\n * @param {boolean} defaultMuted\n *         - True indicates that the media should start muted.\n *         - False indicates that the media should not start muted.\n */\n\n/* Flash Support Testing -------------------------------------------------------- */\n\n/**\n * Check if the Flash tech is currently supported.\n *\n * @return {boolean}\n *          - True if the flash tech is supported.\n *          - False otherwise.\n */\nFlash.isSupported = function () {\n  return Flash.version()[0] >= 10;\n  // return swfobject.hasFlashPlayerVersion('10');\n};\n\n// Add Source Handler pattern functions to this tech\n_tech2['default'].withSourceHandlers(Flash);\n\n/*\n * Native source handler for flash,  simply passes the source to the swf element.\n *\n * @property {Tech~SourceObject} source\n *           The source object\n *\n * @property {Flash} tech\n *           The instance of the Flash tech\n */\nFlash.nativeSourceHandler = {};\n\n/**\n * Check if the Flash can play the given mime type.\n *\n * @param {string} type\n *        The mimetype to check\n *\n * @return {string}\n *         'maybe', or '' (empty string)\n */\nFlash.nativeSourceHandler.canPlayType = function (type) {\n  if (type in Flash.formats) {\n    return 'maybe';\n  }\n\n  return '';\n};\n\n/**\n * Check if the media element can handle a source natively.\n *\n * @param {Tech~SourceObject} source\n *         The source object\n *\n * @param {Object} [options]\n *         Options to be passed to the tech.\n *\n * @return {string}\n *         'maybe', or '' (empty string).\n */\nFlash.nativeSourceHandler.canHandleSource = function (source, options) {\n  var type = void 0;\n\n  function guessMimeType(src) {\n    var ext = Url.getFileExtension(src);\n\n    if (ext) {\n      return 'video/' + ext;\n    }\n    return '';\n  }\n\n  if (!source.type) {\n    type = guessMimeType(source.src);\n  } else {\n    // Strip code information from the type because we don't get that specific\n    type = source.type.replace(/;.*/, '').toLowerCase();\n  }\n\n  return Flash.nativeSourceHandler.canPlayType(type);\n};\n\n/**\n * Pass the source to the swf.\n *\n * @param {Tech~SourceObject} source\n *        The source object\n *\n * @param {Flash} tech\n *        The instance of the Flash tech\n *\n * @param {Object} [options]\n *        The options to pass to the source\n */\nFlash.nativeSourceHandler.handleSource = function (source, tech, options) {\n  tech.setSrc(source.src);\n};\n\n/**\n * noop for native source handler dispose, as cleanup will happen automatically.\n */\nFlash.nativeSourceHandler.dispose = function () {};\n\n// Register the native source handler\nFlash.registerSourceHandler(Flash.nativeSourceHandler);\n\n/**\n * Flash supported mime types.\n *\n * @constant {Object}\n */\nFlash.formats = {\n  'video/flv': 'FLV',\n  'video/x-flv': 'FLV',\n  'video/mp4': 'MP4',\n  'video/m4v': 'MP4'\n};\n\n/**\n * Called when the the swf is \"ready\", and makes sure that the swf is really\n * ready using {@link Flash#checkReady}\n */\nFlash.onReady = function (currSwf) {\n  var el = Dom.getEl(currSwf);\n  var tech = el && el.tech;\n\n  // if there is no el then the tech has been disposed\n  // and the tech element was removed from the player div\n  if (tech && tech.el()) {\n    // check that the flash object is really ready\n    Flash.checkReady(tech);\n  }\n};\n\n/**\n * The SWF isn't always ready when it says it is. Sometimes the API functions still\n * need to be added to the object. If it's not ready, we set a timeout to check again\n * shortly.\n *\n * @param {Flash} tech\n *        The instance of the flash tech to check.\n */\nFlash.checkReady = function (tech) {\n  // stop worrying if the tech has been disposed\n  if (!tech.el()) {\n    return;\n  }\n\n  // check if API property exists\n  if (tech.el().vjs_getProperty) {\n    // tell tech it's ready\n    tech.triggerReady();\n  } else {\n    // wait longer\n    this.setTimeout(function () {\n      Flash.checkReady(tech);\n    }, 50);\n  }\n};\n\n/**\n * Trigger events from the swf on the Flash Tech.\n *\n * @param {number} swfID\n *        The id of the swf that had the event\n *\n * @param {string} eventName\n *        The name of the event to trigger\n */\nFlash.onEvent = function (swfID, eventName) {\n  var tech = Dom.getEl(swfID).tech;\n  var args = Array.prototype.slice.call(arguments, 2);\n\n  // dispatch Flash events asynchronously for two reasons:\n  // - Flash swallows any exceptions generated by javascript it\n  //   invokes\n  // - Flash is suspended until the javascript returns which may cause\n  //   playback performance issues\n  tech.setTimeout(function () {\n    tech.trigger(eventName, args);\n  }, 1);\n};\n\n/**\n * Log errors from the swf on the Flash tech.\n *\n * @param {number} swfID\n *        The id of the swf that had an error.\n *\n * @param {string} The error string\n *        The error to set on the Flash Tech.\n *\n * @return {MediaError|undefined}\n *          - Returns a MediaError when err is 'srcnotfound'\n *          - Returns undefined otherwise.\n */\nFlash.onError = function (swfID, err) {\n  var tech = Dom.getEl(swfID).tech;\n\n  // trigger MEDIA_ERR_SRC_NOT_SUPPORTED\n  if (err === 'srcnotfound') {\n    return tech.error(4);\n  }\n\n  // trigger a custom error\n  tech.error('FLASH: ' + err);\n};\n\n/**\n * Get the current version of Flash that is in use on the page.\n *\n * @return {Array}\n *          an array of versions that are available.\n */\nFlash.version = function () {\n  var version = '0,0,0';\n\n  // IE\n  try {\n    version = new _window2['default'].ActiveXObject('ShockwaveFlash.ShockwaveFlash').GetVariable('$version').replace(/\\D+/g, ',').match(/^,?(.+),?$/)[1];\n\n    // other browsers\n  } catch (e) {\n    try {\n      if (navigator.mimeTypes['application/x-shockwave-flash'].enabledPlugin) {\n        version = (navigator.plugins['Shockwave Flash 2.0'] || navigator.plugins['Shockwave Flash']).description.replace(/\\D+/g, ',').match(/^,?(.+),?$/)[1];\n      }\n    } catch (err) {\n      // satisfy linter\n    }\n  }\n  return version.split(',');\n};\n\n/**\n * Only use for non-iframe embeds.\n *\n * @param {Object} swf\n *        The videojs-swf object.\n *\n * @param {Object} flashVars\n *        Names and values to use as flash option variables.\n *\n * @param {Object} params\n *        Style parameters to set on the object.\n *\n * @param {Object} attributes\n *        Attributes to set on the element.\n *\n * @return {Element}\n *          The embeded Flash DOM element.\n */\nFlash.embed = function (swf, flashVars, params, attributes) {\n  var code = Flash.getEmbedCode(swf, flashVars, params, attributes);\n\n  // Get element by embedding code and retrieving created element\n  var obj = Dom.createEl('div', { innerHTML: code }).childNodes[0];\n\n  return obj;\n};\n\n/**\n * Only use for non-iframe embeds.\n *\n * @param {Object} swf\n *        The videojs-swf object.\n *\n * @param {Object} flashVars\n *        Names and values to use as flash option variables.\n *\n * @param {Object} params\n *        Style parameters to set on the object.\n *\n * @param {Object} attributes\n *        Attributes to set on the element.\n *\n * @return {Element}\n *          The embeded Flash DOM element.\n */\nFlash.getEmbedCode = function (swf, flashVars, params, attributes) {\n  var objTag = '<object type=\"application/x-shockwave-flash\" ';\n  var flashVarsString = '';\n  var paramsString = '';\n  var attrsString = '';\n\n  // Convert flash vars to string\n  if (flashVars) {\n    Object.getOwnPropertyNames(flashVars).forEach(function (key) {\n      flashVarsString += key + '=' + flashVars[key] + '&amp;';\n    });\n  }\n\n  // Add swf, flashVars, and other default params\n  params = (0, _obj.assign)({\n    movie: swf,\n    flashvars: flashVarsString,\n    // Required to talk to swf\n    allowScriptAccess: 'always',\n    // All should be default, but having security issues.\n    allowNetworking: 'all'\n  }, params);\n\n  // Create param tags string\n  Object.getOwnPropertyNames(params).forEach(function (key) {\n    paramsString += '<param name=\"' + key + '\" value=\"' + params[key] + '\" />';\n  });\n\n  attributes = (0, _obj.assign)({\n    // Add swf to attributes (need both for IE and Others to work)\n    data: swf,\n\n    // Default to 100% width/height\n    width: '100%',\n    height: '100%'\n\n  }, attributes);\n\n  // Create Attributes string\n  Object.getOwnPropertyNames(attributes).forEach(function (key) {\n    attrsString += key + '=\"' + attributes[key] + '\" ';\n  });\n\n  return '' + objTag + attrsString + '>' + paramsString + '</object>';\n};\n\n// Run Flash through the RTMP decorator\n(0, _flashRtmp2['default'])(Flash);\n\n_component2['default'].registerComponent('Flash', Flash);\n_tech2['default'].registerTech('Flash', Flash);\nexports['default'] = Flash;\n"],"mappings":"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ACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AA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"},"metadata":{},"sourceType":"script","externalDependencies":[]}