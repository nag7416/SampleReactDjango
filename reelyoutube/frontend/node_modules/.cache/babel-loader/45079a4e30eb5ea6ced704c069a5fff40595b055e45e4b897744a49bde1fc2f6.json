{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nvar _dom = require('./utils/dom');\nvar Dom = _interopRequireWildcard(_dom);\nvar _fn = require('./utils/fn');\nvar Fn = _interopRequireWildcard(_fn);\nvar _component = require('./component');\nvar _component2 = _interopRequireDefault(_component);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n    newObj['default'] = obj;\n    return newObj;\n  }\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n} /**\n   * @file modal-dialog.js\n   */\n\nvar MODAL_CLASS_NAME = 'vjs-modal-dialog';\nvar ESC = 27;\n\n/**\n * The `ModalDialog` displays over the video and its controls, which blocks\n * interaction with the player until it is closed.\n *\n * Modal dialogs include a \"Close\" button and will close when that button\n * is activated - or when ESC is pressed anywhere.\n *\n * @extends Component\n */\n\nvar ModalDialog = function (_Component) {\n  _inherits(ModalDialog, _Component);\n\n  /**\n   * Create an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @param {Mixed} [options.content=undefined]\n   *        Provide customized content for this modal.\n   *\n   * @param {string} [options.description]\n   *        A text description for the modal, primarily for accessibility.\n   *\n   * @param {boolean} [options.fillAlways=false]\n   *        Normally, modals are automatically filled only the first time\n   *        they open. This tells the modal to refresh its content\n   *        every time it opens.\n   *\n   * @param {string} [options.label]\n   *        A text label for the modal, primarily for accessibility.\n   *\n   * @param {boolean} [options.temporary=true]\n   *        If `true`, the modal can only be opened once; it will be\n   *        disposed as soon as it's closed.\n   *\n   * @param {boolean} [options.uncloseable=false]\n   *        If `true`, the user will not be able to close the modal\n   *        through the UI in the normal ways. Programmatic closing is\n   *        still possible.\n   */\n  function ModalDialog(player, options) {\n    _classCallCheck(this, ModalDialog);\n    var _this = _possibleConstructorReturn(this, _Component.call(this, player, options));\n    _this.opened_ = _this.hasBeenOpened_ = _this.hasBeenFilled_ = false;\n    _this.closeable(!_this.options_.uncloseable);\n    _this.content(_this.options_.content);\n\n    // Make sure the contentEl is defined AFTER any children are initialized\n    // because we only want the contents of the modal in the contentEl\n    // (not the UI elements like the close button).\n    _this.contentEl_ = Dom.createEl('div', {\n      className: MODAL_CLASS_NAME + '-content'\n    }, {\n      role: 'document'\n    });\n    _this.descEl_ = Dom.createEl('p', {\n      className: MODAL_CLASS_NAME + '-description vjs-offscreen',\n      id: _this.el().getAttribute('aria-describedby')\n    });\n    Dom.textContent(_this.descEl_, _this.description());\n    _this.el_.appendChild(_this.descEl_);\n    _this.el_.appendChild(_this.contentEl_);\n    return _this;\n  }\n\n  /**\n   * Create the `ModalDialog`'s DOM element\n   *\n   * @return {Element}\n   *         The DOM element that gets created.\n   */\n\n  ModalDialog.prototype.createEl = function createEl() {\n    return _Component.prototype.createEl.call(this, 'div', {\n      className: this.buildCSSClass(),\n      tabIndex: -1\n    }, {\n      'aria-describedby': this.id() + '_description',\n      'aria-hidden': 'true',\n      'aria-label': this.label(),\n      'role': 'dialog'\n    });\n  };\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n\n  ModalDialog.prototype.buildCSSClass = function buildCSSClass() {\n    return MODAL_CLASS_NAME + ' vjs-hidden ' + _Component.prototype.buildCSSClass.call(this);\n  };\n\n  /**\n   * Handles `keydown` events on the document, looking for ESC, which closes\n   * the modal.\n   *\n   * @param {EventTarget~Event} e\n   *        The keypress that triggered this event.\n   *\n   * @listens keydown\n   */\n\n  ModalDialog.prototype.handleKeyPress = function handleKeyPress(e) {\n    if (e.which === ESC && this.closeable()) {\n      this.close();\n    }\n  };\n\n  /**\n   * Returns the label string for this modal. Primarily used for accessibility.\n   *\n   * @return {string}\n   *         the localized or raw label of this modal.\n   */\n\n  ModalDialog.prototype.label = function label() {\n    return this.options_.label || this.localize('Modal Window');\n  };\n\n  /**\n   * Returns the description string for this modal. Primarily used for\n   * accessibility.\n   *\n   * @return {string}\n   *         The localized or raw description of this modal.\n   */\n\n  ModalDialog.prototype.description = function description() {\n    var desc = this.options_.description || this.localize('This is a modal window.');\n\n    // Append a universal closeability message if the modal is closeable.\n    if (this.closeable()) {\n      desc += ' ' + this.localize('This modal can be closed by pressing the Escape key or activating the close button.');\n    }\n    return desc;\n  };\n\n  /**\n   * Opens the modal.\n   *\n   * @fires ModalDialog#beforemodalopen\n   * @fires ModalDialog#modalopen\n   *\n   * @return {ModalDialog}\n   *         Returns itself; method can be chained.\n   */\n\n  ModalDialog.prototype.open = function open() {\n    if (!this.opened_) {\n      var player = this.player();\n\n      /**\n       * Fired just before a `ModalDialog` is opened.\n       *\n       * @event ModalDialog#beforemodalopen\n       * @type {EventTarget~Event}\n       */\n      this.trigger('beforemodalopen');\n      this.opened_ = true;\n\n      // Fill content if the modal has never opened before and\n      // never been filled.\n      if (this.options_.fillAlways || !this.hasBeenOpened_ && !this.hasBeenFilled_) {\n        this.fill();\n      }\n\n      // If the player was playing, pause it and take note of its previously\n      // playing state.\n      this.wasPlaying_ = !player.paused();\n      if (this.options_.pauseOnOpen && this.wasPlaying_) {\n        player.pause();\n      }\n      if (this.closeable()) {\n        this.on(this.el_.ownerDocument, 'keydown', Fn.bind(this, this.handleKeyPress));\n      }\n      player.controls(false);\n      this.show();\n      this.el().setAttribute('aria-hidden', 'false');\n\n      /**\n       * Fired just after a `ModalDialog` is opened.\n       *\n       * @event ModalDialog#modalopen\n       * @type {EventTarget~Event}\n       */\n      this.trigger('modalopen');\n      this.hasBeenOpened_ = true;\n    }\n    return this;\n  };\n\n  /**\n   * If the `ModalDialog` is currently open or closed.\n   *\n   * @param  {boolean} [value]\n   *         If given, it will open (`true`) or close (`false`) the modal.\n   *\n   * @return {boolean}\n   *         the current open state of the modaldialog\n   */\n\n  ModalDialog.prototype.opened = function opened(value) {\n    if (typeof value === 'boolean') {\n      this[value ? 'open' : 'close']();\n    }\n    return this.opened_;\n  };\n\n  /**\n   * Closes the modal, does nothing if the `ModalDialog` is\n   * not open.\n   *\n   * @fires ModalDialog#beforemodalclose\n   * @fires ModalDialog#modalclose\n   *\n   * @return {ModalDialog}\n   *         Returns itself; method can be chained.\n   */\n\n  ModalDialog.prototype.close = function close() {\n    if (this.opened_) {\n      var player = this.player();\n\n      /**\n       * Fired just before a `ModalDialog` is closed.\n       *\n       * @event ModalDialog#beforemodalclose\n       * @type {EventTarget~Event}\n       */\n      this.trigger('beforemodalclose');\n      this.opened_ = false;\n      if (this.wasPlaying_ && this.options_.pauseOnOpen) {\n        player.play();\n      }\n      if (this.closeable()) {\n        this.off(this.el_.ownerDocument, 'keydown', Fn.bind(this, this.handleKeyPress));\n      }\n      player.controls(true);\n      this.hide();\n      this.el().setAttribute('aria-hidden', 'true');\n\n      /**\n       * Fired just after a `ModalDialog` is closed.\n       *\n       * @event ModalDialog#modalclose\n       * @type {EventTarget~Event}\n       */\n      this.trigger('modalclose');\n      if (this.options_.temporary) {\n        this.dispose();\n      }\n    }\n    return this;\n  };\n\n  /**\n   * Check to see if the `ModalDialog` is closeable via the UI.\n   *\n   * @param  {boolean} [value]\n   *         If given as a boolean, it will set the `closeable` option.\n   *\n   * @return {boolean}\n   *         Returns the final value of the closable option.\n   */\n\n  ModalDialog.prototype.closeable = function closeable(value) {\n    if (typeof value === 'boolean') {\n      var closeable = this.closeable_ = !!value;\n      var close = this.getChild('closeButton');\n\n      // If this is being made closeable and has no close button, add one.\n      if (closeable && !close) {\n        // The close button should be a child of the modal - not its\n        // content element, so temporarily change the content element.\n        var temp = this.contentEl_;\n        this.contentEl_ = this.el_;\n        close = this.addChild('closeButton', {\n          controlText: 'Close Modal Dialog'\n        });\n        this.contentEl_ = temp;\n        this.on(close, 'close', this.close);\n      }\n\n      // If this is being made uncloseable and has a close button, remove it.\n      if (!closeable && close) {\n        this.off(close, 'close', this.close);\n        this.removeChild(close);\n        close.dispose();\n      }\n    }\n    return this.closeable_;\n  };\n\n  /**\n   * Fill the modal's content element with the modal's \"content\" option.\n   * The content element will be emptied before this change takes place.\n   *\n   * @return {ModalDialog}\n   *         Returns itself; method can be chained.\n   */\n\n  ModalDialog.prototype.fill = function fill() {\n    return this.fillWith(this.content());\n  };\n\n  /**\n   * Fill the modal's content element with arbitrary content.\n   * The content element will be emptied before this change takes place.\n   *\n   * @fires ModalDialog#beforemodalfill\n   * @fires ModalDialog#modalfill\n   *\n   * @param  {Mixed} [content]\n   *         The same rules apply to this as apply to the `content` option.\n   *\n   * @return {ModalDialog}\n   *         Returns itself; method can be chained.\n   */\n\n  ModalDialog.prototype.fillWith = function fillWith(content) {\n    var contentEl = this.contentEl();\n    var parentEl = contentEl.parentNode;\n    var nextSiblingEl = contentEl.nextSibling;\n\n    /**\n     * Fired just before a `ModalDialog` is filled with content.\n     *\n     * @event ModalDialog#beforemodalfill\n     * @type {EventTarget~Event}\n     */\n    this.trigger('beforemodalfill');\n    this.hasBeenFilled_ = true;\n\n    // Detach the content element from the DOM before performing\n    // manipulation to avoid modifying the live DOM multiple times.\n    parentEl.removeChild(contentEl);\n    this.empty();\n    Dom.insertContent(contentEl, content);\n    /**\n     * Fired just after a `ModalDialog` is filled with content.\n     *\n     * @event ModalDialog#modalfill\n     * @type {EventTarget~Event}\n     */\n    this.trigger('modalfill');\n\n    // Re-inject the re-filled content element.\n    if (nextSiblingEl) {\n      parentEl.insertBefore(contentEl, nextSiblingEl);\n    } else {\n      parentEl.appendChild(contentEl);\n    }\n    return this;\n  };\n\n  /**\n   * Empties the content element. This happens anytime the modal is filled.\n   *\n   * @fires ModalDialog#beforemodalempty\n   * @fires ModalDialog#modalempty\n   *\n   * @return {ModalDialog}\n   *         Returns itself; method can be chained.\n   */\n\n  ModalDialog.prototype.empty = function empty() {\n    /**\n     * Fired just before a `ModalDialog` is emptied.\n     *\n     * @event ModalDialog#beforemodalempty\n     * @type {EventTarget~Event}\n     */\n    this.trigger('beforemodalempty');\n    Dom.emptyEl(this.contentEl());\n\n    /**\n     * Fired just after a `ModalDialog` is emptied.\n     *\n     * @event ModalDialog#modalempty\n     * @type {EventTarget~Event}\n     */\n    this.trigger('modalempty');\n    return this;\n  };\n\n  /**\n   * Gets or sets the modal content, which gets normalized before being\n   * rendered into the DOM.\n   *\n   * This does not update the DOM or fill the modal, but it is called during\n   * that process.\n   *\n   * @param  {Mixed} [value]\n   *         If defined, sets the internal content value to be used on the\n   *         next call(s) to `fill`. This value is normalized before being\n   *         inserted. To \"clear\" the internal content value, pass `null`.\n   *\n   * @return {Mixed}\n   *         The current content of the modal dialog\n   */\n\n  ModalDialog.prototype.content = function content(value) {\n    if (typeof value !== 'undefined') {\n      this.content_ = value;\n    }\n    return this.content_;\n  };\n  return ModalDialog;\n}(_component2['default']);\n\n/**\n * Default options for `ModalDialog` default options.\n *\n * @type {Object}\n * @private\n */\n\nModalDialog.prototype.options_ = {\n  pauseOnOpen: true,\n  temporary: true\n};\n_component2['default'].registerComponent('ModalDialog', ModalDialog);\nexports['default'] = ModalDialog;","map":{"version":3,"names":["exports","__esModule","_dom","require","Dom","_interopRequireWildcard","_fn","Fn","_component","_component2","_interopRequireDefault","obj","newObj","key","Object","prototype","hasOwnProperty","call","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","MODAL_CLASS_NAME","ESC","ModalDialog","_Component","player","options","_this","opened_","hasBeenOpened_","hasBeenFilled_","closeable","options_","uncloseable","content","contentEl_","createEl","className","role","descEl_","id","el","getAttribute","textContent","description","el_","appendChild","buildCSSClass","tabIndex","label","handleKeyPress","e","which","close","localize","desc","open","trigger","fillAlways","fill","wasPlaying_","paused","pauseOnOpen","pause","on","ownerDocument","bind","controls","show","setAttribute","opened","play","off","hide","temporary","dispose","closeable_","getChild","temp","addChild","controlText","removeChild","fillWith","contentEl","parentEl","parentNode","nextSiblingEl","nextSibling","empty","insertContent","insertBefore","emptyEl","content_","registerComponent"],"sources":["C:/Users/babu7/OneDrive/Desktop/djangoyoutube2/reelyoutube/frontend/node_modules/videojs-react/node_modules/video.js/es5/modal-dialog.js"],"sourcesContent":["'use strict';\n\nexports.__esModule = true;\n\nvar _dom = require('./utils/dom');\n\nvar Dom = _interopRequireWildcard(_dom);\n\nvar _fn = require('./utils/fn');\n\nvar Fn = _interopRequireWildcard(_fn);\n\nvar _component = require('./component');\n\nvar _component2 = _interopRequireDefault(_component);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file modal-dialog.js\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n\nvar MODAL_CLASS_NAME = 'vjs-modal-dialog';\nvar ESC = 27;\n\n/**\n * The `ModalDialog` displays over the video and its controls, which blocks\n * interaction with the player until it is closed.\n *\n * Modal dialogs include a \"Close\" button and will close when that button\n * is activated - or when ESC is pressed anywhere.\n *\n * @extends Component\n */\n\nvar ModalDialog = function (_Component) {\n  _inherits(ModalDialog, _Component);\n\n  /**\n   * Create an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @param {Mixed} [options.content=undefined]\n   *        Provide customized content for this modal.\n   *\n   * @param {string} [options.description]\n   *        A text description for the modal, primarily for accessibility.\n   *\n   * @param {boolean} [options.fillAlways=false]\n   *        Normally, modals are automatically filled only the first time\n   *        they open. This tells the modal to refresh its content\n   *        every time it opens.\n   *\n   * @param {string} [options.label]\n   *        A text label for the modal, primarily for accessibility.\n   *\n   * @param {boolean} [options.temporary=true]\n   *        If `true`, the modal can only be opened once; it will be\n   *        disposed as soon as it's closed.\n   *\n   * @param {boolean} [options.uncloseable=false]\n   *        If `true`, the user will not be able to close the modal\n   *        through the UI in the normal ways. Programmatic closing is\n   *        still possible.\n   */\n  function ModalDialog(player, options) {\n    _classCallCheck(this, ModalDialog);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, player, options));\n\n    _this.opened_ = _this.hasBeenOpened_ = _this.hasBeenFilled_ = false;\n\n    _this.closeable(!_this.options_.uncloseable);\n    _this.content(_this.options_.content);\n\n    // Make sure the contentEl is defined AFTER any children are initialized\n    // because we only want the contents of the modal in the contentEl\n    // (not the UI elements like the close button).\n    _this.contentEl_ = Dom.createEl('div', {\n      className: MODAL_CLASS_NAME + '-content'\n    }, {\n      role: 'document'\n    });\n\n    _this.descEl_ = Dom.createEl('p', {\n      className: MODAL_CLASS_NAME + '-description vjs-offscreen',\n      id: _this.el().getAttribute('aria-describedby')\n    });\n\n    Dom.textContent(_this.descEl_, _this.description());\n    _this.el_.appendChild(_this.descEl_);\n    _this.el_.appendChild(_this.contentEl_);\n    return _this;\n  }\n\n  /**\n   * Create the `ModalDialog`'s DOM element\n   *\n   * @return {Element}\n   *         The DOM element that gets created.\n   */\n\n\n  ModalDialog.prototype.createEl = function createEl() {\n    return _Component.prototype.createEl.call(this, 'div', {\n      className: this.buildCSSClass(),\n      tabIndex: -1\n    }, {\n      'aria-describedby': this.id() + '_description',\n      'aria-hidden': 'true',\n      'aria-label': this.label(),\n      'role': 'dialog'\n    });\n  };\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n\n\n  ModalDialog.prototype.buildCSSClass = function buildCSSClass() {\n    return MODAL_CLASS_NAME + ' vjs-hidden ' + _Component.prototype.buildCSSClass.call(this);\n  };\n\n  /**\n   * Handles `keydown` events on the document, looking for ESC, which closes\n   * the modal.\n   *\n   * @param {EventTarget~Event} e\n   *        The keypress that triggered this event.\n   *\n   * @listens keydown\n   */\n\n\n  ModalDialog.prototype.handleKeyPress = function handleKeyPress(e) {\n    if (e.which === ESC && this.closeable()) {\n      this.close();\n    }\n  };\n\n  /**\n   * Returns the label string for this modal. Primarily used for accessibility.\n   *\n   * @return {string}\n   *         the localized or raw label of this modal.\n   */\n\n\n  ModalDialog.prototype.label = function label() {\n    return this.options_.label || this.localize('Modal Window');\n  };\n\n  /**\n   * Returns the description string for this modal. Primarily used for\n   * accessibility.\n   *\n   * @return {string}\n   *         The localized or raw description of this modal.\n   */\n\n\n  ModalDialog.prototype.description = function description() {\n    var desc = this.options_.description || this.localize('This is a modal window.');\n\n    // Append a universal closeability message if the modal is closeable.\n    if (this.closeable()) {\n      desc += ' ' + this.localize('This modal can be closed by pressing the Escape key or activating the close button.');\n    }\n\n    return desc;\n  };\n\n  /**\n   * Opens the modal.\n   *\n   * @fires ModalDialog#beforemodalopen\n   * @fires ModalDialog#modalopen\n   *\n   * @return {ModalDialog}\n   *         Returns itself; method can be chained.\n   */\n\n\n  ModalDialog.prototype.open = function open() {\n    if (!this.opened_) {\n      var player = this.player();\n\n      /**\n       * Fired just before a `ModalDialog` is opened.\n       *\n       * @event ModalDialog#beforemodalopen\n       * @type {EventTarget~Event}\n       */\n      this.trigger('beforemodalopen');\n      this.opened_ = true;\n\n      // Fill content if the modal has never opened before and\n      // never been filled.\n      if (this.options_.fillAlways || !this.hasBeenOpened_ && !this.hasBeenFilled_) {\n        this.fill();\n      }\n\n      // If the player was playing, pause it and take note of its previously\n      // playing state.\n      this.wasPlaying_ = !player.paused();\n\n      if (this.options_.pauseOnOpen && this.wasPlaying_) {\n        player.pause();\n      }\n\n      if (this.closeable()) {\n        this.on(this.el_.ownerDocument, 'keydown', Fn.bind(this, this.handleKeyPress));\n      }\n\n      player.controls(false);\n      this.show();\n      this.el().setAttribute('aria-hidden', 'false');\n\n      /**\n       * Fired just after a `ModalDialog` is opened.\n       *\n       * @event ModalDialog#modalopen\n       * @type {EventTarget~Event}\n       */\n      this.trigger('modalopen');\n      this.hasBeenOpened_ = true;\n    }\n    return this;\n  };\n\n  /**\n   * If the `ModalDialog` is currently open or closed.\n   *\n   * @param  {boolean} [value]\n   *         If given, it will open (`true`) or close (`false`) the modal.\n   *\n   * @return {boolean}\n   *         the current open state of the modaldialog\n   */\n\n\n  ModalDialog.prototype.opened = function opened(value) {\n    if (typeof value === 'boolean') {\n      this[value ? 'open' : 'close']();\n    }\n    return this.opened_;\n  };\n\n  /**\n   * Closes the modal, does nothing if the `ModalDialog` is\n   * not open.\n   *\n   * @fires ModalDialog#beforemodalclose\n   * @fires ModalDialog#modalclose\n   *\n   * @return {ModalDialog}\n   *         Returns itself; method can be chained.\n   */\n\n\n  ModalDialog.prototype.close = function close() {\n    if (this.opened_) {\n      var player = this.player();\n\n      /**\n       * Fired just before a `ModalDialog` is closed.\n       *\n       * @event ModalDialog#beforemodalclose\n       * @type {EventTarget~Event}\n       */\n      this.trigger('beforemodalclose');\n      this.opened_ = false;\n\n      if (this.wasPlaying_ && this.options_.pauseOnOpen) {\n        player.play();\n      }\n\n      if (this.closeable()) {\n        this.off(this.el_.ownerDocument, 'keydown', Fn.bind(this, this.handleKeyPress));\n      }\n\n      player.controls(true);\n      this.hide();\n      this.el().setAttribute('aria-hidden', 'true');\n\n      /**\n       * Fired just after a `ModalDialog` is closed.\n       *\n       * @event ModalDialog#modalclose\n       * @type {EventTarget~Event}\n       */\n      this.trigger('modalclose');\n\n      if (this.options_.temporary) {\n        this.dispose();\n      }\n    }\n    return this;\n  };\n\n  /**\n   * Check to see if the `ModalDialog` is closeable via the UI.\n   *\n   * @param  {boolean} [value]\n   *         If given as a boolean, it will set the `closeable` option.\n   *\n   * @return {boolean}\n   *         Returns the final value of the closable option.\n   */\n\n\n  ModalDialog.prototype.closeable = function closeable(value) {\n    if (typeof value === 'boolean') {\n      var closeable = this.closeable_ = !!value;\n      var close = this.getChild('closeButton');\n\n      // If this is being made closeable and has no close button, add one.\n      if (closeable && !close) {\n\n        // The close button should be a child of the modal - not its\n        // content element, so temporarily change the content element.\n        var temp = this.contentEl_;\n\n        this.contentEl_ = this.el_;\n        close = this.addChild('closeButton', { controlText: 'Close Modal Dialog' });\n        this.contentEl_ = temp;\n        this.on(close, 'close', this.close);\n      }\n\n      // If this is being made uncloseable and has a close button, remove it.\n      if (!closeable && close) {\n        this.off(close, 'close', this.close);\n        this.removeChild(close);\n        close.dispose();\n      }\n    }\n    return this.closeable_;\n  };\n\n  /**\n   * Fill the modal's content element with the modal's \"content\" option.\n   * The content element will be emptied before this change takes place.\n   *\n   * @return {ModalDialog}\n   *         Returns itself; method can be chained.\n   */\n\n\n  ModalDialog.prototype.fill = function fill() {\n    return this.fillWith(this.content());\n  };\n\n  /**\n   * Fill the modal's content element with arbitrary content.\n   * The content element will be emptied before this change takes place.\n   *\n   * @fires ModalDialog#beforemodalfill\n   * @fires ModalDialog#modalfill\n   *\n   * @param  {Mixed} [content]\n   *         The same rules apply to this as apply to the `content` option.\n   *\n   * @return {ModalDialog}\n   *         Returns itself; method can be chained.\n   */\n\n\n  ModalDialog.prototype.fillWith = function fillWith(content) {\n    var contentEl = this.contentEl();\n    var parentEl = contentEl.parentNode;\n    var nextSiblingEl = contentEl.nextSibling;\n\n    /**\n     * Fired just before a `ModalDialog` is filled with content.\n     *\n     * @event ModalDialog#beforemodalfill\n     * @type {EventTarget~Event}\n     */\n    this.trigger('beforemodalfill');\n    this.hasBeenFilled_ = true;\n\n    // Detach the content element from the DOM before performing\n    // manipulation to avoid modifying the live DOM multiple times.\n    parentEl.removeChild(contentEl);\n    this.empty();\n    Dom.insertContent(contentEl, content);\n    /**\n     * Fired just after a `ModalDialog` is filled with content.\n     *\n     * @event ModalDialog#modalfill\n     * @type {EventTarget~Event}\n     */\n    this.trigger('modalfill');\n\n    // Re-inject the re-filled content element.\n    if (nextSiblingEl) {\n      parentEl.insertBefore(contentEl, nextSiblingEl);\n    } else {\n      parentEl.appendChild(contentEl);\n    }\n\n    return this;\n  };\n\n  /**\n   * Empties the content element. This happens anytime the modal is filled.\n   *\n   * @fires ModalDialog#beforemodalempty\n   * @fires ModalDialog#modalempty\n   *\n   * @return {ModalDialog}\n   *         Returns itself; method can be chained.\n   */\n\n\n  ModalDialog.prototype.empty = function empty() {\n    /**\n     * Fired just before a `ModalDialog` is emptied.\n     *\n     * @event ModalDialog#beforemodalempty\n     * @type {EventTarget~Event}\n     */\n    this.trigger('beforemodalempty');\n    Dom.emptyEl(this.contentEl());\n\n    /**\n     * Fired just after a `ModalDialog` is emptied.\n     *\n     * @event ModalDialog#modalempty\n     * @type {EventTarget~Event}\n     */\n    this.trigger('modalempty');\n    return this;\n  };\n\n  /**\n   * Gets or sets the modal content, which gets normalized before being\n   * rendered into the DOM.\n   *\n   * This does not update the DOM or fill the modal, but it is called during\n   * that process.\n   *\n   * @param  {Mixed} [value]\n   *         If defined, sets the internal content value to be used on the\n   *         next call(s) to `fill`. This value is normalized before being\n   *         inserted. To \"clear\" the internal content value, pass `null`.\n   *\n   * @return {Mixed}\n   *         The current content of the modal dialog\n   */\n\n\n  ModalDialog.prototype.content = function content(value) {\n    if (typeof value !== 'undefined') {\n      this.content_ = value;\n    }\n    return this.content_;\n  };\n\n  return ModalDialog;\n}(_component2['default']);\n\n/**\n * Default options for `ModalDialog` default options.\n *\n * @type {Object}\n * @private\n */\n\n\nModalDialog.prototype.options_ = {\n  pauseOnOpen: true,\n  temporary: true\n};\n\n_component2['default'].registerComponent('ModalDialog', ModalDialog);\nexports['default'] = ModalDialog;\n"],"mappings":"AAAA,YAAY;;AAEZA,OAAO,CAACC,UAAU,GAAG,IAAI;AAEzB,IAAIC,IAAI,GAAGC,OAAO,CAAC,aAAa,CAAC;AAEjC,IAAIC,GAAG,GAAGC,uBAAuB,CAACH,IAAI,CAAC;AAEvC,IAAII,GAAG,GAAGH,OAAO,CAAC,YAAY,CAAC;AAE/B,IAAII,EAAE,GAAGF,uBAAuB,CAACC,GAAG,CAAC;AAErC,IAAIE,UAAU,GAAGL,OAAO,CAAC,aAAa,CAAC;AAEvC,IAAIM,WAAW,GAAGC,sBAAsB,CAACF,UAAU,CAAC;AAEpD,SAASE,sBAAsBA,CAACC,GAAG,EAAE;EAAE,OAAOA,GAAG,IAAIA,GAAG,CAACV,UAAU,GAAGU,GAAG,GAAG;IAAE,SAAS,EAAEA;EAAI,CAAC;AAAE;AAEhG,SAASN,uBAAuBA,CAACM,GAAG,EAAE;EAAE,IAAIA,GAAG,IAAIA,GAAG,CAACV,UAAU,EAAE;IAAE,OAAOU,GAAG;EAAE,CAAC,MAAM;IAAE,IAAIC,MAAM,GAAG,CAAC,CAAC;IAAE,IAAID,GAAG,IAAI,IAAI,EAAE;MAAE,KAAK,IAAIE,GAAG,IAAIF,GAAG,EAAE;QAAE,IAAIG,MAAM,CAACC,SAAS,CAACC,cAAc,CAACC,IAAI,CAACN,GAAG,EAAEE,GAAG,CAAC,EAAED,MAAM,CAACC,GAAG,CAAC,GAAGF,GAAG,CAACE,GAAG,CAAC;MAAE;IAAE;IAAED,MAAM,CAAC,SAAS,CAAC,GAAGD,GAAG;IAAE,OAAOC,MAAM;EAAE;AAAE;AAE/Q,SAASM,eAAeA,CAACC,QAAQ,EAAEC,WAAW,EAAE;EAAE,IAAI,EAAED,QAAQ,YAAYC,WAAW,CAAC,EAAE;IAAE,MAAM,IAAIC,SAAS,CAAC,mCAAmC,CAAC;EAAE;AAAE;AAExJ,SAASC,0BAA0BA,CAACC,IAAI,EAAEN,IAAI,EAAE;EAAE,IAAI,CAACM,IAAI,EAAE;IAAE,MAAM,IAAIC,cAAc,CAAC,2DAA2D,CAAC;EAAE;EAAE,OAAOP,IAAI,KAAK,OAAOA,IAAI,KAAK,QAAQ,IAAI,OAAOA,IAAI,KAAK,UAAU,CAAC,GAAGA,IAAI,GAAGM,IAAI;AAAE;AAE/O,SAASE,SAASA,CAACC,QAAQ,EAAEC,UAAU,EAAE;EAAE,IAAI,OAAOA,UAAU,KAAK,UAAU,IAAIA,UAAU,KAAK,IAAI,EAAE;IAAE,MAAM,IAAIN,SAAS,CAAC,0DAA0D,GAAG,OAAOM,UAAU,CAAC;EAAE;EAAED,QAAQ,CAACX,SAAS,GAAGD,MAAM,CAACc,MAAM,CAACD,UAAU,IAAIA,UAAU,CAACZ,SAAS,EAAE;IAAEc,WAAW,EAAE;MAAEC,KAAK,EAAEJ,QAAQ;MAAEK,UAAU,EAAE,KAAK;MAAEC,QAAQ,EAAE,IAAI;MAAEC,YAAY,EAAE;IAAK;EAAE,CAAC,CAAC;EAAE,IAAIN,UAAU,EAAEb,MAAM,CAACoB,cAAc,GAAGpB,MAAM,CAACoB,cAAc,CAACR,QAAQ,EAAEC,UAAU,CAAC,GAAGD,QAAQ,CAACS,SAAS,GAAGR,UAAU;AAAE,CAAC,CAAC;AAC/e;AACA;;AAGA,IAAIS,gBAAgB,GAAG,kBAAkB;AACzC,IAAIC,GAAG,GAAG,EAAE;;AAEZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,WAAW,GAAG,UAAUC,UAAU,EAAE;EACtCd,SAAS,CAACa,WAAW,EAAEC,UAAU,CAAC;;EAElC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,SAASD,WAAWA,CAACE,MAAM,EAAEC,OAAO,EAAE;IACpCvB,eAAe,CAAC,IAAI,EAAEoB,WAAW,CAAC;IAElC,IAAII,KAAK,GAAGpB,0BAA0B,CAAC,IAAI,EAAEiB,UAAU,CAACtB,IAAI,CAAC,IAAI,EAAEuB,MAAM,EAAEC,OAAO,CAAC,CAAC;IAEpFC,KAAK,CAACC,OAAO,GAAGD,KAAK,CAACE,cAAc,GAAGF,KAAK,CAACG,cAAc,GAAG,KAAK;IAEnEH,KAAK,CAACI,SAAS,CAAC,CAACJ,KAAK,CAACK,QAAQ,CAACC,WAAW,CAAC;IAC5CN,KAAK,CAACO,OAAO,CAACP,KAAK,CAACK,QAAQ,CAACE,OAAO,CAAC;;IAErC;IACA;IACA;IACAP,KAAK,CAACQ,UAAU,GAAG9C,GAAG,CAAC+C,QAAQ,CAAC,KAAK,EAAE;MACrCC,SAAS,EAAEhB,gBAAgB,GAAG;IAChC,CAAC,EAAE;MACDiB,IAAI,EAAE;IACR,CAAC,CAAC;IAEFX,KAAK,CAACY,OAAO,GAAGlD,GAAG,CAAC+C,QAAQ,CAAC,GAAG,EAAE;MAChCC,SAAS,EAAEhB,gBAAgB,GAAG,4BAA4B;MAC1DmB,EAAE,EAAEb,KAAK,CAACc,EAAE,CAAC,CAAC,CAACC,YAAY,CAAC,kBAAkB;IAChD,CAAC,CAAC;IAEFrD,GAAG,CAACsD,WAAW,CAAChB,KAAK,CAACY,OAAO,EAAEZ,KAAK,CAACiB,WAAW,CAAC,CAAC,CAAC;IACnDjB,KAAK,CAACkB,GAAG,CAACC,WAAW,CAACnB,KAAK,CAACY,OAAO,CAAC;IACpCZ,KAAK,CAACkB,GAAG,CAACC,WAAW,CAACnB,KAAK,CAACQ,UAAU,CAAC;IACvC,OAAOR,KAAK;EACd;;EAEA;AACF;AACA;AACA;AACA;AACA;;EAGEJ,WAAW,CAACvB,SAAS,CAACoC,QAAQ,GAAG,SAASA,QAAQA,CAAA,EAAG;IACnD,OAAOZ,UAAU,CAACxB,SAAS,CAACoC,QAAQ,CAAClC,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE;MACrDmC,SAAS,EAAE,IAAI,CAACU,aAAa,CAAC,CAAC;MAC/BC,QAAQ,EAAE,CAAC;IACb,CAAC,EAAE;MACD,kBAAkB,EAAE,IAAI,CAACR,EAAE,CAAC,CAAC,GAAG,cAAc;MAC9C,aAAa,EAAE,MAAM;MACrB,YAAY,EAAE,IAAI,CAACS,KAAK,CAAC,CAAC;MAC1B,MAAM,EAAE;IACV,CAAC,CAAC;EACJ,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;;EAGE1B,WAAW,CAACvB,SAAS,CAAC+C,aAAa,GAAG,SAASA,aAAaA,CAAA,EAAG;IAC7D,OAAO1B,gBAAgB,GAAG,cAAc,GAAGG,UAAU,CAACxB,SAAS,CAAC+C,aAAa,CAAC7C,IAAI,CAAC,IAAI,CAAC;EAC1F,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGEqB,WAAW,CAACvB,SAAS,CAACkD,cAAc,GAAG,SAASA,cAAcA,CAACC,CAAC,EAAE;IAChE,IAAIA,CAAC,CAACC,KAAK,KAAK9B,GAAG,IAAI,IAAI,CAACS,SAAS,CAAC,CAAC,EAAE;MACvC,IAAI,CAACsB,KAAK,CAAC,CAAC;IACd;EACF,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;;EAGE9B,WAAW,CAACvB,SAAS,CAACiD,KAAK,GAAG,SAASA,KAAKA,CAAA,EAAG;IAC7C,OAAO,IAAI,CAACjB,QAAQ,CAACiB,KAAK,IAAI,IAAI,CAACK,QAAQ,CAAC,cAAc,CAAC;EAC7D,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;EAGE/B,WAAW,CAACvB,SAAS,CAAC4C,WAAW,GAAG,SAASA,WAAWA,CAAA,EAAG;IACzD,IAAIW,IAAI,GAAG,IAAI,CAACvB,QAAQ,CAACY,WAAW,IAAI,IAAI,CAACU,QAAQ,CAAC,yBAAyB,CAAC;;IAEhF;IACA,IAAI,IAAI,CAACvB,SAAS,CAAC,CAAC,EAAE;MACpBwB,IAAI,IAAI,GAAG,GAAG,IAAI,CAACD,QAAQ,CAAC,qFAAqF,CAAC;IACpH;IAEA,OAAOC,IAAI;EACb,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGEhC,WAAW,CAACvB,SAAS,CAACwD,IAAI,GAAG,SAASA,IAAIA,CAAA,EAAG;IAC3C,IAAI,CAAC,IAAI,CAAC5B,OAAO,EAAE;MACjB,IAAIH,MAAM,GAAG,IAAI,CAACA,MAAM,CAAC,CAAC;;MAE1B;AACN;AACA;AACA;AACA;AACA;MACM,IAAI,CAACgC,OAAO,CAAC,iBAAiB,CAAC;MAC/B,IAAI,CAAC7B,OAAO,GAAG,IAAI;;MAEnB;MACA;MACA,IAAI,IAAI,CAACI,QAAQ,CAAC0B,UAAU,IAAI,CAAC,IAAI,CAAC7B,cAAc,IAAI,CAAC,IAAI,CAACC,cAAc,EAAE;QAC5E,IAAI,CAAC6B,IAAI,CAAC,CAAC;MACb;;MAEA;MACA;MACA,IAAI,CAACC,WAAW,GAAG,CAACnC,MAAM,CAACoC,MAAM,CAAC,CAAC;MAEnC,IAAI,IAAI,CAAC7B,QAAQ,CAAC8B,WAAW,IAAI,IAAI,CAACF,WAAW,EAAE;QACjDnC,MAAM,CAACsC,KAAK,CAAC,CAAC;MAChB;MAEA,IAAI,IAAI,CAAChC,SAAS,CAAC,CAAC,EAAE;QACpB,IAAI,CAACiC,EAAE,CAAC,IAAI,CAACnB,GAAG,CAACoB,aAAa,EAAE,SAAS,EAAEzE,EAAE,CAAC0E,IAAI,CAAC,IAAI,EAAE,IAAI,CAAChB,cAAc,CAAC,CAAC;MAChF;MAEAzB,MAAM,CAAC0C,QAAQ,CAAC,KAAK,CAAC;MACtB,IAAI,CAACC,IAAI,CAAC,CAAC;MACX,IAAI,CAAC3B,EAAE,CAAC,CAAC,CAAC4B,YAAY,CAAC,aAAa,EAAE,OAAO,CAAC;;MAE9C;AACN;AACA;AACA;AACA;AACA;MACM,IAAI,CAACZ,OAAO,CAAC,WAAW,CAAC;MACzB,IAAI,CAAC5B,cAAc,GAAG,IAAI;IAC5B;IACA,OAAO,IAAI;EACb,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGEN,WAAW,CAACvB,SAAS,CAACsE,MAAM,GAAG,SAASA,MAAMA,CAACvD,KAAK,EAAE;IACpD,IAAI,OAAOA,KAAK,KAAK,SAAS,EAAE;MAC9B,IAAI,CAACA,KAAK,GAAG,MAAM,GAAG,OAAO,CAAC,CAAC,CAAC;IAClC;IACA,OAAO,IAAI,CAACa,OAAO;EACrB,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGEL,WAAW,CAACvB,SAAS,CAACqD,KAAK,GAAG,SAASA,KAAKA,CAAA,EAAG;IAC7C,IAAI,IAAI,CAACzB,OAAO,EAAE;MAChB,IAAIH,MAAM,GAAG,IAAI,CAACA,MAAM,CAAC,CAAC;;MAE1B;AACN;AACA;AACA;AACA;AACA;MACM,IAAI,CAACgC,OAAO,CAAC,kBAAkB,CAAC;MAChC,IAAI,CAAC7B,OAAO,GAAG,KAAK;MAEpB,IAAI,IAAI,CAACgC,WAAW,IAAI,IAAI,CAAC5B,QAAQ,CAAC8B,WAAW,EAAE;QACjDrC,MAAM,CAAC8C,IAAI,CAAC,CAAC;MACf;MAEA,IAAI,IAAI,CAACxC,SAAS,CAAC,CAAC,EAAE;QACpB,IAAI,CAACyC,GAAG,CAAC,IAAI,CAAC3B,GAAG,CAACoB,aAAa,EAAE,SAAS,EAAEzE,EAAE,CAAC0E,IAAI,CAAC,IAAI,EAAE,IAAI,CAAChB,cAAc,CAAC,CAAC;MACjF;MAEAzB,MAAM,CAAC0C,QAAQ,CAAC,IAAI,CAAC;MACrB,IAAI,CAACM,IAAI,CAAC,CAAC;MACX,IAAI,CAAChC,EAAE,CAAC,CAAC,CAAC4B,YAAY,CAAC,aAAa,EAAE,MAAM,CAAC;;MAE7C;AACN;AACA;AACA;AACA;AACA;MACM,IAAI,CAACZ,OAAO,CAAC,YAAY,CAAC;MAE1B,IAAI,IAAI,CAACzB,QAAQ,CAAC0C,SAAS,EAAE;QAC3B,IAAI,CAACC,OAAO,CAAC,CAAC;MAChB;IACF;IACA,OAAO,IAAI;EACb,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGEpD,WAAW,CAACvB,SAAS,CAAC+B,SAAS,GAAG,SAASA,SAASA,CAAChB,KAAK,EAAE;IAC1D,IAAI,OAAOA,KAAK,KAAK,SAAS,EAAE;MAC9B,IAAIgB,SAAS,GAAG,IAAI,CAAC6C,UAAU,GAAG,CAAC,CAAC7D,KAAK;MACzC,IAAIsC,KAAK,GAAG,IAAI,CAACwB,QAAQ,CAAC,aAAa,CAAC;;MAExC;MACA,IAAI9C,SAAS,IAAI,CAACsB,KAAK,EAAE;QAEvB;QACA;QACA,IAAIyB,IAAI,GAAG,IAAI,CAAC3C,UAAU;QAE1B,IAAI,CAACA,UAAU,GAAG,IAAI,CAACU,GAAG;QAC1BQ,KAAK,GAAG,IAAI,CAAC0B,QAAQ,CAAC,aAAa,EAAE;UAAEC,WAAW,EAAE;QAAqB,CAAC,CAAC;QAC3E,IAAI,CAAC7C,UAAU,GAAG2C,IAAI;QACtB,IAAI,CAACd,EAAE,CAACX,KAAK,EAAE,OAAO,EAAE,IAAI,CAACA,KAAK,CAAC;MACrC;;MAEA;MACA,IAAI,CAACtB,SAAS,IAAIsB,KAAK,EAAE;QACvB,IAAI,CAACmB,GAAG,CAACnB,KAAK,EAAE,OAAO,EAAE,IAAI,CAACA,KAAK,CAAC;QACpC,IAAI,CAAC4B,WAAW,CAAC5B,KAAK,CAAC;QACvBA,KAAK,CAACsB,OAAO,CAAC,CAAC;MACjB;IACF;IACA,OAAO,IAAI,CAACC,UAAU;EACxB,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;EAGErD,WAAW,CAACvB,SAAS,CAAC2D,IAAI,GAAG,SAASA,IAAIA,CAAA,EAAG;IAC3C,OAAO,IAAI,CAACuB,QAAQ,CAAC,IAAI,CAAChD,OAAO,CAAC,CAAC,CAAC;EACtC,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGEX,WAAW,CAACvB,SAAS,CAACkF,QAAQ,GAAG,SAASA,QAAQA,CAAChD,OAAO,EAAE;IAC1D,IAAIiD,SAAS,GAAG,IAAI,CAACA,SAAS,CAAC,CAAC;IAChC,IAAIC,QAAQ,GAAGD,SAAS,CAACE,UAAU;IACnC,IAAIC,aAAa,GAAGH,SAAS,CAACI,WAAW;;IAEzC;AACJ;AACA;AACA;AACA;AACA;IACI,IAAI,CAAC9B,OAAO,CAAC,iBAAiB,CAAC;IAC/B,IAAI,CAAC3B,cAAc,GAAG,IAAI;;IAE1B;IACA;IACAsD,QAAQ,CAACH,WAAW,CAACE,SAAS,CAAC;IAC/B,IAAI,CAACK,KAAK,CAAC,CAAC;IACZnG,GAAG,CAACoG,aAAa,CAACN,SAAS,EAAEjD,OAAO,CAAC;IACrC;AACJ;AACA;AACA;AACA;AACA;IACI,IAAI,CAACuB,OAAO,CAAC,WAAW,CAAC;;IAEzB;IACA,IAAI6B,aAAa,EAAE;MACjBF,QAAQ,CAACM,YAAY,CAACP,SAAS,EAAEG,aAAa,CAAC;IACjD,CAAC,MAAM;MACLF,QAAQ,CAACtC,WAAW,CAACqC,SAAS,CAAC;IACjC;IAEA,OAAO,IAAI;EACb,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGE5D,WAAW,CAACvB,SAAS,CAACwF,KAAK,GAAG,SAASA,KAAKA,CAAA,EAAG;IAC7C;AACJ;AACA;AACA;AACA;AACA;IACI,IAAI,CAAC/B,OAAO,CAAC,kBAAkB,CAAC;IAChCpE,GAAG,CAACsG,OAAO,CAAC,IAAI,CAACR,SAAS,CAAC,CAAC,CAAC;;IAE7B;AACJ;AACA;AACA;AACA;AACA;IACI,IAAI,CAAC1B,OAAO,CAAC,YAAY,CAAC;IAC1B,OAAO,IAAI;EACb,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGElC,WAAW,CAACvB,SAAS,CAACkC,OAAO,GAAG,SAASA,OAAOA,CAACnB,KAAK,EAAE;IACtD,IAAI,OAAOA,KAAK,KAAK,WAAW,EAAE;MAChC,IAAI,CAAC6E,QAAQ,GAAG7E,KAAK;IACvB;IACA,OAAO,IAAI,CAAC6E,QAAQ;EACtB,CAAC;EAED,OAAOrE,WAAW;AACpB,CAAC,CAAC7B,WAAW,CAAC,SAAS,CAAC,CAAC;;AAEzB;AACA;AACA;AACA;AACA;AACA;;AAGA6B,WAAW,CAACvB,SAAS,CAACgC,QAAQ,GAAG;EAC/B8B,WAAW,EAAE,IAAI;EACjBY,SAAS,EAAE;AACb,CAAC;AAEDhF,WAAW,CAAC,SAAS,CAAC,CAACmG,iBAAiB,CAAC,aAAa,EAAEtE,WAAW,CAAC;AACpEtC,OAAO,CAAC,SAAS,CAAC,GAAGsC,WAAW"},"metadata":{},"sourceType":"script","externalDependencies":[]}