{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nvar _window = require('global/window');\nvar _window2 = _interopRequireDefault(_window);\nvar _dom = require('./utils/dom.js');\nvar Dom = _interopRequireWildcard(_dom);\nvar _fn = require('./utils/fn.js');\nvar Fn = _interopRequireWildcard(_fn);\nvar _guid = require('./utils/guid.js');\nvar Guid = _interopRequireWildcard(_guid);\nvar _events = require('./utils/events.js');\nvar Events = _interopRequireWildcard(_events);\nvar _log = require('./utils/log.js');\nvar _log2 = _interopRequireDefault(_log);\nvar _toTitleCase = require('./utils/to-title-case.js');\nvar _toTitleCase2 = _interopRequireDefault(_toTitleCase);\nvar _mergeOptions = require('./utils/merge-options.js');\nvar _mergeOptions2 = _interopRequireDefault(_mergeOptions);\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n    newObj['default'] = obj;\n    return newObj;\n  }\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n} /**\n   * Player Component - Base class for all UI objects\n   *\n   * @file component.js\n   */\n\n/**\n * Base class for all UI Components.\n * Components are UI objects which represent both a javascript object and an element\n * in the DOM. They can be children of other components, and can have\n * children themselves.\n *\n * Components can also use methods from {@link EventTarget}\n */\nvar Component = function () {\n  /**\n   * A callback that is called when a component is ready. Does not have any\n   * paramters and any callback value will be ignored.\n   *\n   * @callback Component~ReadyCallback\n   * @this Component\n   */\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   #\n   * @param {Object[]} [options.children]\n   *        An array of children objects to intialize this component with. Children objects have\n   *        a name property that will be used if more than one component of the same type needs to be\n   *        added.\n   *\n   * @param {Component~ReadyCallback} [ready]\n   *        Function that gets called when the `Component` is ready.\n   */\n  function Component(player, options, ready) {\n    _classCallCheck(this, Component);\n\n    // The component might be the player itself and we can't pass `this` to super\n    if (!player && this.play) {\n      this.player_ = player = this; // eslint-disable-line\n    } else {\n      this.player_ = player;\n    }\n\n    // Make a copy of prototype.options_ to protect against overriding defaults\n    this.options_ = (0, _mergeOptions2['default'])({}, this.options_);\n\n    // Updated options with supplied options\n    options = this.options_ = (0, _mergeOptions2['default'])(this.options_, options);\n\n    // Get ID from options or options element if one is supplied\n    this.id_ = options.id || options.el && options.el.id;\n\n    // If there was no ID from the options, generate one\n    if (!this.id_) {\n      // Don't require the player ID function in the case of mock players\n      var id = player && player.id && player.id() || 'no_player';\n      this.id_ = id + '_component_' + Guid.newGUID();\n    }\n    this.name_ = options.name || null;\n\n    // Create element if one wasn't provided in options\n    if (options.el) {\n      this.el_ = options.el;\n    } else if (options.createEl !== false) {\n      this.el_ = this.createEl();\n    }\n    this.children_ = [];\n    this.childIndex_ = {};\n    this.childNameIndex_ = {};\n\n    // Add any child components in options\n    if (options.initChildren !== false) {\n      this.initChildren();\n    }\n    this.ready(ready);\n    // Don't want to trigger ready here or it will before init is actually\n    // finished for all children that run this constructor\n\n    if (options.reportTouchActivity !== false) {\n      this.enableTouchActivity();\n    }\n  }\n\n  /**\n   * Dispose of the `Component` and all child components.\n   *\n   * @fires Component#dispose\n   */\n\n  Component.prototype.dispose = function dispose() {\n    /**\n     * Triggered when a `Component` is disposed.\n     *\n     * @event Component#dispose\n     * @type {EventTarget~Event}\n     *\n     * @property {boolean} [bubbles=false]\n     *           set to false so that the close event does not\n     *           bubble up\n     */\n    this.trigger({\n      type: 'dispose',\n      bubbles: false\n    });\n\n    // Dispose all children.\n    if (this.children_) {\n      for (var i = this.children_.length - 1; i >= 0; i--) {\n        if (this.children_[i].dispose) {\n          this.children_[i].dispose();\n        }\n      }\n    }\n\n    // Delete child references\n    this.children_ = null;\n    this.childIndex_ = null;\n    this.childNameIndex_ = null;\n\n    // Remove all event listeners.\n    this.off();\n\n    // Remove element from DOM\n    if (this.el_.parentNode) {\n      this.el_.parentNode.removeChild(this.el_);\n    }\n    Dom.removeElData(this.el_);\n    this.el_ = null;\n  };\n\n  /**\n   * Return the {@link Player} that the `Component` has attached to.\n   *\n   * @return {Player}\n   *         The player that this `Component` has attached to.\n   */\n\n  Component.prototype.player = function player() {\n    return this.player_;\n  };\n\n  /**\n   * Deep merge of options objects with new options.\n   * > Note: When both `obj` and `options` contain properties whose values are objects.\n   *         The two properties get merged using {@link module:mergeOptions}\n   *\n   * @param {Object} obj\n   *        The object that contains new options.\n   *\n   * @return {Object}\n   *         A new object of `this.options_` and `obj` merged together.\n   *\n   * @deprecated since version 5\n   */\n\n  Component.prototype.options = function options(obj) {\n    _log2['default'].warn('this.options() has been deprecated and will be moved to the constructor in 6.0');\n    if (!obj) {\n      return this.options_;\n    }\n    this.options_ = (0, _mergeOptions2['default'])(this.options_, obj);\n    return this.options_;\n  };\n\n  /**\n   * Get the `Component`s DOM element\n   *\n   * @return {Element}\n   *         The DOM element for this `Component`.\n   */\n\n  Component.prototype.el = function el() {\n    return this.el_;\n  };\n\n  /**\n   * Create the `Component`s DOM element.\n   *\n   * @param {string} [tagName]\n   *        Element's DOM node type. e.g. 'div'\n   *\n   * @param {Object} [properties]\n   *        An object of properties that should be set.\n   *\n   * @param {Object} [attributes]\n   *        An object of attributes that should be set.\n   *\n   * @return {Element}\n   *         The element that gets created.\n   */\n\n  Component.prototype.createEl = function createEl(tagName, properties, attributes) {\n    return Dom.createEl(tagName, properties, attributes);\n  };\n\n  /**\n   * Localize a string given the string in english.\n   *\n   * @param {string} string\n   *        The string to localize.\n   *\n   * @return {string}\n   *         The localized string or if no localization exists the english string.\n   */\n\n  Component.prototype.localize = function localize(string) {\n    var code = this.player_.language && this.player_.language();\n    var languages = this.player_.languages && this.player_.languages();\n    if (!code || !languages) {\n      return string;\n    }\n    var language = languages[code];\n    if (language && language[string]) {\n      return language[string];\n    }\n    var primaryCode = code.split('-')[0];\n    var primaryLang = languages[primaryCode];\n    if (primaryLang && primaryLang[string]) {\n      return primaryLang[string];\n    }\n    return string;\n  };\n\n  /**\n   * Return the `Component`s DOM element. This is where children get inserted.\n   * This will usually be the the same as the element returned in {@link Component#el}.\n   *\n   * @return {Element}\n   *         The content element for this `Component`.\n   */\n\n  Component.prototype.contentEl = function contentEl() {\n    return this.contentEl_ || this.el_;\n  };\n\n  /**\n   * Get this `Component`s ID\n   *\n   * @return {string}\n   *         The id of this `Component`\n   */\n\n  Component.prototype.id = function id() {\n    return this.id_;\n  };\n\n  /**\n   * Get the `Component`s name. The name gets used to reference the `Component`\n   * and is set during registration.\n   *\n   * @return {string}\n   *         The name of this `Component`.\n   */\n\n  Component.prototype.name = function name() {\n    return this.name_;\n  };\n\n  /**\n   * Get an array of all child components\n   *\n   * @return {Array}\n   *         The children\n   */\n\n  Component.prototype.children = function children() {\n    return this.children_;\n  };\n\n  /**\n   * Returns the child `Component` with the given `id`.\n   *\n   * @param {string} id\n   *        The id of the child `Component` to get.\n   *\n   * @return {Component|undefined}\n   *         The child `Component` with the given `id` or undefined.\n   */\n\n  Component.prototype.getChildById = function getChildById(id) {\n    return this.childIndex_[id];\n  };\n\n  /**\n   * Returns the child `Component` with the given `name`.\n   *\n   * @param {string} name\n   *        The name of the child `Component` to get.\n   *\n   * @return {Component|undefined}\n   *         The child `Component` with the given `name` or undefined.\n   */\n\n  Component.prototype.getChild = function getChild(name) {\n    if (!name) {\n      return;\n    }\n    name = (0, _toTitleCase2['default'])(name);\n    return this.childNameIndex_[name];\n  };\n\n  /**\n   * Add a child `Component` inside the current `Component`.\n   *\n   *\n   * @param {string|Component} child\n   *        The name or instance of a child to add.\n   *\n   * @param {Object} [options={}]\n   *        The key/value store of options that will get passed to children of\n   *        the child.\n   *\n   * @param {number} [index=this.children_.length]\n   *        The index to attempt to add a child into.\n   *\n   * @return {Component}\n   *         The `Component` that gets added as a child. When using a string the\n   *         `Component` will get created by this process.\n   */\n\n  Component.prototype.addChild = function addChild(child) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.children_.length;\n    var component = void 0;\n    var componentName = void 0;\n\n    // If child is a string, create component with options\n    if (typeof child === 'string') {\n      componentName = (0, _toTitleCase2['default'])(child);\n\n      // Options can also be specified as a boolean,\n      // so convert to an empty object if false.\n      if (!options) {\n        options = {};\n      }\n\n      // Same as above, but true is deprecated so show a warning.\n      if (options === true) {\n        _log2['default'].warn('Initializing a child component with `true` is deprecated.' + 'Children should be defined in an array when possible, ' + 'but if necessary use an object instead of `true`.');\n        options = {};\n      }\n      var componentClassName = options.componentClass || componentName;\n\n      // Set name through options\n      options.name = componentName;\n\n      // Create a new object & element for this controls set\n      // If there's no .player_, this is a player\n      var ComponentClass = Component.getComponent(componentClassName);\n      if (!ComponentClass) {\n        throw new Error('Component ' + componentClassName + ' does not exist');\n      }\n\n      // data stored directly on the videojs object may be\n      // misidentified as a component to retain\n      // backwards-compatibility with 4.x. check to make sure the\n      // component class can be instantiated.\n      if (typeof ComponentClass !== 'function') {\n        return null;\n      }\n      component = new ComponentClass(this.player_ || this, options);\n\n      // child is a component instance\n    } else {\n      component = child;\n    }\n    this.children_.splice(index, 0, component);\n    if (typeof component.id === 'function') {\n      this.childIndex_[component.id()] = component;\n    }\n\n    // If a name wasn't used to create the component, check if we can use the\n    // name function of the component\n    componentName = componentName || component.name && (0, _toTitleCase2['default'])(component.name());\n    if (componentName) {\n      this.childNameIndex_[componentName] = component;\n    }\n\n    // Add the UI object's element to the container div (box)\n    // Having an element is not required\n    if (typeof component.el === 'function' && component.el()) {\n      var childNodes = this.contentEl().children;\n      var refNode = childNodes[index] || null;\n      this.contentEl().insertBefore(component.el(), refNode);\n    }\n\n    // Return so it can stored on parent object if desired.\n    return component;\n  };\n\n  /**\n   * Remove a child `Component` from this `Component`s list of children. Also removes\n   * the child `Component`s element from this `Component`s element.\n   *\n   * @param {Component} component\n   *        The child `Component` to remove.\n   */\n\n  Component.prototype.removeChild = function removeChild(component) {\n    if (typeof component === 'string') {\n      component = this.getChild(component);\n    }\n    if (!component || !this.children_) {\n      return;\n    }\n    var childFound = false;\n    for (var i = this.children_.length - 1; i >= 0; i--) {\n      if (this.children_[i] === component) {\n        childFound = true;\n        this.children_.splice(i, 1);\n        break;\n      }\n    }\n    if (!childFound) {\n      return;\n    }\n    this.childIndex_[component.id()] = null;\n    this.childNameIndex_[component.name()] = null;\n    var compEl = component.el();\n    if (compEl && compEl.parentNode === this.contentEl()) {\n      this.contentEl().removeChild(component.el());\n    }\n  };\n\n  /**\n   * Add and initialize default child `Component`s based upon options.\n   */\n\n  Component.prototype.initChildren = function initChildren() {\n    var _this = this;\n    var children = this.options_.children;\n    if (children) {\n      // `this` is `parent`\n      var parentOptions = this.options_;\n      var handleAdd = function handleAdd(child) {\n        var name = child.name;\n        var opts = child.opts;\n\n        // Allow options for children to be set at the parent options\n        // e.g. videojs(id, { controlBar: false });\n        // instead of videojs(id, { children: { controlBar: false });\n        if (parentOptions[name] !== undefined) {\n          opts = parentOptions[name];\n        }\n\n        // Allow for disabling default components\n        // e.g. options['children']['posterImage'] = false\n        if (opts === false) {\n          return;\n        }\n\n        // Allow options to be passed as a simple boolean if no configuration\n        // is necessary.\n        if (opts === true) {\n          opts = {};\n        }\n\n        // We also want to pass the original player options\n        // to each component as well so they don't need to\n        // reach back into the player for options later.\n        opts.playerOptions = _this.options_.playerOptions;\n\n        // Create and add the child component.\n        // Add a direct reference to the child by name on the parent instance.\n        // If two of the same component are used, different names should be supplied\n        // for each\n        var newChild = _this.addChild(name, opts);\n        if (newChild) {\n          _this[name] = newChild;\n        }\n      };\n\n      // Allow for an array of children details to passed in the options\n      var workingChildren = void 0;\n      var Tech = Component.getComponent('Tech');\n      if (Array.isArray(children)) {\n        workingChildren = children;\n      } else {\n        workingChildren = Object.keys(children);\n      }\n      workingChildren\n      // children that are in this.options_ but also in workingChildren  would\n      // give us extra children we do not want. So, we want to filter them out.\n      .concat(Object.keys(this.options_).filter(function (child) {\n        return !workingChildren.some(function (wchild) {\n          if (typeof wchild === 'string') {\n            return child === wchild;\n          }\n          return child === wchild.name;\n        });\n      })).map(function (child) {\n        var name = void 0;\n        var opts = void 0;\n        if (typeof child === 'string') {\n          name = child;\n          opts = children[name] || _this.options_[name] || {};\n        } else {\n          name = child.name;\n          opts = child;\n        }\n        return {\n          name: name,\n          opts: opts\n        };\n      }).filter(function (child) {\n        // we have to make sure that child.name isn't in the techOrder since\n        // techs are registerd as Components but can't aren't compatible\n        // See https://github.com/videojs/video.js/issues/2772\n        var c = Component.getComponent(child.opts.componentClass || (0, _toTitleCase2['default'])(child.name));\n        return c && !Tech.isTech(c);\n      }).forEach(handleAdd);\n    }\n  };\n\n  /**\n   * Builds the default DOM class name. Should be overriden by sub-components.\n   *\n   * @return {string}\n   *         The DOM class name for this object.\n   *\n   * @abstract\n   */\n\n  Component.prototype.buildCSSClass = function buildCSSClass() {\n    // Child classes can include a function that does:\n    // return 'CLASS NAME' + this._super();\n    return '';\n  };\n\n  /**\n   * Add an `event listener` to this `Component`s element.\n   *\n   * The benefit of using this over the following:\n   * - `VjsEvents.on(otherElement, 'eventName', myFunc)`\n   * - `otherComponent.on('eventName', myFunc)`\n   *\n   * 1. Is that the listeners will get cleaned up when either component gets disposed.\n   * 1. It will also bind `myComponent` as the context of `myFunc`.\n   * > NOTE: If you remove the element from the DOM that has used `on` you need to\n   *         clean up references using: `myComponent.trigger(el, 'dispose')`\n   *         This will also allow the browser to garbage collect it. In special\n   *         cases such as with `window` and `document`, which are both permanent,\n   *         this is not necessary.\n   *\n   * @param {string|Component|string[]} [first]\n   *        The event name, and array of event names, or another `Component`.\n   *\n   * @param {EventTarget~EventListener|string|string[]} [second]\n   *        The listener function, an event name, or an Array of events names.\n   *\n   * @param {EventTarget~EventListener} [third]\n   *        The event handler if `first` is a `Component` and `second` is an event name\n   *        or an Array of event names.\n   *\n   * @return {Component}\n   *         Returns itself; method can be chained.\n   *\n   * @listens Component#dispose\n   */\n\n  Component.prototype.on = function on(first, second, third) {\n    var _this2 = this;\n    if (typeof first === 'string' || Array.isArray(first)) {\n      Events.on(this.el_, first, Fn.bind(this, second));\n\n      // Targeting another component or element\n    } else {\n      var target = first;\n      var type = second;\n      var fn = Fn.bind(this, third);\n\n      // When this component is disposed, remove the listener from the other component\n      var removeOnDispose = function removeOnDispose() {\n        return _this2.off(target, type, fn);\n      };\n\n      // Use the same function ID so we can remove it later it using the ID\n      // of the original listener\n      removeOnDispose.guid = fn.guid;\n      this.on('dispose', removeOnDispose);\n\n      // If the other component is disposed first we need to clean the reference\n      // to the other component in this component's removeOnDispose listener\n      // Otherwise we create a memory leak.\n      var cleanRemover = function cleanRemover() {\n        return _this2.off('dispose', removeOnDispose);\n      };\n\n      // Add the same function ID so we can easily remove it later\n      cleanRemover.guid = fn.guid;\n\n      // Check if this is a DOM node\n      if (first.nodeName) {\n        // Add the listener to the other element\n        Events.on(target, type, fn);\n        Events.on(target, 'dispose', cleanRemover);\n\n        // Should be a component\n        // Not using `instanceof Component` because it makes mock players difficult\n      } else if (typeof first.on === 'function') {\n        // Add the listener to the other component\n        target.on(type, fn);\n        target.on('dispose', cleanRemover);\n      }\n    }\n    return this;\n  };\n\n  /**\n   * Remove an event listener from this `Component`s element. If the second argument is\n   * exluded all listeners for the type passed in as the first argument will be removed.\n   *\n   * @param {string|Component|string[]} [first]\n   *        The event name, and array of event names, or another `Component`.\n   *\n   * @param {EventTarget~EventListener|string|string[]} [second]\n   *        The listener function, an event name, or an Array of events names.\n   *\n   * @param {EventTarget~EventListener} [third]\n   *        The event handler if `first` is a `Component` and `second` is an event name\n   *        or an Array of event names.\n   *\n   * @return {Component}\n   *         Returns itself; method can be chained.\n   */\n\n  Component.prototype.off = function off(first, second, third) {\n    if (!first || typeof first === 'string' || Array.isArray(first)) {\n      Events.off(this.el_, first, second);\n    } else {\n      var target = first;\n      var type = second;\n      // Ensure there's at least a guid, even if the function hasn't been used\n      var fn = Fn.bind(this, third);\n\n      // Remove the dispose listener on this component,\n      // which was given the same guid as the event listener\n      this.off('dispose', fn);\n      if (first.nodeName) {\n        // Remove the listener\n        Events.off(target, type, fn);\n        // Remove the listener for cleaning the dispose listener\n        Events.off(target, 'dispose', fn);\n      } else {\n        target.off(type, fn);\n        target.off('dispose', fn);\n      }\n    }\n    return this;\n  };\n\n  /**\n   * Add an event listener that gets triggered only once and then gets removed.\n   *\n   * @param {string|Component|string[]} [first]\n   *        The event name, and array of event names, or another `Component`.\n   *\n   * @param {EventTarget~EventListener|string|string[]} [second]\n   *        The listener function, an event name, or an Array of events names.\n   *\n   * @param {EventTarget~EventListener} [third]\n   *        The event handler if `first` is a `Component` and `second` is an event name\n   *        or an Array of event names.\n   *\n   * @return {Component}\n   *         Returns itself; method can be chained.\n   */\n\n  Component.prototype.one = function one(first, second, third) {\n    var _this3 = this,\n      _arguments = arguments;\n    if (typeof first === 'string' || Array.isArray(first)) {\n      Events.one(this.el_, first, Fn.bind(this, second));\n    } else {\n      var target = first;\n      var type = second;\n      var fn = Fn.bind(this, third);\n      var newFunc = function newFunc() {\n        _this3.off(target, type, newFunc);\n        fn.apply(null, _arguments);\n      };\n\n      // Keep the same function ID so we can remove it later\n      newFunc.guid = fn.guid;\n      this.on(target, type, newFunc);\n    }\n    return this;\n  };\n\n  /**\n   * Trigger an event on an element.\n   *\n   * @param {EventTarget~Event|Object|string} event\n   *        The event name, and Event, or an event-like object with a type attribute\n   *        set to the event name.\n   *\n   * @param {Object} [hash]\n   *        Data hash to pass along with the event\n   *\n   * @return {Component}\n   *         Returns itself; method can be chained.\n   */\n\n  Component.prototype.trigger = function trigger(event, hash) {\n    Events.trigger(this.el_, event, hash);\n    return this;\n  };\n\n  /**\n   * Bind a listener to the component's ready state. If the ready event has already\n   * happened it will trigger the function immediately.\n   *\n   * @param  {Component~ReadyCallback} fn\n   *         A function to call when ready is triggered.\n   *\n   * @param  {boolean} [sync=false]\n   *         Execute the listener synchronously if `Component` is ready.\n   *\n   * @return {Component}\n   *         Returns itself; method can be chained.\n   */\n\n  Component.prototype.ready = function ready(fn) {\n    var sync = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    if (fn) {\n      if (this.isReady_) {\n        if (sync) {\n          fn.call(this);\n        } else {\n          // Call the function asynchronously by default for consistency\n          this.setTimeout(fn, 1);\n        }\n      } else {\n        this.readyQueue_ = this.readyQueue_ || [];\n        this.readyQueue_.push(fn);\n      }\n    }\n    return this;\n  };\n\n  /**\n   * Trigger all the ready listeners for this `Component`.\n   *\n   * @fires Component#ready\n   */\n\n  Component.prototype.triggerReady = function triggerReady() {\n    this.isReady_ = true;\n\n    // Ensure ready is triggerd asynchronously\n    this.setTimeout(function () {\n      var readyQueue = this.readyQueue_;\n\n      // Reset Ready Queue\n      this.readyQueue_ = [];\n      if (readyQueue && readyQueue.length > 0) {\n        readyQueue.forEach(function (fn) {\n          fn.call(this);\n        }, this);\n      }\n\n      // Allow for using event listeners also\n      /**\n       * Triggered when a `Component` is ready.\n       *\n       * @event Component#ready\n       * @type {EventTarget~Event}\n       */\n      this.trigger('ready');\n    }, 1);\n  };\n\n  /**\n   * Find a single DOM element matching a `selector`. This can be within the `Component`s\n   * `contentEl()` or another custom context.\n   *\n   * @param {string} selector\n   *        A valid CSS selector, which will be passed to `querySelector`.\n   *\n   * @param {Element|string} [context=this.contentEl()]\n   *        A DOM element within which to query. Can also be a selector string in\n   *        which case the first matching element will get used as context. If\n   *        missing `this.contentEl()` gets used. If  `this.contentEl()` returns\n   *        nothing it falls back to `document`.\n   *\n   * @return {Element|null}\n   *         the dom element that was found, or null\n   *\n   * @see [Information on CSS Selectors](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_Started/Selectors)\n   */\n\n  Component.prototype.$ = function $(selector, context) {\n    return Dom.$(selector, context || this.contentEl());\n  };\n\n  /**\n   * Finds all DOM element matching a `selector`. This can be within the `Component`s\n   * `contentEl()` or another custom context.\n   *\n   * @param {string} selector\n   *        A valid CSS selector, which will be passed to `querySelectorAll`.\n   *\n   * @param {Element|string} [context=this.contentEl()]\n   *        A DOM element within which to query. Can also be a selector string in\n   *        which case the first matching element will get used as context. If\n   *        missing `this.contentEl()` gets used. If  `this.contentEl()` returns\n   *        nothing it falls back to `document`.\n   *\n   * @return {NodeList}\n   *         a list of dom elements that were found\n   *\n   * @see [Information on CSS Selectors](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_Started/Selectors)\n   */\n\n  Component.prototype.$$ = function $$(selector, context) {\n    return Dom.$$(selector, context || this.contentEl());\n  };\n\n  /**\n   * Check if a component's element has a CSS class name.\n   *\n   * @param {string} classToCheck\n   *        CSS class name to check.\n   *\n   * @return {boolean}\n   *         - True if the `Component` has the class.\n   *         - False if the `Component` does not have the class`\n   */\n\n  Component.prototype.hasClass = function hasClass(classToCheck) {\n    return Dom.hasElClass(this.el_, classToCheck);\n  };\n\n  /**\n   * Add a CSS class name to the `Component`s element.\n   *\n   * @param {string} classToAdd\n   *        CSS class name to add\n   *\n   * @return {Component}\n   *         Returns itself; method can be chained.\n   */\n\n  Component.prototype.addClass = function addClass(classToAdd) {\n    Dom.addElClass(this.el_, classToAdd);\n    return this;\n  };\n\n  /**\n   * Remove a CSS class name from the `Component`s element.\n   *\n   * @param {string} classToRemove\n   *        CSS class name to remove\n   *\n   * @return {Component}\n   *         Returns itself; method can be chained.\n   */\n\n  Component.prototype.removeClass = function removeClass(classToRemove) {\n    Dom.removeElClass(this.el_, classToRemove);\n    return this;\n  };\n\n  /**\n   * Add or remove a CSS class name from the component's element.\n   * - `classToToggle` gets added when {@link Component#hasClass} would return false.\n   * - `classToToggle` gets removed when {@link Component#hasClass} would return true.\n   *\n   * @param  {string} classToToggle\n   *         The class to add or remove based on (@link Component#hasClass}\n   *\n   * @param  {boolean|Dom~predicate} [predicate]\n   *         An {@link Dom~predicate} function or a boolean\n   *\n   * @return {Component}\n   *         Returns itself; method can be chained.\n   */\n\n  Component.prototype.toggleClass = function toggleClass(classToToggle, predicate) {\n    Dom.toggleElClass(this.el_, classToToggle, predicate);\n    return this;\n  };\n\n  /**\n   * Show the `Component`s element if it is hidden by removing the\n   * 'vjs-hidden' class name from it.\n   *\n   * @return {Component}\n   *         Returns itself; method can be chained.\n   */\n\n  Component.prototype.show = function show() {\n    this.removeClass('vjs-hidden');\n    return this;\n  };\n\n  /**\n   * Hide the `Component`s element if it is currently showing by adding the\n   * 'vjs-hidden` class name to it.\n   *\n   * @return {Component}\n   *         Returns itself; method can be chained.\n   */\n\n  Component.prototype.hide = function hide() {\n    this.addClass('vjs-hidden');\n    return this;\n  };\n\n  /**\n   * Lock a `Component`s element in its visible state by adding the 'vjs-lock-showing'\n   * class name to it. Used during fadeIn/fadeOut.\n   *\n   * @return {Component}\n   *         Returns itself; method can be chained.\n   *\n   * @private\n   */\n\n  Component.prototype.lockShowing = function lockShowing() {\n    this.addClass('vjs-lock-showing');\n    return this;\n  };\n\n  /**\n   * Unlock a `Component`s element from its visible state by removing the 'vjs-lock-showing'\n   * class name from it. Used during fadeIn/fadeOut.\n   *\n   * @return {Component}\n   *         Returns itself; method can be chained.\n   *\n   * @private\n   */\n\n  Component.prototype.unlockShowing = function unlockShowing() {\n    this.removeClass('vjs-lock-showing');\n    return this;\n  };\n\n  /**\n   * Get the value of an attribute on the `Component`s element.\n   *\n   * @param {string} attribute\n   *        Name of the attribute to get the value from.\n   *\n   * @return {string|null}\n   *         - The value of the attribute that was asked for.\n   *         - Can be an empty string on some browsers if the attribute does not exist\n   *           or has no value\n   *         - Most browsers will return null if the attibute does not exist or has\n   *           no value.\n   *\n   * @see [DOM API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttribute}\n   */\n\n  Component.prototype.getAttribute = function getAttribute(attribute) {\n    return Dom.getAttribute(this.el_, attribute);\n  };\n\n  /**\n   * Set the value of an attribute on the `Component`'s element\n   *\n   * @param {string} attribute\n   *        Name of the attribute to set.\n   *\n   * @param {string} value\n   *        Value to set the attribute to.\n   *\n   * @return {Component}\n   *         Returns itself; method can be chained.\n   *\n   * @see [DOM API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttribute}\n   */\n\n  Component.prototype.setAttribute = function setAttribute(attribute, value) {\n    Dom.setAttribute(this.el_, attribute, value);\n    return this;\n  };\n\n  /**\n   * Remove an attribute from the `Component`s element.\n   *\n   * @param {string} attribute\n   *        Name of the attribute to remove.\n   *\n   * @return {Component}\n   *         Returns itself; method can be chained.\n   *\n   * @see [DOM API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttribute}\n   */\n\n  Component.prototype.removeAttribute = function removeAttribute(attribute) {\n    Dom.removeAttribute(this.el_, attribute);\n    return this;\n  };\n\n  /**\n   * Get or set the width of the component based upon the CSS styles.\n   * See {@link Component#dimension} for more detailed information.\n   *\n   * @param {number|string} [num]\n   *        The width that you want to set postfixed with '%', 'px' or nothing.\n   *\n   * @param {boolean} [skipListeners]\n   *        Skip the resize event trigger\n   *\n   * @return {Component|number|string}\n   *         - The width when getting, zero if there is no width. Can be a string\n   *           postpixed with '%' or 'px'.\n   *         - Returns itself when setting; method can be chained.\n   */\n\n  Component.prototype.width = function width(num, skipListeners) {\n    return this.dimension('width', num, skipListeners);\n  };\n\n  /**\n   * Get or set the height of the component based upon the CSS styles.\n   * See {@link Component#dimension} for more detailed information.\n   *\n   * @param {number|string} [num]\n   *        The height that you want to set postfixed with '%', 'px' or nothing.\n   *\n   * @param {boolean} [skipListeners]\n   *        Skip the resize event trigger\n   *\n   * @return {Component|number|string}\n   *         - The width when getting, zero if there is no width. Can be a string\n   *           postpixed with '%' or 'px'.\n   *         - Returns itself when setting; method can be chained.\n   */\n\n  Component.prototype.height = function height(num, skipListeners) {\n    return this.dimension('height', num, skipListeners);\n  };\n\n  /**\n   * Set both the width and height of the `Component` element at the same time.\n   *\n   * @param  {number|string} width\n   *         Width to set the `Component`s element to.\n   *\n   * @param  {number|string} height\n   *         Height to set the `Component`s element to.\n   *\n   * @return {Component}\n   *         Returns itself; method can be chained.\n   */\n\n  Component.prototype.dimensions = function dimensions(width, height) {\n    // Skip resize listeners on width for optimization\n    return this.width(width, true).height(height);\n  };\n\n  /**\n   * Get or set width or height of the `Component` element. This is the shared code\n   * for the {@link Component#width} and {@link Component#height}.\n   *\n   * Things to know:\n   * - If the width or height in an number this will return the number postfixed with 'px'.\n   * - If the width/height is a percent this will return the percent postfixed with '%'\n   * - Hidden elements have a width of 0 with `window.getComputedStyle`. This function\n   *   defaults to the `Component`s `style.width` and falls back to `window.getComputedStyle`.\n   *   See [this]{@link http://www.foliotek.com/devblog/getting-the-width-of-a-hidden-element-with-jquery-using-width/}\n   *   for more information\n   * - If you want the computed style of the component, use {@link Component#currentWidth}\n   *   and {@link {Component#currentHeight}\n   *\n   * @fires Component#resize\n   *\n   * @param {string} widthOrHeight\n   8        'width' or 'height'\n   *\n   * @param  {number|string} [num]\n   8         New dimension\n   *\n   * @param  {boolean} [skipListeners]\n   *         Skip resize event trigger\n   *\n   * @return {Component}\n   *         - the dimension when getting or 0 if unset\n   *         - Returns itself when setting; method can be chained.\n   */\n\n  Component.prototype.dimension = function dimension(widthOrHeight, num, skipListeners) {\n    if (num !== undefined) {\n      // Set to zero if null or literally NaN (NaN !== NaN)\n      if (num === null || num !== num) {\n        num = 0;\n      }\n\n      // Check if using css width/height (% or px) and adjust\n      if (('' + num).indexOf('%') !== -1 || ('' + num).indexOf('px') !== -1) {\n        this.el_.style[widthOrHeight] = num;\n      } else if (num === 'auto') {\n        this.el_.style[widthOrHeight] = '';\n      } else {\n        this.el_.style[widthOrHeight] = num + 'px';\n      }\n\n      // skipListeners allows us to avoid triggering the resize event when setting both width and height\n      if (!skipListeners) {\n        /**\n         * Triggered when a component is resized.\n         *\n         * @event Component#resize\n         * @type {EventTarget~Event}\n         */\n        this.trigger('resize');\n      }\n\n      // Return component\n      return this;\n    }\n\n    // Not setting a value, so getting it\n    // Make sure element exists\n    if (!this.el_) {\n      return 0;\n    }\n\n    // Get dimension value from style\n    var val = this.el_.style[widthOrHeight];\n    var pxIndex = val.indexOf('px');\n    if (pxIndex !== -1) {\n      // Return the pixel value with no 'px'\n      return parseInt(val.slice(0, pxIndex), 10);\n    }\n\n    // No px so using % or no style was set, so falling back to offsetWidth/height\n    // If component has display:none, offset will return 0\n    // TODO: handle display:none and no dimension style using px\n    return parseInt(this.el_['offset' + (0, _toTitleCase2['default'])(widthOrHeight)], 10);\n  };\n\n  /**\n   * Get the width or the height of the `Component` elements computed style. Uses\n   * `window.getComputedStyle`.\n   *\n   * @param {string} widthOrHeight\n   *        A string containing 'width' or 'height'. Whichever one you want to get.\n   *\n   * @return {number}\n   *         The dimension that gets asked for or 0 if nothing was set\n   *         for that dimension.\n   */\n\n  Component.prototype.currentDimension = function currentDimension(widthOrHeight) {\n    var computedWidthOrHeight = 0;\n    if (widthOrHeight !== 'width' && widthOrHeight !== 'height') {\n      throw new Error('currentDimension only accepts width or height value');\n    }\n    if (typeof _window2['default'].getComputedStyle === 'function') {\n      var computedStyle = _window2['default'].getComputedStyle(this.el_);\n      computedWidthOrHeight = computedStyle.getPropertyValue(widthOrHeight) || computedStyle[widthOrHeight];\n    }\n\n    // remove 'px' from variable and parse as integer\n    computedWidthOrHeight = parseFloat(computedWidthOrHeight);\n\n    // if the computed value is still 0, it's possible that the browser is lying\n    // and we want to check the offset values.\n    // This code also runs on IE8 and wherever getComputedStyle doesn't exist.\n    if (computedWidthOrHeight === 0) {\n      var rule = 'offset' + (0, _toTitleCase2['default'])(widthOrHeight);\n      computedWidthOrHeight = this.el_[rule];\n    }\n    return computedWidthOrHeight;\n  };\n\n  /**\n   * An object that contains width and height values of the `Component`s\n   * computed style. Uses `window.getComputedStyle`.\n   *\n   * @typedef {Object} Component~DimensionObject\n   *\n   * @property {number} width\n   *           The width of the `Component`s computed style.\n   *\n   * @property {number} height\n   *           The height of the `Component`s computed style.\n   */\n\n  /**\n   * Get an object that contains width and height values of the `Component`s\n   * computed style.\n   *\n   * @return {Component~DimensionObject}\n   *         The dimensions of the components element\n   */\n\n  Component.prototype.currentDimensions = function currentDimensions() {\n    return {\n      width: this.currentDimension('width'),\n      height: this.currentDimension('height')\n    };\n  };\n\n  /**\n   * Get the width of the `Component`s computed style. Uses `window.getComputedStyle`.\n   *\n   * @return {number} width\n   *           The width of the `Component`s computed style.\n   */\n\n  Component.prototype.currentWidth = function currentWidth() {\n    return this.currentDimension('width');\n  };\n\n  /**\n   * Get the height of the `Component`s computed style. Uses `window.getComputedStyle`.\n   *\n   * @return {number} height\n   *           The height of the `Component`s computed style.\n   */\n\n  Component.prototype.currentHeight = function currentHeight() {\n    return this.currentDimension('height');\n  };\n\n  /**\n   * Set the focus to this component\n   */\n\n  Component.prototype.focus = function focus() {\n    this.el_.focus();\n  };\n\n  /**\n   * Remove the focus from this component\n   */\n\n  Component.prototype.blur = function blur() {\n    this.el_.blur();\n  };\n\n  /**\n   * Emit a 'tap' events when touch event support gets detected. This gets used to\n   * support toggling the controls through a tap on the video. They get enabled\n   * because every sub-component would have extra overhead otherwise.\n   *\n   * @private\n   * @fires Component#tap\n   * @listens Component#touchstart\n   * @listens Component#touchmove\n   * @listens Component#touchleave\n   * @listens Component#touchcancel\n   * @listens Component#touchend\n    */\n\n  Component.prototype.emitTapEvents = function emitTapEvents() {\n    // Track the start time so we can determine how long the touch lasted\n    var touchStart = 0;\n    var firstTouch = null;\n\n    // Maximum movement allowed during a touch event to still be considered a tap\n    // Other popular libs use anywhere from 2 (hammer.js) to 15,\n    // so 10 seems like a nice, round number.\n    var tapMovementThreshold = 10;\n\n    // The maximum length a touch can be while still being considered a tap\n    var touchTimeThreshold = 200;\n    var couldBeTap = void 0;\n    this.on('touchstart', function (event) {\n      // If more than one finger, don't consider treating this as a click\n      if (event.touches.length === 1) {\n        // Copy pageX/pageY from the object\n        firstTouch = {\n          pageX: event.touches[0].pageX,\n          pageY: event.touches[0].pageY\n        };\n        // Record start time so we can detect a tap vs. \"touch and hold\"\n        touchStart = new Date().getTime();\n        // Reset couldBeTap tracking\n        couldBeTap = true;\n      }\n    });\n    this.on('touchmove', function (event) {\n      // If more than one finger, don't consider treating this as a click\n      if (event.touches.length > 1) {\n        couldBeTap = false;\n      } else if (firstTouch) {\n        // Some devices will throw touchmoves for all but the slightest of taps.\n        // So, if we moved only a small distance, this could still be a tap\n        var xdiff = event.touches[0].pageX - firstTouch.pageX;\n        var ydiff = event.touches[0].pageY - firstTouch.pageY;\n        var touchDistance = Math.sqrt(xdiff * xdiff + ydiff * ydiff);\n        if (touchDistance > tapMovementThreshold) {\n          couldBeTap = false;\n        }\n      }\n    });\n    var noTap = function noTap() {\n      couldBeTap = false;\n    };\n\n    // TODO: Listen to the original target. http://youtu.be/DujfpXOKUp8?t=13m8s\n    this.on('touchleave', noTap);\n    this.on('touchcancel', noTap);\n\n    // When the touch ends, measure how long it took and trigger the appropriate\n    // event\n    this.on('touchend', function (event) {\n      firstTouch = null;\n      // Proceed only if the touchmove/leave/cancel event didn't happen\n      if (couldBeTap === true) {\n        // Measure how long the touch lasted\n        var touchTime = new Date().getTime() - touchStart;\n\n        // Make sure the touch was less than the threshold to be considered a tap\n        if (touchTime < touchTimeThreshold) {\n          // Don't let browser turn this into a click\n          event.preventDefault();\n          /**\n           * Triggered when a `Component` is tapped.\n           *\n           * @event Component#tap\n           * @type {EventTarget~Event}\n           */\n          this.trigger('tap');\n          // It may be good to copy the touchend event object and change the\n          // type to tap, if the other event properties aren't exact after\n          // Events.fixEvent runs (e.g. event.target)\n        }\n      }\n    });\n  };\n\n  /**\n   * This function reports user activity whenever touch events happen. This can get\n   * turned off by any sub-components that wants touch events to act another way.\n   *\n   * Report user touch activity when touch events occur. User activity gets used to\n   * determine when controls should show/hide. It is simple when it comes to mouse\n   * events, because any mouse event should show the controls. So we capture mouse\n   * events that bubble up to the player and report activity when that happens.\n   * With touch events it isn't as easy as `touchstart` and `touchend` toggle player\n   * controls. So touch events can't help us at the player level either.\n   *\n   * User activity gets checked asynchronously. So what could happen is a tap event\n   * on the video turns the controls off. Then the `touchend` event bubbles up to\n   * the player. Which, if it reported user activity, would turn the controls right\n   * back on. We also don't want to completely block touch events from bubbling up.\n   * Furthermore a `touchmove` event and anything other than a tap, should not turn\n   * controls back on.\n   *\n   * @listens Component#touchstart\n   * @listens Component#touchmove\n   * @listens Component#touchend\n   * @listens Component#touchcancel\n   */\n\n  Component.prototype.enableTouchActivity = function enableTouchActivity() {\n    // Don't continue if the root player doesn't support reporting user activity\n    if (!this.player() || !this.player().reportUserActivity) {\n      return;\n    }\n\n    // listener for reporting that the user is active\n    var report = Fn.bind(this.player(), this.player().reportUserActivity);\n    var touchHolding = void 0;\n    this.on('touchstart', function () {\n      report();\n      // For as long as the they are touching the device or have their mouse down,\n      // we consider them active even if they're not moving their finger or mouse.\n      // So we want to continue to update that they are active\n      this.clearInterval(touchHolding);\n      // report at the same interval as activityCheck\n      touchHolding = this.setInterval(report, 250);\n    });\n    var touchEnd = function touchEnd(event) {\n      report();\n      // stop the interval that maintains activity if the touch is holding\n      this.clearInterval(touchHolding);\n    };\n    this.on('touchmove', report);\n    this.on('touchend', touchEnd);\n    this.on('touchcancel', touchEnd);\n  };\n\n  /**\n   * A callback that has no parameters and is bound into `Component`s context.\n   *\n   * @callback Component~GenericCallback\n   * @this Component\n   */\n\n  /**\n   * Creates a function that runs after an `x` millisecond timeout. This function is a\n   * wrapper around `window.setTimeout`. There are a few reasons to use this one\n   * instead though:\n   * 1. It gets cleared via  {@link Component#clearTimeout} when\n   *    {@link Component#dispose} gets called.\n   * 2. The function callback will gets turned into a {@link Component~GenericCallback}\n   *\n   * > Note: You can use `window.clearTimeout` on the id returned by this function. This\n   *         will cause its dispose listener not to get cleaned up! Please use\n   *         {@link Component#clearTimeout} or {@link Component#dispose}.\n   *\n   * @param {Component~GenericCallback} fn\n   *        The function that will be run after `timeout`.\n   *\n   * @param {number} timeout\n   *        Timeout in milliseconds to delay before executing the specified function.\n   *\n   * @return {number}\n   *         Returns a timeout ID that gets used to identify the timeout. It can also\n   *         get used in {@link Component#clearTimeout} to clear the timeout that\n   *         was set.\n   *\n   * @listens Component#dispose\n   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setTimeout}\n   */\n\n  Component.prototype.setTimeout = function setTimeout(fn, timeout) {\n    fn = Fn.bind(this, fn);\n    var timeoutId = _window2['default'].setTimeout(fn, timeout);\n    var disposeFn = function disposeFn() {\n      this.clearTimeout(timeoutId);\n    };\n    disposeFn.guid = 'vjs-timeout-' + timeoutId;\n    this.on('dispose', disposeFn);\n    return timeoutId;\n  };\n\n  /**\n   * Clears a timeout that gets created via `window.setTimeout` or\n   * {@link Component#setTimeout}. If you set a timeout via {@link Component#setTimeout}\n   * use this function instead of `window.clearTimout`. If you don't your dispose\n   * listener will not get cleaned up until {@link Component#dispose}!\n   *\n   * @param {number} timeoutId\n   *        The id of the timeout to clear. The return value of\n   *        {@link Component#setTimeout} or `window.setTimeout`.\n   *\n   * @return {number}\n   *         Returns the timeout id that was cleared.\n   *\n   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/clearTimeout}\n   */\n\n  Component.prototype.clearTimeout = function clearTimeout(timeoutId) {\n    _window2['default'].clearTimeout(timeoutId);\n    var disposeFn = function disposeFn() {};\n    disposeFn.guid = 'vjs-timeout-' + timeoutId;\n    this.off('dispose', disposeFn);\n    return timeoutId;\n  };\n\n  /**\n   * Creates a function that gets run every `x` milliseconds. This function is a wrapper\n   * around `window.setInterval`. There are a few reasons to use this one instead though.\n   * 1. It gets cleared via  {@link Component#clearInterval} when\n   *    {@link Component#dispose} gets called.\n   * 2. The function callback will be a {@link Component~GenericCallback}\n   *\n   * @param {Component~GenericCallback} fn\n   *        The function to run every `x` seconds.\n   *\n   * @param {number} interval\n   *        Execute the specified function every `x` milliseconds.\n   *\n   * @return {number}\n   *         Returns an id that can be used to identify the interval. It can also be be used in\n   *         {@link Component#clearInterval} to clear the interval.\n   *\n   * @listens Component#dispose\n   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setInterval}\n   */\n\n  Component.prototype.setInterval = function setInterval(fn, interval) {\n    fn = Fn.bind(this, fn);\n    var intervalId = _window2['default'].setInterval(fn, interval);\n    var disposeFn = function disposeFn() {\n      this.clearInterval(intervalId);\n    };\n    disposeFn.guid = 'vjs-interval-' + intervalId;\n    this.on('dispose', disposeFn);\n    return intervalId;\n  };\n\n  /**\n   * Clears an interval that gets created via `window.setInterval` or\n   * {@link Component#setInterval}. If you set an inteval via {@link Component#setInterval}\n   * use this function instead of `window.clearInterval`. If you don't your dispose\n   * listener will not get cleaned up until {@link Component#dispose}!\n   *\n   * @param {number} intervalId\n   *        The id of the interval to clear. The return value of\n   *        {@link Component#setInterval} or `window.setInterval`.\n   *\n   * @return {number}\n   *         Returns the interval id that was cleared.\n   *\n   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/clearInterval}\n   */\n\n  Component.prototype.clearInterval = function clearInterval(intervalId) {\n    _window2['default'].clearInterval(intervalId);\n    var disposeFn = function disposeFn() {};\n    disposeFn.guid = 'vjs-interval-' + intervalId;\n    this.off('dispose', disposeFn);\n    return intervalId;\n  };\n\n  /**\n   * Register a `Component` with `videojs` given the name and the component.\n   *\n   * > NOTE: {@link Tech}s should not be registered as a `Component`. {@link Tech}s\n   *         should be registered using {@link Tech.registerTech} or\n   *         {@link videojs:videojs.registerTech}.\n   *\n   * > NOTE: This function can also be seen on videojs as\n   *         {@link videojs:videojs.registerComponent}.\n   *\n   * @param {string} name\n   *        The name of the `Component` to register.\n   *\n   * @param {Component} comp\n   *        The `Component` class to register.\n   *\n   * @return {Component}\n   *         The `Component` that was registered.\n   */\n\n  Component.registerComponent = function registerComponent(name, comp) {\n    if (!name) {\n      return;\n    }\n    name = (0, _toTitleCase2['default'])(name);\n    if (!Component.components_) {\n      Component.components_ = {};\n    }\n    if (name === 'Player' && Component.components_[name]) {\n      var Player = Component.components_[name];\n\n      // If we have players that were disposed, then their name will still be\n      // in Players.players. So, we must loop through and verify that the value\n      // for each item is not null. This allows registration of the Player component\n      // after all players have been disposed or before any were created.\n      if (Player.players && Object.keys(Player.players).length > 0 && Object.keys(Player.players).map(function (playerName) {\n        return Player.players[playerName];\n      }).every(Boolean)) {\n        throw new Error('Can not register Player component after player has been created');\n      }\n    }\n    Component.components_[name] = comp;\n    return comp;\n  };\n\n  /**\n   * Get a `Component` based on the name it was registered with.\n   *\n   * @param {string} name\n   *        The Name of the component to get.\n   *\n   * @return {Component}\n   *         The `Component` that got registered under the given name.\n   *\n   * @deprecated In `videojs` 6 this will not return `Component`s that were not\n   *             registered using {@link Component.registerComponent}. Currently we\n   *             check the global `videojs` object for a `Component` name and\n   *             return that if it exists.\n   */\n\n  Component.getComponent = function getComponent(name) {\n    if (!name) {\n      return;\n    }\n    name = (0, _toTitleCase2['default'])(name);\n    if (Component.components_ && Component.components_[name]) {\n      return Component.components_[name];\n    }\n    if (_window2['default'] && _window2['default'].videojs && _window2['default'].videojs[name]) {\n      _log2['default'].warn('The ' + name + ' component was added to the videojs object when it should be registered using videojs.registerComponent(name, component)');\n      return _window2['default'].videojs[name];\n    }\n  };\n\n  /**\n   * Sets up the constructor using the supplied init method or uses the init of the\n   * parent object.\n   *\n   * @param {Object} [props={}]\n   *        An object of properties.\n   *\n   * @return {Object}\n   *         the extended object.\n   *\n   * @deprecated since version 5\n   */\n\n  Component.extend = function extend(props) {\n    props = props || {};\n    _log2['default'].warn('Component.extend({}) has been deprecated, ' + ' use videojs.extend(Component, {}) instead');\n\n    // Set up the constructor using the supplied init method\n    // or using the init of the parent object\n    // Make sure to check the unobfuscated version for external libs\n    var init = props.init || props.init || this.prototype.init || this.prototype.init || function () {};\n    // In Resig's simple class inheritance (previously used) the constructor\n    //  is a function that calls `this.init.apply(arguments)`\n    // However that would prevent us from using `ParentObject.call(this);`\n    //  in a Child constructor because the `this` in `this.init`\n    //  would still refer to the Child and cause an infinite loop.\n    // We would instead have to do\n    //    `ParentObject.prototype.init.apply(this, arguments);`\n    //  Bleh. We're not creating a _super() function, so it's good to keep\n    //  the parent constructor reference simple.\n    var subObj = function subObj() {\n      init.apply(this, arguments);\n    };\n\n    // Inherit from this object's prototype\n    subObj.prototype = Object.create(this.prototype);\n    // Reset the constructor property for subObj otherwise\n    // instances of subObj would have the constructor of the parent Object\n    subObj.prototype.constructor = subObj;\n\n    // Make the class extendable\n    subObj.extend = Component.extend;\n\n    // Extend subObj's prototype with functions and other properties from props\n    for (var name in props) {\n      if (props.hasOwnProperty(name)) {\n        subObj.prototype[name] = props[name];\n      }\n    }\n    return subObj;\n  };\n  return Component;\n}();\nComponent.registerComponent('Component', Component);\nexports['default'] = Component;","map":{"version":3,"names":["exports","__esModule","_window","require","_window2","_interopRequireDefault","_dom","Dom","_interopRequireWildcard","_fn","Fn","_guid","Guid","_events","Events","_log","_log2","_toTitleCase","_toTitleCase2","_mergeOptions","_mergeOptions2","obj","newObj","key","Object","prototype","hasOwnProperty","call","_classCallCheck","instance","Constructor","TypeError","Component","player","options","ready","play","player_","options_","id_","id","el","newGUID","name_","name","el_","createEl","children_","childIndex_","childNameIndex_","initChildren","reportTouchActivity","enableTouchActivity","dispose","trigger","type","bubbles","i","length","off","parentNode","removeChild","removeElData","warn","tagName","properties","attributes","localize","string","code","language","languages","primaryCode","split","primaryLang","contentEl","contentEl_","children","getChildById","getChild","addChild","child","arguments","undefined","index","component","componentName","componentClassName","componentClass","ComponentClass","getComponent","Error","splice","childNodes","refNode","insertBefore","childFound","compEl","_this","parentOptions","handleAdd","opts","playerOptions","newChild","workingChildren","Tech","Array","isArray","keys","concat","filter","some","wchild","map","c","isTech","forEach","buildCSSClass","on","first","second","third","_this2","bind","target","fn","removeOnDispose","guid","cleanRemover","nodeName","one","_this3","_arguments","newFunc","apply","event","hash","sync","isReady_","setTimeout","readyQueue_","push","triggerReady","readyQueue","$","selector","context","$$","hasClass","classToCheck","hasElClass","addClass","classToAdd","addElClass","removeClass","classToRemove","removeElClass","toggleClass","classToToggle","predicate","toggleElClass","show","hide","lockShowing","unlockShowing","getAttribute","attribute","setAttribute","value","removeAttribute","width","num","skipListeners","dimension","height","dimensions","widthOrHeight","indexOf","style","val","pxIndex","parseInt","slice","currentDimension","computedWidthOrHeight","getComputedStyle","computedStyle","getPropertyValue","parseFloat","rule","currentDimensions","currentWidth","currentHeight","focus","blur","emitTapEvents","touchStart","firstTouch","tapMovementThreshold","touchTimeThreshold","couldBeTap","touches","pageX","pageY","Date","getTime","xdiff","ydiff","touchDistance","Math","sqrt","noTap","touchTime","preventDefault","reportUserActivity","report","touchHolding","clearInterval","setInterval","touchEnd","timeout","timeoutId","disposeFn","clearTimeout","interval","intervalId","registerComponent","comp","components_","Player","players","playerName","every","Boolean","videojs","extend","props","init","subObj","create","constructor"],"sources":["C:/Users/babu7/OneDrive/Desktop/djangoyoutube2/reelyoutube/frontend/node_modules/videojs-react/node_modules/video.js/es5/component.js"],"sourcesContent":["'use strict';\n\nexports.__esModule = true;\n\nvar _window = require('global/window');\n\nvar _window2 = _interopRequireDefault(_window);\n\nvar _dom = require('./utils/dom.js');\n\nvar Dom = _interopRequireWildcard(_dom);\n\nvar _fn = require('./utils/fn.js');\n\nvar Fn = _interopRequireWildcard(_fn);\n\nvar _guid = require('./utils/guid.js');\n\nvar Guid = _interopRequireWildcard(_guid);\n\nvar _events = require('./utils/events.js');\n\nvar Events = _interopRequireWildcard(_events);\n\nvar _log = require('./utils/log.js');\n\nvar _log2 = _interopRequireDefault(_log);\n\nvar _toTitleCase = require('./utils/to-title-case.js');\n\nvar _toTitleCase2 = _interopRequireDefault(_toTitleCase);\n\nvar _mergeOptions = require('./utils/merge-options.js');\n\nvar _mergeOptions2 = _interopRequireDefault(_mergeOptions);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } } /**\n                                                                                                                                                           * Player Component - Base class for all UI objects\n                                                                                                                                                           *\n                                                                                                                                                           * @file component.js\n                                                                                                                                                           */\n\n\n/**\n * Base class for all UI Components.\n * Components are UI objects which represent both a javascript object and an element\n * in the DOM. They can be children of other components, and can have\n * children themselves.\n *\n * Components can also use methods from {@link EventTarget}\n */\nvar Component = function () {\n\n  /**\n   * A callback that is called when a component is ready. Does not have any\n   * paramters and any callback value will be ignored.\n   *\n   * @callback Component~ReadyCallback\n   * @this Component\n   */\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   #\n   * @param {Object[]} [options.children]\n   *        An array of children objects to intialize this component with. Children objects have\n   *        a name property that will be used if more than one component of the same type needs to be\n   *        added.\n   *\n   * @param {Component~ReadyCallback} [ready]\n   *        Function that gets called when the `Component` is ready.\n   */\n  function Component(player, options, ready) {\n    _classCallCheck(this, Component);\n\n    // The component might be the player itself and we can't pass `this` to super\n    if (!player && this.play) {\n      this.player_ = player = this; // eslint-disable-line\n    } else {\n      this.player_ = player;\n    }\n\n    // Make a copy of prototype.options_ to protect against overriding defaults\n    this.options_ = (0, _mergeOptions2['default'])({}, this.options_);\n\n    // Updated options with supplied options\n    options = this.options_ = (0, _mergeOptions2['default'])(this.options_, options);\n\n    // Get ID from options or options element if one is supplied\n    this.id_ = options.id || options.el && options.el.id;\n\n    // If there was no ID from the options, generate one\n    if (!this.id_) {\n      // Don't require the player ID function in the case of mock players\n      var id = player && player.id && player.id() || 'no_player';\n\n      this.id_ = id + '_component_' + Guid.newGUID();\n    }\n\n    this.name_ = options.name || null;\n\n    // Create element if one wasn't provided in options\n    if (options.el) {\n      this.el_ = options.el;\n    } else if (options.createEl !== false) {\n      this.el_ = this.createEl();\n    }\n\n    this.children_ = [];\n    this.childIndex_ = {};\n    this.childNameIndex_ = {};\n\n    // Add any child components in options\n    if (options.initChildren !== false) {\n      this.initChildren();\n    }\n\n    this.ready(ready);\n    // Don't want to trigger ready here or it will before init is actually\n    // finished for all children that run this constructor\n\n    if (options.reportTouchActivity !== false) {\n      this.enableTouchActivity();\n    }\n  }\n\n  /**\n   * Dispose of the `Component` and all child components.\n   *\n   * @fires Component#dispose\n   */\n\n\n  Component.prototype.dispose = function dispose() {\n\n    /**\n     * Triggered when a `Component` is disposed.\n     *\n     * @event Component#dispose\n     * @type {EventTarget~Event}\n     *\n     * @property {boolean} [bubbles=false]\n     *           set to false so that the close event does not\n     *           bubble up\n     */\n    this.trigger({ type: 'dispose', bubbles: false });\n\n    // Dispose all children.\n    if (this.children_) {\n      for (var i = this.children_.length - 1; i >= 0; i--) {\n        if (this.children_[i].dispose) {\n          this.children_[i].dispose();\n        }\n      }\n    }\n\n    // Delete child references\n    this.children_ = null;\n    this.childIndex_ = null;\n    this.childNameIndex_ = null;\n\n    // Remove all event listeners.\n    this.off();\n\n    // Remove element from DOM\n    if (this.el_.parentNode) {\n      this.el_.parentNode.removeChild(this.el_);\n    }\n\n    Dom.removeElData(this.el_);\n    this.el_ = null;\n  };\n\n  /**\n   * Return the {@link Player} that the `Component` has attached to.\n   *\n   * @return {Player}\n   *         The player that this `Component` has attached to.\n   */\n\n\n  Component.prototype.player = function player() {\n    return this.player_;\n  };\n\n  /**\n   * Deep merge of options objects with new options.\n   * > Note: When both `obj` and `options` contain properties whose values are objects.\n   *         The two properties get merged using {@link module:mergeOptions}\n   *\n   * @param {Object} obj\n   *        The object that contains new options.\n   *\n   * @return {Object}\n   *         A new object of `this.options_` and `obj` merged together.\n   *\n   * @deprecated since version 5\n   */\n\n\n  Component.prototype.options = function options(obj) {\n    _log2['default'].warn('this.options() has been deprecated and will be moved to the constructor in 6.0');\n\n    if (!obj) {\n      return this.options_;\n    }\n\n    this.options_ = (0, _mergeOptions2['default'])(this.options_, obj);\n    return this.options_;\n  };\n\n  /**\n   * Get the `Component`s DOM element\n   *\n   * @return {Element}\n   *         The DOM element for this `Component`.\n   */\n\n\n  Component.prototype.el = function el() {\n    return this.el_;\n  };\n\n  /**\n   * Create the `Component`s DOM element.\n   *\n   * @param {string} [tagName]\n   *        Element's DOM node type. e.g. 'div'\n   *\n   * @param {Object} [properties]\n   *        An object of properties that should be set.\n   *\n   * @param {Object} [attributes]\n   *        An object of attributes that should be set.\n   *\n   * @return {Element}\n   *         The element that gets created.\n   */\n\n\n  Component.prototype.createEl = function createEl(tagName, properties, attributes) {\n    return Dom.createEl(tagName, properties, attributes);\n  };\n\n  /**\n   * Localize a string given the string in english.\n   *\n   * @param {string} string\n   *        The string to localize.\n   *\n   * @return {string}\n   *         The localized string or if no localization exists the english string.\n   */\n\n\n  Component.prototype.localize = function localize(string) {\n    var code = this.player_.language && this.player_.language();\n    var languages = this.player_.languages && this.player_.languages();\n\n    if (!code || !languages) {\n      return string;\n    }\n\n    var language = languages[code];\n\n    if (language && language[string]) {\n      return language[string];\n    }\n\n    var primaryCode = code.split('-')[0];\n    var primaryLang = languages[primaryCode];\n\n    if (primaryLang && primaryLang[string]) {\n      return primaryLang[string];\n    }\n\n    return string;\n  };\n\n  /**\n   * Return the `Component`s DOM element. This is where children get inserted.\n   * This will usually be the the same as the element returned in {@link Component#el}.\n   *\n   * @return {Element}\n   *         The content element for this `Component`.\n   */\n\n\n  Component.prototype.contentEl = function contentEl() {\n    return this.contentEl_ || this.el_;\n  };\n\n  /**\n   * Get this `Component`s ID\n   *\n   * @return {string}\n   *         The id of this `Component`\n   */\n\n\n  Component.prototype.id = function id() {\n    return this.id_;\n  };\n\n  /**\n   * Get the `Component`s name. The name gets used to reference the `Component`\n   * and is set during registration.\n   *\n   * @return {string}\n   *         The name of this `Component`.\n   */\n\n\n  Component.prototype.name = function name() {\n    return this.name_;\n  };\n\n  /**\n   * Get an array of all child components\n   *\n   * @return {Array}\n   *         The children\n   */\n\n\n  Component.prototype.children = function children() {\n    return this.children_;\n  };\n\n  /**\n   * Returns the child `Component` with the given `id`.\n   *\n   * @param {string} id\n   *        The id of the child `Component` to get.\n   *\n   * @return {Component|undefined}\n   *         The child `Component` with the given `id` or undefined.\n   */\n\n\n  Component.prototype.getChildById = function getChildById(id) {\n    return this.childIndex_[id];\n  };\n\n  /**\n   * Returns the child `Component` with the given `name`.\n   *\n   * @param {string} name\n   *        The name of the child `Component` to get.\n   *\n   * @return {Component|undefined}\n   *         The child `Component` with the given `name` or undefined.\n   */\n\n\n  Component.prototype.getChild = function getChild(name) {\n    if (!name) {\n      return;\n    }\n\n    name = (0, _toTitleCase2['default'])(name);\n\n    return this.childNameIndex_[name];\n  };\n\n  /**\n   * Add a child `Component` inside the current `Component`.\n   *\n   *\n   * @param {string|Component} child\n   *        The name or instance of a child to add.\n   *\n   * @param {Object} [options={}]\n   *        The key/value store of options that will get passed to children of\n   *        the child.\n   *\n   * @param {number} [index=this.children_.length]\n   *        The index to attempt to add a child into.\n   *\n   * @return {Component}\n   *         The `Component` that gets added as a child. When using a string the\n   *         `Component` will get created by this process.\n   */\n\n\n  Component.prototype.addChild = function addChild(child) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.children_.length;\n\n    var component = void 0;\n    var componentName = void 0;\n\n    // If child is a string, create component with options\n    if (typeof child === 'string') {\n      componentName = (0, _toTitleCase2['default'])(child);\n\n      // Options can also be specified as a boolean,\n      // so convert to an empty object if false.\n      if (!options) {\n        options = {};\n      }\n\n      // Same as above, but true is deprecated so show a warning.\n      if (options === true) {\n        _log2['default'].warn('Initializing a child component with `true` is deprecated.' + 'Children should be defined in an array when possible, ' + 'but if necessary use an object instead of `true`.');\n        options = {};\n      }\n\n      var componentClassName = options.componentClass || componentName;\n\n      // Set name through options\n      options.name = componentName;\n\n      // Create a new object & element for this controls set\n      // If there's no .player_, this is a player\n      var ComponentClass = Component.getComponent(componentClassName);\n\n      if (!ComponentClass) {\n        throw new Error('Component ' + componentClassName + ' does not exist');\n      }\n\n      // data stored directly on the videojs object may be\n      // misidentified as a component to retain\n      // backwards-compatibility with 4.x. check to make sure the\n      // component class can be instantiated.\n      if (typeof ComponentClass !== 'function') {\n        return null;\n      }\n\n      component = new ComponentClass(this.player_ || this, options);\n\n      // child is a component instance\n    } else {\n      component = child;\n    }\n\n    this.children_.splice(index, 0, component);\n\n    if (typeof component.id === 'function') {\n      this.childIndex_[component.id()] = component;\n    }\n\n    // If a name wasn't used to create the component, check if we can use the\n    // name function of the component\n    componentName = componentName || component.name && (0, _toTitleCase2['default'])(component.name());\n\n    if (componentName) {\n      this.childNameIndex_[componentName] = component;\n    }\n\n    // Add the UI object's element to the container div (box)\n    // Having an element is not required\n    if (typeof component.el === 'function' && component.el()) {\n      var childNodes = this.contentEl().children;\n      var refNode = childNodes[index] || null;\n\n      this.contentEl().insertBefore(component.el(), refNode);\n    }\n\n    // Return so it can stored on parent object if desired.\n    return component;\n  };\n\n  /**\n   * Remove a child `Component` from this `Component`s list of children. Also removes\n   * the child `Component`s element from this `Component`s element.\n   *\n   * @param {Component} component\n   *        The child `Component` to remove.\n   */\n\n\n  Component.prototype.removeChild = function removeChild(component) {\n    if (typeof component === 'string') {\n      component = this.getChild(component);\n    }\n\n    if (!component || !this.children_) {\n      return;\n    }\n\n    var childFound = false;\n\n    for (var i = this.children_.length - 1; i >= 0; i--) {\n      if (this.children_[i] === component) {\n        childFound = true;\n        this.children_.splice(i, 1);\n        break;\n      }\n    }\n\n    if (!childFound) {\n      return;\n    }\n\n    this.childIndex_[component.id()] = null;\n    this.childNameIndex_[component.name()] = null;\n\n    var compEl = component.el();\n\n    if (compEl && compEl.parentNode === this.contentEl()) {\n      this.contentEl().removeChild(component.el());\n    }\n  };\n\n  /**\n   * Add and initialize default child `Component`s based upon options.\n   */\n\n\n  Component.prototype.initChildren = function initChildren() {\n    var _this = this;\n\n    var children = this.options_.children;\n\n    if (children) {\n      // `this` is `parent`\n      var parentOptions = this.options_;\n\n      var handleAdd = function handleAdd(child) {\n        var name = child.name;\n        var opts = child.opts;\n\n        // Allow options for children to be set at the parent options\n        // e.g. videojs(id, { controlBar: false });\n        // instead of videojs(id, { children: { controlBar: false });\n        if (parentOptions[name] !== undefined) {\n          opts = parentOptions[name];\n        }\n\n        // Allow for disabling default components\n        // e.g. options['children']['posterImage'] = false\n        if (opts === false) {\n          return;\n        }\n\n        // Allow options to be passed as a simple boolean if no configuration\n        // is necessary.\n        if (opts === true) {\n          opts = {};\n        }\n\n        // We also want to pass the original player options\n        // to each component as well so they don't need to\n        // reach back into the player for options later.\n        opts.playerOptions = _this.options_.playerOptions;\n\n        // Create and add the child component.\n        // Add a direct reference to the child by name on the parent instance.\n        // If two of the same component are used, different names should be supplied\n        // for each\n        var newChild = _this.addChild(name, opts);\n\n        if (newChild) {\n          _this[name] = newChild;\n        }\n      };\n\n      // Allow for an array of children details to passed in the options\n      var workingChildren = void 0;\n      var Tech = Component.getComponent('Tech');\n\n      if (Array.isArray(children)) {\n        workingChildren = children;\n      } else {\n        workingChildren = Object.keys(children);\n      }\n\n      workingChildren\n      // children that are in this.options_ but also in workingChildren  would\n      // give us extra children we do not want. So, we want to filter them out.\n      .concat(Object.keys(this.options_).filter(function (child) {\n        return !workingChildren.some(function (wchild) {\n          if (typeof wchild === 'string') {\n            return child === wchild;\n          }\n          return child === wchild.name;\n        });\n      })).map(function (child) {\n        var name = void 0;\n        var opts = void 0;\n\n        if (typeof child === 'string') {\n          name = child;\n          opts = children[name] || _this.options_[name] || {};\n        } else {\n          name = child.name;\n          opts = child;\n        }\n\n        return { name: name, opts: opts };\n      }).filter(function (child) {\n        // we have to make sure that child.name isn't in the techOrder since\n        // techs are registerd as Components but can't aren't compatible\n        // See https://github.com/videojs/video.js/issues/2772\n        var c = Component.getComponent(child.opts.componentClass || (0, _toTitleCase2['default'])(child.name));\n\n        return c && !Tech.isTech(c);\n      }).forEach(handleAdd);\n    }\n  };\n\n  /**\n   * Builds the default DOM class name. Should be overriden by sub-components.\n   *\n   * @return {string}\n   *         The DOM class name for this object.\n   *\n   * @abstract\n   */\n\n\n  Component.prototype.buildCSSClass = function buildCSSClass() {\n    // Child classes can include a function that does:\n    // return 'CLASS NAME' + this._super();\n    return '';\n  };\n\n  /**\n   * Add an `event listener` to this `Component`s element.\n   *\n   * The benefit of using this over the following:\n   * - `VjsEvents.on(otherElement, 'eventName', myFunc)`\n   * - `otherComponent.on('eventName', myFunc)`\n   *\n   * 1. Is that the listeners will get cleaned up when either component gets disposed.\n   * 1. It will also bind `myComponent` as the context of `myFunc`.\n   * > NOTE: If you remove the element from the DOM that has used `on` you need to\n   *         clean up references using: `myComponent.trigger(el, 'dispose')`\n   *         This will also allow the browser to garbage collect it. In special\n   *         cases such as with `window` and `document`, which are both permanent,\n   *         this is not necessary.\n   *\n   * @param {string|Component|string[]} [first]\n   *        The event name, and array of event names, or another `Component`.\n   *\n   * @param {EventTarget~EventListener|string|string[]} [second]\n   *        The listener function, an event name, or an Array of events names.\n   *\n   * @param {EventTarget~EventListener} [third]\n   *        The event handler if `first` is a `Component` and `second` is an event name\n   *        or an Array of event names.\n   *\n   * @return {Component}\n   *         Returns itself; method can be chained.\n   *\n   * @listens Component#dispose\n   */\n\n\n  Component.prototype.on = function on(first, second, third) {\n    var _this2 = this;\n\n    if (typeof first === 'string' || Array.isArray(first)) {\n      Events.on(this.el_, first, Fn.bind(this, second));\n\n      // Targeting another component or element\n    } else {\n      var target = first;\n      var type = second;\n      var fn = Fn.bind(this, third);\n\n      // When this component is disposed, remove the listener from the other component\n      var removeOnDispose = function removeOnDispose() {\n        return _this2.off(target, type, fn);\n      };\n\n      // Use the same function ID so we can remove it later it using the ID\n      // of the original listener\n      removeOnDispose.guid = fn.guid;\n      this.on('dispose', removeOnDispose);\n\n      // If the other component is disposed first we need to clean the reference\n      // to the other component in this component's removeOnDispose listener\n      // Otherwise we create a memory leak.\n      var cleanRemover = function cleanRemover() {\n        return _this2.off('dispose', removeOnDispose);\n      };\n\n      // Add the same function ID so we can easily remove it later\n      cleanRemover.guid = fn.guid;\n\n      // Check if this is a DOM node\n      if (first.nodeName) {\n        // Add the listener to the other element\n        Events.on(target, type, fn);\n        Events.on(target, 'dispose', cleanRemover);\n\n        // Should be a component\n        // Not using `instanceof Component` because it makes mock players difficult\n      } else if (typeof first.on === 'function') {\n        // Add the listener to the other component\n        target.on(type, fn);\n        target.on('dispose', cleanRemover);\n      }\n    }\n\n    return this;\n  };\n\n  /**\n   * Remove an event listener from this `Component`s element. If the second argument is\n   * exluded all listeners for the type passed in as the first argument will be removed.\n   *\n   * @param {string|Component|string[]} [first]\n   *        The event name, and array of event names, or another `Component`.\n   *\n   * @param {EventTarget~EventListener|string|string[]} [second]\n   *        The listener function, an event name, or an Array of events names.\n   *\n   * @param {EventTarget~EventListener} [third]\n   *        The event handler if `first` is a `Component` and `second` is an event name\n   *        or an Array of event names.\n   *\n   * @return {Component}\n   *         Returns itself; method can be chained.\n   */\n\n\n  Component.prototype.off = function off(first, second, third) {\n    if (!first || typeof first === 'string' || Array.isArray(first)) {\n      Events.off(this.el_, first, second);\n    } else {\n      var target = first;\n      var type = second;\n      // Ensure there's at least a guid, even if the function hasn't been used\n      var fn = Fn.bind(this, third);\n\n      // Remove the dispose listener on this component,\n      // which was given the same guid as the event listener\n      this.off('dispose', fn);\n\n      if (first.nodeName) {\n        // Remove the listener\n        Events.off(target, type, fn);\n        // Remove the listener for cleaning the dispose listener\n        Events.off(target, 'dispose', fn);\n      } else {\n        target.off(type, fn);\n        target.off('dispose', fn);\n      }\n    }\n\n    return this;\n  };\n\n  /**\n   * Add an event listener that gets triggered only once and then gets removed.\n   *\n   * @param {string|Component|string[]} [first]\n   *        The event name, and array of event names, or another `Component`.\n   *\n   * @param {EventTarget~EventListener|string|string[]} [second]\n   *        The listener function, an event name, or an Array of events names.\n   *\n   * @param {EventTarget~EventListener} [third]\n   *        The event handler if `first` is a `Component` and `second` is an event name\n   *        or an Array of event names.\n   *\n   * @return {Component}\n   *         Returns itself; method can be chained.\n   */\n\n\n  Component.prototype.one = function one(first, second, third) {\n    var _this3 = this,\n        _arguments = arguments;\n\n    if (typeof first === 'string' || Array.isArray(first)) {\n      Events.one(this.el_, first, Fn.bind(this, second));\n    } else {\n      var target = first;\n      var type = second;\n      var fn = Fn.bind(this, third);\n\n      var newFunc = function newFunc() {\n        _this3.off(target, type, newFunc);\n        fn.apply(null, _arguments);\n      };\n\n      // Keep the same function ID so we can remove it later\n      newFunc.guid = fn.guid;\n\n      this.on(target, type, newFunc);\n    }\n\n    return this;\n  };\n\n  /**\n   * Trigger an event on an element.\n   *\n   * @param {EventTarget~Event|Object|string} event\n   *        The event name, and Event, or an event-like object with a type attribute\n   *        set to the event name.\n   *\n   * @param {Object} [hash]\n   *        Data hash to pass along with the event\n   *\n   * @return {Component}\n   *         Returns itself; method can be chained.\n   */\n\n\n  Component.prototype.trigger = function trigger(event, hash) {\n    Events.trigger(this.el_, event, hash);\n    return this;\n  };\n\n  /**\n   * Bind a listener to the component's ready state. If the ready event has already\n   * happened it will trigger the function immediately.\n   *\n   * @param  {Component~ReadyCallback} fn\n   *         A function to call when ready is triggered.\n   *\n   * @param  {boolean} [sync=false]\n   *         Execute the listener synchronously if `Component` is ready.\n   *\n   * @return {Component}\n   *         Returns itself; method can be chained.\n   */\n\n\n  Component.prototype.ready = function ready(fn) {\n    var sync = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    if (fn) {\n      if (this.isReady_) {\n        if (sync) {\n          fn.call(this);\n        } else {\n          // Call the function asynchronously by default for consistency\n          this.setTimeout(fn, 1);\n        }\n      } else {\n        this.readyQueue_ = this.readyQueue_ || [];\n        this.readyQueue_.push(fn);\n      }\n    }\n    return this;\n  };\n\n  /**\n   * Trigger all the ready listeners for this `Component`.\n   *\n   * @fires Component#ready\n   */\n\n\n  Component.prototype.triggerReady = function triggerReady() {\n    this.isReady_ = true;\n\n    // Ensure ready is triggerd asynchronously\n    this.setTimeout(function () {\n      var readyQueue = this.readyQueue_;\n\n      // Reset Ready Queue\n      this.readyQueue_ = [];\n\n      if (readyQueue && readyQueue.length > 0) {\n        readyQueue.forEach(function (fn) {\n          fn.call(this);\n        }, this);\n      }\n\n      // Allow for using event listeners also\n      /**\n       * Triggered when a `Component` is ready.\n       *\n       * @event Component#ready\n       * @type {EventTarget~Event}\n       */\n      this.trigger('ready');\n    }, 1);\n  };\n\n  /**\n   * Find a single DOM element matching a `selector`. This can be within the `Component`s\n   * `contentEl()` or another custom context.\n   *\n   * @param {string} selector\n   *        A valid CSS selector, which will be passed to `querySelector`.\n   *\n   * @param {Element|string} [context=this.contentEl()]\n   *        A DOM element within which to query. Can also be a selector string in\n   *        which case the first matching element will get used as context. If\n   *        missing `this.contentEl()` gets used. If  `this.contentEl()` returns\n   *        nothing it falls back to `document`.\n   *\n   * @return {Element|null}\n   *         the dom element that was found, or null\n   *\n   * @see [Information on CSS Selectors](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_Started/Selectors)\n   */\n\n\n  Component.prototype.$ = function $(selector, context) {\n    return Dom.$(selector, context || this.contentEl());\n  };\n\n  /**\n   * Finds all DOM element matching a `selector`. This can be within the `Component`s\n   * `contentEl()` or another custom context.\n   *\n   * @param {string} selector\n   *        A valid CSS selector, which will be passed to `querySelectorAll`.\n   *\n   * @param {Element|string} [context=this.contentEl()]\n   *        A DOM element within which to query. Can also be a selector string in\n   *        which case the first matching element will get used as context. If\n   *        missing `this.contentEl()` gets used. If  `this.contentEl()` returns\n   *        nothing it falls back to `document`.\n   *\n   * @return {NodeList}\n   *         a list of dom elements that were found\n   *\n   * @see [Information on CSS Selectors](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_Started/Selectors)\n   */\n\n\n  Component.prototype.$$ = function $$(selector, context) {\n    return Dom.$$(selector, context || this.contentEl());\n  };\n\n  /**\n   * Check if a component's element has a CSS class name.\n   *\n   * @param {string} classToCheck\n   *        CSS class name to check.\n   *\n   * @return {boolean}\n   *         - True if the `Component` has the class.\n   *         - False if the `Component` does not have the class`\n   */\n\n\n  Component.prototype.hasClass = function hasClass(classToCheck) {\n    return Dom.hasElClass(this.el_, classToCheck);\n  };\n\n  /**\n   * Add a CSS class name to the `Component`s element.\n   *\n   * @param {string} classToAdd\n   *        CSS class name to add\n   *\n   * @return {Component}\n   *         Returns itself; method can be chained.\n   */\n\n\n  Component.prototype.addClass = function addClass(classToAdd) {\n    Dom.addElClass(this.el_, classToAdd);\n    return this;\n  };\n\n  /**\n   * Remove a CSS class name from the `Component`s element.\n   *\n   * @param {string} classToRemove\n   *        CSS class name to remove\n   *\n   * @return {Component}\n   *         Returns itself; method can be chained.\n   */\n\n\n  Component.prototype.removeClass = function removeClass(classToRemove) {\n    Dom.removeElClass(this.el_, classToRemove);\n    return this;\n  };\n\n  /**\n   * Add or remove a CSS class name from the component's element.\n   * - `classToToggle` gets added when {@link Component#hasClass} would return false.\n   * - `classToToggle` gets removed when {@link Component#hasClass} would return true.\n   *\n   * @param  {string} classToToggle\n   *         The class to add or remove based on (@link Component#hasClass}\n   *\n   * @param  {boolean|Dom~predicate} [predicate]\n   *         An {@link Dom~predicate} function or a boolean\n   *\n   * @return {Component}\n   *         Returns itself; method can be chained.\n   */\n\n\n  Component.prototype.toggleClass = function toggleClass(classToToggle, predicate) {\n    Dom.toggleElClass(this.el_, classToToggle, predicate);\n    return this;\n  };\n\n  /**\n   * Show the `Component`s element if it is hidden by removing the\n   * 'vjs-hidden' class name from it.\n   *\n   * @return {Component}\n   *         Returns itself; method can be chained.\n   */\n\n\n  Component.prototype.show = function show() {\n    this.removeClass('vjs-hidden');\n    return this;\n  };\n\n  /**\n   * Hide the `Component`s element if it is currently showing by adding the\n   * 'vjs-hidden` class name to it.\n   *\n   * @return {Component}\n   *         Returns itself; method can be chained.\n   */\n\n\n  Component.prototype.hide = function hide() {\n    this.addClass('vjs-hidden');\n    return this;\n  };\n\n  /**\n   * Lock a `Component`s element in its visible state by adding the 'vjs-lock-showing'\n   * class name to it. Used during fadeIn/fadeOut.\n   *\n   * @return {Component}\n   *         Returns itself; method can be chained.\n   *\n   * @private\n   */\n\n\n  Component.prototype.lockShowing = function lockShowing() {\n    this.addClass('vjs-lock-showing');\n    return this;\n  };\n\n  /**\n   * Unlock a `Component`s element from its visible state by removing the 'vjs-lock-showing'\n   * class name from it. Used during fadeIn/fadeOut.\n   *\n   * @return {Component}\n   *         Returns itself; method can be chained.\n   *\n   * @private\n   */\n\n\n  Component.prototype.unlockShowing = function unlockShowing() {\n    this.removeClass('vjs-lock-showing');\n    return this;\n  };\n\n  /**\n   * Get the value of an attribute on the `Component`s element.\n   *\n   * @param {string} attribute\n   *        Name of the attribute to get the value from.\n   *\n   * @return {string|null}\n   *         - The value of the attribute that was asked for.\n   *         - Can be an empty string on some browsers if the attribute does not exist\n   *           or has no value\n   *         - Most browsers will return null if the attibute does not exist or has\n   *           no value.\n   *\n   * @see [DOM API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttribute}\n   */\n\n\n  Component.prototype.getAttribute = function getAttribute(attribute) {\n    return Dom.getAttribute(this.el_, attribute);\n  };\n\n  /**\n   * Set the value of an attribute on the `Component`'s element\n   *\n   * @param {string} attribute\n   *        Name of the attribute to set.\n   *\n   * @param {string} value\n   *        Value to set the attribute to.\n   *\n   * @return {Component}\n   *         Returns itself; method can be chained.\n   *\n   * @see [DOM API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttribute}\n   */\n\n\n  Component.prototype.setAttribute = function setAttribute(attribute, value) {\n    Dom.setAttribute(this.el_, attribute, value);\n    return this;\n  };\n\n  /**\n   * Remove an attribute from the `Component`s element.\n   *\n   * @param {string} attribute\n   *        Name of the attribute to remove.\n   *\n   * @return {Component}\n   *         Returns itself; method can be chained.\n   *\n   * @see [DOM API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttribute}\n   */\n\n\n  Component.prototype.removeAttribute = function removeAttribute(attribute) {\n    Dom.removeAttribute(this.el_, attribute);\n    return this;\n  };\n\n  /**\n   * Get or set the width of the component based upon the CSS styles.\n   * See {@link Component#dimension} for more detailed information.\n   *\n   * @param {number|string} [num]\n   *        The width that you want to set postfixed with '%', 'px' or nothing.\n   *\n   * @param {boolean} [skipListeners]\n   *        Skip the resize event trigger\n   *\n   * @return {Component|number|string}\n   *         - The width when getting, zero if there is no width. Can be a string\n   *           postpixed with '%' or 'px'.\n   *         - Returns itself when setting; method can be chained.\n   */\n\n\n  Component.prototype.width = function width(num, skipListeners) {\n    return this.dimension('width', num, skipListeners);\n  };\n\n  /**\n   * Get or set the height of the component based upon the CSS styles.\n   * See {@link Component#dimension} for more detailed information.\n   *\n   * @param {number|string} [num]\n   *        The height that you want to set postfixed with '%', 'px' or nothing.\n   *\n   * @param {boolean} [skipListeners]\n   *        Skip the resize event trigger\n   *\n   * @return {Component|number|string}\n   *         - The width when getting, zero if there is no width. Can be a string\n   *           postpixed with '%' or 'px'.\n   *         - Returns itself when setting; method can be chained.\n   */\n\n\n  Component.prototype.height = function height(num, skipListeners) {\n    return this.dimension('height', num, skipListeners);\n  };\n\n  /**\n   * Set both the width and height of the `Component` element at the same time.\n   *\n   * @param  {number|string} width\n   *         Width to set the `Component`s element to.\n   *\n   * @param  {number|string} height\n   *         Height to set the `Component`s element to.\n   *\n   * @return {Component}\n   *         Returns itself; method can be chained.\n   */\n\n\n  Component.prototype.dimensions = function dimensions(width, height) {\n    // Skip resize listeners on width for optimization\n    return this.width(width, true).height(height);\n  };\n\n  /**\n   * Get or set width or height of the `Component` element. This is the shared code\n   * for the {@link Component#width} and {@link Component#height}.\n   *\n   * Things to know:\n   * - If the width or height in an number this will return the number postfixed with 'px'.\n   * - If the width/height is a percent this will return the percent postfixed with '%'\n   * - Hidden elements have a width of 0 with `window.getComputedStyle`. This function\n   *   defaults to the `Component`s `style.width` and falls back to `window.getComputedStyle`.\n   *   See [this]{@link http://www.foliotek.com/devblog/getting-the-width-of-a-hidden-element-with-jquery-using-width/}\n   *   for more information\n   * - If you want the computed style of the component, use {@link Component#currentWidth}\n   *   and {@link {Component#currentHeight}\n   *\n   * @fires Component#resize\n   *\n   * @param {string} widthOrHeight\n   8        'width' or 'height'\n   *\n   * @param  {number|string} [num]\n   8         New dimension\n   *\n   * @param  {boolean} [skipListeners]\n   *         Skip resize event trigger\n   *\n   * @return {Component}\n   *         - the dimension when getting or 0 if unset\n   *         - Returns itself when setting; method can be chained.\n   */\n\n\n  Component.prototype.dimension = function dimension(widthOrHeight, num, skipListeners) {\n    if (num !== undefined) {\n      // Set to zero if null or literally NaN (NaN !== NaN)\n      if (num === null || num !== num) {\n        num = 0;\n      }\n\n      // Check if using css width/height (% or px) and adjust\n      if (('' + num).indexOf('%') !== -1 || ('' + num).indexOf('px') !== -1) {\n        this.el_.style[widthOrHeight] = num;\n      } else if (num === 'auto') {\n        this.el_.style[widthOrHeight] = '';\n      } else {\n        this.el_.style[widthOrHeight] = num + 'px';\n      }\n\n      // skipListeners allows us to avoid triggering the resize event when setting both width and height\n      if (!skipListeners) {\n        /**\n         * Triggered when a component is resized.\n         *\n         * @event Component#resize\n         * @type {EventTarget~Event}\n         */\n        this.trigger('resize');\n      }\n\n      // Return component\n      return this;\n    }\n\n    // Not setting a value, so getting it\n    // Make sure element exists\n    if (!this.el_) {\n      return 0;\n    }\n\n    // Get dimension value from style\n    var val = this.el_.style[widthOrHeight];\n    var pxIndex = val.indexOf('px');\n\n    if (pxIndex !== -1) {\n      // Return the pixel value with no 'px'\n      return parseInt(val.slice(0, pxIndex), 10);\n    }\n\n    // No px so using % or no style was set, so falling back to offsetWidth/height\n    // If component has display:none, offset will return 0\n    // TODO: handle display:none and no dimension style using px\n    return parseInt(this.el_['offset' + (0, _toTitleCase2['default'])(widthOrHeight)], 10);\n  };\n\n  /**\n   * Get the width or the height of the `Component` elements computed style. Uses\n   * `window.getComputedStyle`.\n   *\n   * @param {string} widthOrHeight\n   *        A string containing 'width' or 'height'. Whichever one you want to get.\n   *\n   * @return {number}\n   *         The dimension that gets asked for or 0 if nothing was set\n   *         for that dimension.\n   */\n\n\n  Component.prototype.currentDimension = function currentDimension(widthOrHeight) {\n    var computedWidthOrHeight = 0;\n\n    if (widthOrHeight !== 'width' && widthOrHeight !== 'height') {\n      throw new Error('currentDimension only accepts width or height value');\n    }\n\n    if (typeof _window2['default'].getComputedStyle === 'function') {\n      var computedStyle = _window2['default'].getComputedStyle(this.el_);\n\n      computedWidthOrHeight = computedStyle.getPropertyValue(widthOrHeight) || computedStyle[widthOrHeight];\n    }\n\n    // remove 'px' from variable and parse as integer\n    computedWidthOrHeight = parseFloat(computedWidthOrHeight);\n\n    // if the computed value is still 0, it's possible that the browser is lying\n    // and we want to check the offset values.\n    // This code also runs on IE8 and wherever getComputedStyle doesn't exist.\n    if (computedWidthOrHeight === 0) {\n      var rule = 'offset' + (0, _toTitleCase2['default'])(widthOrHeight);\n\n      computedWidthOrHeight = this.el_[rule];\n    }\n\n    return computedWidthOrHeight;\n  };\n\n  /**\n   * An object that contains width and height values of the `Component`s\n   * computed style. Uses `window.getComputedStyle`.\n   *\n   * @typedef {Object} Component~DimensionObject\n   *\n   * @property {number} width\n   *           The width of the `Component`s computed style.\n   *\n   * @property {number} height\n   *           The height of the `Component`s computed style.\n   */\n\n  /**\n   * Get an object that contains width and height values of the `Component`s\n   * computed style.\n   *\n   * @return {Component~DimensionObject}\n   *         The dimensions of the components element\n   */\n\n\n  Component.prototype.currentDimensions = function currentDimensions() {\n    return {\n      width: this.currentDimension('width'),\n      height: this.currentDimension('height')\n    };\n  };\n\n  /**\n   * Get the width of the `Component`s computed style. Uses `window.getComputedStyle`.\n   *\n   * @return {number} width\n   *           The width of the `Component`s computed style.\n   */\n\n\n  Component.prototype.currentWidth = function currentWidth() {\n    return this.currentDimension('width');\n  };\n\n  /**\n   * Get the height of the `Component`s computed style. Uses `window.getComputedStyle`.\n   *\n   * @return {number} height\n   *           The height of the `Component`s computed style.\n   */\n\n\n  Component.prototype.currentHeight = function currentHeight() {\n    return this.currentDimension('height');\n  };\n\n  /**\n   * Set the focus to this component\n   */\n\n\n  Component.prototype.focus = function focus() {\n    this.el_.focus();\n  };\n\n  /**\n   * Remove the focus from this component\n   */\n\n\n  Component.prototype.blur = function blur() {\n    this.el_.blur();\n  };\n\n  /**\n   * Emit a 'tap' events when touch event support gets detected. This gets used to\n   * support toggling the controls through a tap on the video. They get enabled\n   * because every sub-component would have extra overhead otherwise.\n   *\n   * @private\n   * @fires Component#tap\n   * @listens Component#touchstart\n   * @listens Component#touchmove\n   * @listens Component#touchleave\n   * @listens Component#touchcancel\n   * @listens Component#touchend\n    */\n\n\n  Component.prototype.emitTapEvents = function emitTapEvents() {\n    // Track the start time so we can determine how long the touch lasted\n    var touchStart = 0;\n    var firstTouch = null;\n\n    // Maximum movement allowed during a touch event to still be considered a tap\n    // Other popular libs use anywhere from 2 (hammer.js) to 15,\n    // so 10 seems like a nice, round number.\n    var tapMovementThreshold = 10;\n\n    // The maximum length a touch can be while still being considered a tap\n    var touchTimeThreshold = 200;\n\n    var couldBeTap = void 0;\n\n    this.on('touchstart', function (event) {\n      // If more than one finger, don't consider treating this as a click\n      if (event.touches.length === 1) {\n        // Copy pageX/pageY from the object\n        firstTouch = {\n          pageX: event.touches[0].pageX,\n          pageY: event.touches[0].pageY\n        };\n        // Record start time so we can detect a tap vs. \"touch and hold\"\n        touchStart = new Date().getTime();\n        // Reset couldBeTap tracking\n        couldBeTap = true;\n      }\n    });\n\n    this.on('touchmove', function (event) {\n      // If more than one finger, don't consider treating this as a click\n      if (event.touches.length > 1) {\n        couldBeTap = false;\n      } else if (firstTouch) {\n        // Some devices will throw touchmoves for all but the slightest of taps.\n        // So, if we moved only a small distance, this could still be a tap\n        var xdiff = event.touches[0].pageX - firstTouch.pageX;\n        var ydiff = event.touches[0].pageY - firstTouch.pageY;\n        var touchDistance = Math.sqrt(xdiff * xdiff + ydiff * ydiff);\n\n        if (touchDistance > tapMovementThreshold) {\n          couldBeTap = false;\n        }\n      }\n    });\n\n    var noTap = function noTap() {\n      couldBeTap = false;\n    };\n\n    // TODO: Listen to the original target. http://youtu.be/DujfpXOKUp8?t=13m8s\n    this.on('touchleave', noTap);\n    this.on('touchcancel', noTap);\n\n    // When the touch ends, measure how long it took and trigger the appropriate\n    // event\n    this.on('touchend', function (event) {\n      firstTouch = null;\n      // Proceed only if the touchmove/leave/cancel event didn't happen\n      if (couldBeTap === true) {\n        // Measure how long the touch lasted\n        var touchTime = new Date().getTime() - touchStart;\n\n        // Make sure the touch was less than the threshold to be considered a tap\n        if (touchTime < touchTimeThreshold) {\n          // Don't let browser turn this into a click\n          event.preventDefault();\n          /**\n           * Triggered when a `Component` is tapped.\n           *\n           * @event Component#tap\n           * @type {EventTarget~Event}\n           */\n          this.trigger('tap');\n          // It may be good to copy the touchend event object and change the\n          // type to tap, if the other event properties aren't exact after\n          // Events.fixEvent runs (e.g. event.target)\n        }\n      }\n    });\n  };\n\n  /**\n   * This function reports user activity whenever touch events happen. This can get\n   * turned off by any sub-components that wants touch events to act another way.\n   *\n   * Report user touch activity when touch events occur. User activity gets used to\n   * determine when controls should show/hide. It is simple when it comes to mouse\n   * events, because any mouse event should show the controls. So we capture mouse\n   * events that bubble up to the player and report activity when that happens.\n   * With touch events it isn't as easy as `touchstart` and `touchend` toggle player\n   * controls. So touch events can't help us at the player level either.\n   *\n   * User activity gets checked asynchronously. So what could happen is a tap event\n   * on the video turns the controls off. Then the `touchend` event bubbles up to\n   * the player. Which, if it reported user activity, would turn the controls right\n   * back on. We also don't want to completely block touch events from bubbling up.\n   * Furthermore a `touchmove` event and anything other than a tap, should not turn\n   * controls back on.\n   *\n   * @listens Component#touchstart\n   * @listens Component#touchmove\n   * @listens Component#touchend\n   * @listens Component#touchcancel\n   */\n\n\n  Component.prototype.enableTouchActivity = function enableTouchActivity() {\n    // Don't continue if the root player doesn't support reporting user activity\n    if (!this.player() || !this.player().reportUserActivity) {\n      return;\n    }\n\n    // listener for reporting that the user is active\n    var report = Fn.bind(this.player(), this.player().reportUserActivity);\n\n    var touchHolding = void 0;\n\n    this.on('touchstart', function () {\n      report();\n      // For as long as the they are touching the device or have their mouse down,\n      // we consider them active even if they're not moving their finger or mouse.\n      // So we want to continue to update that they are active\n      this.clearInterval(touchHolding);\n      // report at the same interval as activityCheck\n      touchHolding = this.setInterval(report, 250);\n    });\n\n    var touchEnd = function touchEnd(event) {\n      report();\n      // stop the interval that maintains activity if the touch is holding\n      this.clearInterval(touchHolding);\n    };\n\n    this.on('touchmove', report);\n    this.on('touchend', touchEnd);\n    this.on('touchcancel', touchEnd);\n  };\n\n  /**\n   * A callback that has no parameters and is bound into `Component`s context.\n   *\n   * @callback Component~GenericCallback\n   * @this Component\n   */\n\n  /**\n   * Creates a function that runs after an `x` millisecond timeout. This function is a\n   * wrapper around `window.setTimeout`. There are a few reasons to use this one\n   * instead though:\n   * 1. It gets cleared via  {@link Component#clearTimeout} when\n   *    {@link Component#dispose} gets called.\n   * 2. The function callback will gets turned into a {@link Component~GenericCallback}\n   *\n   * > Note: You can use `window.clearTimeout` on the id returned by this function. This\n   *         will cause its dispose listener not to get cleaned up! Please use\n   *         {@link Component#clearTimeout} or {@link Component#dispose}.\n   *\n   * @param {Component~GenericCallback} fn\n   *        The function that will be run after `timeout`.\n   *\n   * @param {number} timeout\n   *        Timeout in milliseconds to delay before executing the specified function.\n   *\n   * @return {number}\n   *         Returns a timeout ID that gets used to identify the timeout. It can also\n   *         get used in {@link Component#clearTimeout} to clear the timeout that\n   *         was set.\n   *\n   * @listens Component#dispose\n   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setTimeout}\n   */\n\n\n  Component.prototype.setTimeout = function setTimeout(fn, timeout) {\n    fn = Fn.bind(this, fn);\n\n    var timeoutId = _window2['default'].setTimeout(fn, timeout);\n    var disposeFn = function disposeFn() {\n      this.clearTimeout(timeoutId);\n    };\n\n    disposeFn.guid = 'vjs-timeout-' + timeoutId;\n\n    this.on('dispose', disposeFn);\n\n    return timeoutId;\n  };\n\n  /**\n   * Clears a timeout that gets created via `window.setTimeout` or\n   * {@link Component#setTimeout}. If you set a timeout via {@link Component#setTimeout}\n   * use this function instead of `window.clearTimout`. If you don't your dispose\n   * listener will not get cleaned up until {@link Component#dispose}!\n   *\n   * @param {number} timeoutId\n   *        The id of the timeout to clear. The return value of\n   *        {@link Component#setTimeout} or `window.setTimeout`.\n   *\n   * @return {number}\n   *         Returns the timeout id that was cleared.\n   *\n   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/clearTimeout}\n   */\n\n\n  Component.prototype.clearTimeout = function clearTimeout(timeoutId) {\n    _window2['default'].clearTimeout(timeoutId);\n\n    var disposeFn = function disposeFn() {};\n\n    disposeFn.guid = 'vjs-timeout-' + timeoutId;\n\n    this.off('dispose', disposeFn);\n\n    return timeoutId;\n  };\n\n  /**\n   * Creates a function that gets run every `x` milliseconds. This function is a wrapper\n   * around `window.setInterval`. There are a few reasons to use this one instead though.\n   * 1. It gets cleared via  {@link Component#clearInterval} when\n   *    {@link Component#dispose} gets called.\n   * 2. The function callback will be a {@link Component~GenericCallback}\n   *\n   * @param {Component~GenericCallback} fn\n   *        The function to run every `x` seconds.\n   *\n   * @param {number} interval\n   *        Execute the specified function every `x` milliseconds.\n   *\n   * @return {number}\n   *         Returns an id that can be used to identify the interval. It can also be be used in\n   *         {@link Component#clearInterval} to clear the interval.\n   *\n   * @listens Component#dispose\n   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setInterval}\n   */\n\n\n  Component.prototype.setInterval = function setInterval(fn, interval) {\n    fn = Fn.bind(this, fn);\n\n    var intervalId = _window2['default'].setInterval(fn, interval);\n\n    var disposeFn = function disposeFn() {\n      this.clearInterval(intervalId);\n    };\n\n    disposeFn.guid = 'vjs-interval-' + intervalId;\n\n    this.on('dispose', disposeFn);\n\n    return intervalId;\n  };\n\n  /**\n   * Clears an interval that gets created via `window.setInterval` or\n   * {@link Component#setInterval}. If you set an inteval via {@link Component#setInterval}\n   * use this function instead of `window.clearInterval`. If you don't your dispose\n   * listener will not get cleaned up until {@link Component#dispose}!\n   *\n   * @param {number} intervalId\n   *        The id of the interval to clear. The return value of\n   *        {@link Component#setInterval} or `window.setInterval`.\n   *\n   * @return {number}\n   *         Returns the interval id that was cleared.\n   *\n   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/clearInterval}\n   */\n\n\n  Component.prototype.clearInterval = function clearInterval(intervalId) {\n    _window2['default'].clearInterval(intervalId);\n\n    var disposeFn = function disposeFn() {};\n\n    disposeFn.guid = 'vjs-interval-' + intervalId;\n\n    this.off('dispose', disposeFn);\n\n    return intervalId;\n  };\n\n  /**\n   * Register a `Component` with `videojs` given the name and the component.\n   *\n   * > NOTE: {@link Tech}s should not be registered as a `Component`. {@link Tech}s\n   *         should be registered using {@link Tech.registerTech} or\n   *         {@link videojs:videojs.registerTech}.\n   *\n   * > NOTE: This function can also be seen on videojs as\n   *         {@link videojs:videojs.registerComponent}.\n   *\n   * @param {string} name\n   *        The name of the `Component` to register.\n   *\n   * @param {Component} comp\n   *        The `Component` class to register.\n   *\n   * @return {Component}\n   *         The `Component` that was registered.\n   */\n\n\n  Component.registerComponent = function registerComponent(name, comp) {\n    if (!name) {\n      return;\n    }\n\n    name = (0, _toTitleCase2['default'])(name);\n\n    if (!Component.components_) {\n      Component.components_ = {};\n    }\n\n    if (name === 'Player' && Component.components_[name]) {\n      var Player = Component.components_[name];\n\n      // If we have players that were disposed, then their name will still be\n      // in Players.players. So, we must loop through and verify that the value\n      // for each item is not null. This allows registration of the Player component\n      // after all players have been disposed or before any were created.\n      if (Player.players && Object.keys(Player.players).length > 0 && Object.keys(Player.players).map(function (playerName) {\n        return Player.players[playerName];\n      }).every(Boolean)) {\n        throw new Error('Can not register Player component after player has been created');\n      }\n    }\n\n    Component.components_[name] = comp;\n\n    return comp;\n  };\n\n  /**\n   * Get a `Component` based on the name it was registered with.\n   *\n   * @param {string} name\n   *        The Name of the component to get.\n   *\n   * @return {Component}\n   *         The `Component` that got registered under the given name.\n   *\n   * @deprecated In `videojs` 6 this will not return `Component`s that were not\n   *             registered using {@link Component.registerComponent}. Currently we\n   *             check the global `videojs` object for a `Component` name and\n   *             return that if it exists.\n   */\n\n\n  Component.getComponent = function getComponent(name) {\n    if (!name) {\n      return;\n    }\n\n    name = (0, _toTitleCase2['default'])(name);\n\n    if (Component.components_ && Component.components_[name]) {\n      return Component.components_[name];\n    }\n\n    if (_window2['default'] && _window2['default'].videojs && _window2['default'].videojs[name]) {\n      _log2['default'].warn('The ' + name + ' component was added to the videojs object when it should be registered using videojs.registerComponent(name, component)');\n\n      return _window2['default'].videojs[name];\n    }\n  };\n\n  /**\n   * Sets up the constructor using the supplied init method or uses the init of the\n   * parent object.\n   *\n   * @param {Object} [props={}]\n   *        An object of properties.\n   *\n   * @return {Object}\n   *         the extended object.\n   *\n   * @deprecated since version 5\n   */\n\n\n  Component.extend = function extend(props) {\n    props = props || {};\n\n    _log2['default'].warn('Component.extend({}) has been deprecated, ' + ' use videojs.extend(Component, {}) instead');\n\n    // Set up the constructor using the supplied init method\n    // or using the init of the parent object\n    // Make sure to check the unobfuscated version for external libs\n    var init = props.init || props.init || this.prototype.init || this.prototype.init || function () {};\n    // In Resig's simple class inheritance (previously used) the constructor\n    //  is a function that calls `this.init.apply(arguments)`\n    // However that would prevent us from using `ParentObject.call(this);`\n    //  in a Child constructor because the `this` in `this.init`\n    //  would still refer to the Child and cause an infinite loop.\n    // We would instead have to do\n    //    `ParentObject.prototype.init.apply(this, arguments);`\n    //  Bleh. We're not creating a _super() function, so it's good to keep\n    //  the parent constructor reference simple.\n    var subObj = function subObj() {\n      init.apply(this, arguments);\n    };\n\n    // Inherit from this object's prototype\n    subObj.prototype = Object.create(this.prototype);\n    // Reset the constructor property for subObj otherwise\n    // instances of subObj would have the constructor of the parent Object\n    subObj.prototype.constructor = subObj;\n\n    // Make the class extendable\n    subObj.extend = Component.extend;\n\n    // Extend subObj's prototype with functions and other properties from props\n    for (var name in props) {\n      if (props.hasOwnProperty(name)) {\n        subObj.prototype[name] = props[name];\n      }\n    }\n\n    return subObj;\n  };\n\n  return Component;\n}();\n\nComponent.registerComponent('Component', Component);\nexports['default'] = Component;\n"],"mappings":"AAAA,YAAY;;AAEZA,OAAO,CAACC,UAAU,GAAG,IAAI;AAEzB,IAAIC,OAAO,GAAGC,OAAO,CAAC,eAAe,CAAC;AAEtC,IAAIC,QAAQ,GAAGC,sBAAsB,CAACH,OAAO,CAAC;AAE9C,IAAII,IAAI,GAAGH,OAAO,CAAC,gBAAgB,CAAC;AAEpC,IAAII,GAAG,GAAGC,uBAAuB,CAACF,IAAI,CAAC;AAEvC,IAAIG,GAAG,GAAGN,OAAO,CAAC,eAAe,CAAC;AAElC,IAAIO,EAAE,GAAGF,uBAAuB,CAACC,GAAG,CAAC;AAErC,IAAIE,KAAK,GAAGR,OAAO,CAAC,iBAAiB,CAAC;AAEtC,IAAIS,IAAI,GAAGJ,uBAAuB,CAACG,KAAK,CAAC;AAEzC,IAAIE,OAAO,GAAGV,OAAO,CAAC,mBAAmB,CAAC;AAE1C,IAAIW,MAAM,GAAGN,uBAAuB,CAACK,OAAO,CAAC;AAE7C,IAAIE,IAAI,GAAGZ,OAAO,CAAC,gBAAgB,CAAC;AAEpC,IAAIa,KAAK,GAAGX,sBAAsB,CAACU,IAAI,CAAC;AAExC,IAAIE,YAAY,GAAGd,OAAO,CAAC,0BAA0B,CAAC;AAEtD,IAAIe,aAAa,GAAGb,sBAAsB,CAACY,YAAY,CAAC;AAExD,IAAIE,aAAa,GAAGhB,OAAO,CAAC,0BAA0B,CAAC;AAEvD,IAAIiB,cAAc,GAAGf,sBAAsB,CAACc,aAAa,CAAC;AAE1D,SAASX,uBAAuBA,CAACa,GAAG,EAAE;EAAE,IAAIA,GAAG,IAAIA,GAAG,CAACpB,UAAU,EAAE;IAAE,OAAOoB,GAAG;EAAE,CAAC,MAAM;IAAE,IAAIC,MAAM,GAAG,CAAC,CAAC;IAAE,IAAID,GAAG,IAAI,IAAI,EAAE;MAAE,KAAK,IAAIE,GAAG,IAAIF,GAAG,EAAE;QAAE,IAAIG,MAAM,CAACC,SAAS,CAACC,cAAc,CAACC,IAAI,CAACN,GAAG,EAAEE,GAAG,CAAC,EAAED,MAAM,CAACC,GAAG,CAAC,GAAGF,GAAG,CAACE,GAAG,CAAC;MAAE;IAAE;IAAED,MAAM,CAAC,SAAS,CAAC,GAAGD,GAAG;IAAE,OAAOC,MAAM;EAAE;AAAE;AAE/Q,SAASjB,sBAAsBA,CAACgB,GAAG,EAAE;EAAE,OAAOA,GAAG,IAAIA,GAAG,CAACpB,UAAU,GAAGoB,GAAG,GAAG;IAAE,SAAS,EAAEA;EAAI,CAAC;AAAE;AAEhG,SAASO,eAAeA,CAACC,QAAQ,EAAEC,WAAW,EAAE;EAAE,IAAI,EAAED,QAAQ,YAAYC,WAAW,CAAC,EAAE;IAAE,MAAM,IAAIC,SAAS,CAAC,mCAAmC,CAAC;EAAE;AAAE,CAAC,CAAC;AAC1J;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,SAAS,GAAG,YAAY;EAE1B;AACF;AACA;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,SAASA,SAASA,CAACC,MAAM,EAAEC,OAAO,EAAEC,KAAK,EAAE;IACzCP,eAAe,CAAC,IAAI,EAAEI,SAAS,CAAC;;IAEhC;IACA,IAAI,CAACC,MAAM,IAAI,IAAI,CAACG,IAAI,EAAE;MACxB,IAAI,CAACC,OAAO,GAAGJ,MAAM,GAAG,IAAI,CAAC,CAAC;IAChC,CAAC,MAAM;MACL,IAAI,CAACI,OAAO,GAAGJ,MAAM;IACvB;;IAEA;IACA,IAAI,CAACK,QAAQ,GAAG,CAAC,CAAC,EAAElB,cAAc,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,CAACkB,QAAQ,CAAC;;IAEjE;IACAJ,OAAO,GAAG,IAAI,CAACI,QAAQ,GAAG,CAAC,CAAC,EAAElB,cAAc,CAAC,SAAS,CAAC,EAAE,IAAI,CAACkB,QAAQ,EAAEJ,OAAO,CAAC;;IAEhF;IACA,IAAI,CAACK,GAAG,GAAGL,OAAO,CAACM,EAAE,IAAIN,OAAO,CAACO,EAAE,IAAIP,OAAO,CAACO,EAAE,CAACD,EAAE;;IAEpD;IACA,IAAI,CAAC,IAAI,CAACD,GAAG,EAAE;MACb;MACA,IAAIC,EAAE,GAAGP,MAAM,IAAIA,MAAM,CAACO,EAAE,IAAIP,MAAM,CAACO,EAAE,CAAC,CAAC,IAAI,WAAW;MAE1D,IAAI,CAACD,GAAG,GAAGC,EAAE,GAAG,aAAa,GAAG5B,IAAI,CAAC8B,OAAO,CAAC,CAAC;IAChD;IAEA,IAAI,CAACC,KAAK,GAAGT,OAAO,CAACU,IAAI,IAAI,IAAI;;IAEjC;IACA,IAAIV,OAAO,CAACO,EAAE,EAAE;MACd,IAAI,CAACI,GAAG,GAAGX,OAAO,CAACO,EAAE;IACvB,CAAC,MAAM,IAAIP,OAAO,CAACY,QAAQ,KAAK,KAAK,EAAE;MACrC,IAAI,CAACD,GAAG,GAAG,IAAI,CAACC,QAAQ,CAAC,CAAC;IAC5B;IAEA,IAAI,CAACC,SAAS,GAAG,EAAE;IACnB,IAAI,CAACC,WAAW,GAAG,CAAC,CAAC;IACrB,IAAI,CAACC,eAAe,GAAG,CAAC,CAAC;;IAEzB;IACA,IAAIf,OAAO,CAACgB,YAAY,KAAK,KAAK,EAAE;MAClC,IAAI,CAACA,YAAY,CAAC,CAAC;IACrB;IAEA,IAAI,CAACf,KAAK,CAACA,KAAK,CAAC;IACjB;IACA;;IAEA,IAAID,OAAO,CAACiB,mBAAmB,KAAK,KAAK,EAAE;MACzC,IAAI,CAACC,mBAAmB,CAAC,CAAC;IAC5B;EACF;;EAEA;AACF;AACA;AACA;AACA;;EAGEpB,SAAS,CAACP,SAAS,CAAC4B,OAAO,GAAG,SAASA,OAAOA,CAAA,EAAG;IAE/C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACI,IAAI,CAACC,OAAO,CAAC;MAAEC,IAAI,EAAE,SAAS;MAAEC,OAAO,EAAE;IAAM,CAAC,CAAC;;IAEjD;IACA,IAAI,IAAI,CAACT,SAAS,EAAE;MAClB,KAAK,IAAIU,CAAC,GAAG,IAAI,CAACV,SAAS,CAACW,MAAM,GAAG,CAAC,EAAED,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;QACnD,IAAI,IAAI,CAACV,SAAS,CAACU,CAAC,CAAC,CAACJ,OAAO,EAAE;UAC7B,IAAI,CAACN,SAAS,CAACU,CAAC,CAAC,CAACJ,OAAO,CAAC,CAAC;QAC7B;MACF;IACF;;IAEA;IACA,IAAI,CAACN,SAAS,GAAG,IAAI;IACrB,IAAI,CAACC,WAAW,GAAG,IAAI;IACvB,IAAI,CAACC,eAAe,GAAG,IAAI;;IAE3B;IACA,IAAI,CAACU,GAAG,CAAC,CAAC;;IAEV;IACA,IAAI,IAAI,CAACd,GAAG,CAACe,UAAU,EAAE;MACvB,IAAI,CAACf,GAAG,CAACe,UAAU,CAACC,WAAW,CAAC,IAAI,CAAChB,GAAG,CAAC;IAC3C;IAEAtC,GAAG,CAACuD,YAAY,CAAC,IAAI,CAACjB,GAAG,CAAC;IAC1B,IAAI,CAACA,GAAG,GAAG,IAAI;EACjB,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;;EAGEb,SAAS,CAACP,SAAS,CAACQ,MAAM,GAAG,SAASA,MAAMA,CAAA,EAAG;IAC7C,OAAO,IAAI,CAACI,OAAO;EACrB,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGEL,SAAS,CAACP,SAAS,CAACS,OAAO,GAAG,SAASA,OAAOA,CAACb,GAAG,EAAE;IAClDL,KAAK,CAAC,SAAS,CAAC,CAAC+C,IAAI,CAAC,gFAAgF,CAAC;IAEvG,IAAI,CAAC1C,GAAG,EAAE;MACR,OAAO,IAAI,CAACiB,QAAQ;IACtB;IAEA,IAAI,CAACA,QAAQ,GAAG,CAAC,CAAC,EAAElB,cAAc,CAAC,SAAS,CAAC,EAAE,IAAI,CAACkB,QAAQ,EAAEjB,GAAG,CAAC;IAClE,OAAO,IAAI,CAACiB,QAAQ;EACtB,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;;EAGEN,SAAS,CAACP,SAAS,CAACgB,EAAE,GAAG,SAASA,EAAEA,CAAA,EAAG;IACrC,OAAO,IAAI,CAACI,GAAG;EACjB,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGEb,SAAS,CAACP,SAAS,CAACqB,QAAQ,GAAG,SAASA,QAAQA,CAACkB,OAAO,EAAEC,UAAU,EAAEC,UAAU,EAAE;IAChF,OAAO3D,GAAG,CAACuC,QAAQ,CAACkB,OAAO,EAAEC,UAAU,EAAEC,UAAU,CAAC;EACtD,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGElC,SAAS,CAACP,SAAS,CAAC0C,QAAQ,GAAG,SAASA,QAAQA,CAACC,MAAM,EAAE;IACvD,IAAIC,IAAI,GAAG,IAAI,CAAChC,OAAO,CAACiC,QAAQ,IAAI,IAAI,CAACjC,OAAO,CAACiC,QAAQ,CAAC,CAAC;IAC3D,IAAIC,SAAS,GAAG,IAAI,CAAClC,OAAO,CAACkC,SAAS,IAAI,IAAI,CAAClC,OAAO,CAACkC,SAAS,CAAC,CAAC;IAElE,IAAI,CAACF,IAAI,IAAI,CAACE,SAAS,EAAE;MACvB,OAAOH,MAAM;IACf;IAEA,IAAIE,QAAQ,GAAGC,SAAS,CAACF,IAAI,CAAC;IAE9B,IAAIC,QAAQ,IAAIA,QAAQ,CAACF,MAAM,CAAC,EAAE;MAChC,OAAOE,QAAQ,CAACF,MAAM,CAAC;IACzB;IAEA,IAAII,WAAW,GAAGH,IAAI,CAACI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACpC,IAAIC,WAAW,GAAGH,SAAS,CAACC,WAAW,CAAC;IAExC,IAAIE,WAAW,IAAIA,WAAW,CAACN,MAAM,CAAC,EAAE;MACtC,OAAOM,WAAW,CAACN,MAAM,CAAC;IAC5B;IAEA,OAAOA,MAAM;EACf,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;EAGEpC,SAAS,CAACP,SAAS,CAACkD,SAAS,GAAG,SAASA,SAASA,CAAA,EAAG;IACnD,OAAO,IAAI,CAACC,UAAU,IAAI,IAAI,CAAC/B,GAAG;EACpC,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;;EAGEb,SAAS,CAACP,SAAS,CAACe,EAAE,GAAG,SAASA,EAAEA,CAAA,EAAG;IACrC,OAAO,IAAI,CAACD,GAAG;EACjB,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;EAGEP,SAAS,CAACP,SAAS,CAACmB,IAAI,GAAG,SAASA,IAAIA,CAAA,EAAG;IACzC,OAAO,IAAI,CAACD,KAAK;EACnB,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;;EAGEX,SAAS,CAACP,SAAS,CAACoD,QAAQ,GAAG,SAASA,QAAQA,CAAA,EAAG;IACjD,OAAO,IAAI,CAAC9B,SAAS;EACvB,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGEf,SAAS,CAACP,SAAS,CAACqD,YAAY,GAAG,SAASA,YAAYA,CAACtC,EAAE,EAAE;IAC3D,OAAO,IAAI,CAACQ,WAAW,CAACR,EAAE,CAAC;EAC7B,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGER,SAAS,CAACP,SAAS,CAACsD,QAAQ,GAAG,SAASA,QAAQA,CAACnC,IAAI,EAAE;IACrD,IAAI,CAACA,IAAI,EAAE;MACT;IACF;IAEAA,IAAI,GAAG,CAAC,CAAC,EAAE1B,aAAa,CAAC,SAAS,CAAC,EAAE0B,IAAI,CAAC;IAE1C,OAAO,IAAI,CAACK,eAAe,CAACL,IAAI,CAAC;EACnC,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGEZ,SAAS,CAACP,SAAS,CAACuD,QAAQ,GAAG,SAASA,QAAQA,CAACC,KAAK,EAAE;IACtD,IAAI/C,OAAO,GAAGgD,SAAS,CAACxB,MAAM,GAAG,CAAC,IAAIwB,SAAS,CAAC,CAAC,CAAC,KAAKC,SAAS,GAAGD,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IACpF,IAAIE,KAAK,GAAGF,SAAS,CAACxB,MAAM,GAAG,CAAC,IAAIwB,SAAS,CAAC,CAAC,CAAC,KAAKC,SAAS,GAAGD,SAAS,CAAC,CAAC,CAAC,GAAG,IAAI,CAACnC,SAAS,CAACW,MAAM;IAErG,IAAI2B,SAAS,GAAG,KAAK,CAAC;IACtB,IAAIC,aAAa,GAAG,KAAK,CAAC;;IAE1B;IACA,IAAI,OAAOL,KAAK,KAAK,QAAQ,EAAE;MAC7BK,aAAa,GAAG,CAAC,CAAC,EAAEpE,aAAa,CAAC,SAAS,CAAC,EAAE+D,KAAK,CAAC;;MAEpD;MACA;MACA,IAAI,CAAC/C,OAAO,EAAE;QACZA,OAAO,GAAG,CAAC,CAAC;MACd;;MAEA;MACA,IAAIA,OAAO,KAAK,IAAI,EAAE;QACpBlB,KAAK,CAAC,SAAS,CAAC,CAAC+C,IAAI,CAAC,2DAA2D,GAAG,wDAAwD,GAAG,mDAAmD,CAAC;QACnM7B,OAAO,GAAG,CAAC,CAAC;MACd;MAEA,IAAIqD,kBAAkB,GAAGrD,OAAO,CAACsD,cAAc,IAAIF,aAAa;;MAEhE;MACApD,OAAO,CAACU,IAAI,GAAG0C,aAAa;;MAE5B;MACA;MACA,IAAIG,cAAc,GAAGzD,SAAS,CAAC0D,YAAY,CAACH,kBAAkB,CAAC;MAE/D,IAAI,CAACE,cAAc,EAAE;QACnB,MAAM,IAAIE,KAAK,CAAC,YAAY,GAAGJ,kBAAkB,GAAG,iBAAiB,CAAC;MACxE;;MAEA;MACA;MACA;MACA;MACA,IAAI,OAAOE,cAAc,KAAK,UAAU,EAAE;QACxC,OAAO,IAAI;MACb;MAEAJ,SAAS,GAAG,IAAII,cAAc,CAAC,IAAI,CAACpD,OAAO,IAAI,IAAI,EAAEH,OAAO,CAAC;;MAE7D;IACF,CAAC,MAAM;MACLmD,SAAS,GAAGJ,KAAK;IACnB;IAEA,IAAI,CAAClC,SAAS,CAAC6C,MAAM,CAACR,KAAK,EAAE,CAAC,EAAEC,SAAS,CAAC;IAE1C,IAAI,OAAOA,SAAS,CAAC7C,EAAE,KAAK,UAAU,EAAE;MACtC,IAAI,CAACQ,WAAW,CAACqC,SAAS,CAAC7C,EAAE,CAAC,CAAC,CAAC,GAAG6C,SAAS;IAC9C;;IAEA;IACA;IACAC,aAAa,GAAGA,aAAa,IAAID,SAAS,CAACzC,IAAI,IAAI,CAAC,CAAC,EAAE1B,aAAa,CAAC,SAAS,CAAC,EAAEmE,SAAS,CAACzC,IAAI,CAAC,CAAC,CAAC;IAElG,IAAI0C,aAAa,EAAE;MACjB,IAAI,CAACrC,eAAe,CAACqC,aAAa,CAAC,GAAGD,SAAS;IACjD;;IAEA;IACA;IACA,IAAI,OAAOA,SAAS,CAAC5C,EAAE,KAAK,UAAU,IAAI4C,SAAS,CAAC5C,EAAE,CAAC,CAAC,EAAE;MACxD,IAAIoD,UAAU,GAAG,IAAI,CAAClB,SAAS,CAAC,CAAC,CAACE,QAAQ;MAC1C,IAAIiB,OAAO,GAAGD,UAAU,CAACT,KAAK,CAAC,IAAI,IAAI;MAEvC,IAAI,CAACT,SAAS,CAAC,CAAC,CAACoB,YAAY,CAACV,SAAS,CAAC5C,EAAE,CAAC,CAAC,EAAEqD,OAAO,CAAC;IACxD;;IAEA;IACA,OAAOT,SAAS;EAClB,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;EAGErD,SAAS,CAACP,SAAS,CAACoC,WAAW,GAAG,SAASA,WAAWA,CAACwB,SAAS,EAAE;IAChE,IAAI,OAAOA,SAAS,KAAK,QAAQ,EAAE;MACjCA,SAAS,GAAG,IAAI,CAACN,QAAQ,CAACM,SAAS,CAAC;IACtC;IAEA,IAAI,CAACA,SAAS,IAAI,CAAC,IAAI,CAACtC,SAAS,EAAE;MACjC;IACF;IAEA,IAAIiD,UAAU,GAAG,KAAK;IAEtB,KAAK,IAAIvC,CAAC,GAAG,IAAI,CAACV,SAAS,CAACW,MAAM,GAAG,CAAC,EAAED,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;MACnD,IAAI,IAAI,CAACV,SAAS,CAACU,CAAC,CAAC,KAAK4B,SAAS,EAAE;QACnCW,UAAU,GAAG,IAAI;QACjB,IAAI,CAACjD,SAAS,CAAC6C,MAAM,CAACnC,CAAC,EAAE,CAAC,CAAC;QAC3B;MACF;IACF;IAEA,IAAI,CAACuC,UAAU,EAAE;MACf;IACF;IAEA,IAAI,CAAChD,WAAW,CAACqC,SAAS,CAAC7C,EAAE,CAAC,CAAC,CAAC,GAAG,IAAI;IACvC,IAAI,CAACS,eAAe,CAACoC,SAAS,CAACzC,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI;IAE7C,IAAIqD,MAAM,GAAGZ,SAAS,CAAC5C,EAAE,CAAC,CAAC;IAE3B,IAAIwD,MAAM,IAAIA,MAAM,CAACrC,UAAU,KAAK,IAAI,CAACe,SAAS,CAAC,CAAC,EAAE;MACpD,IAAI,CAACA,SAAS,CAAC,CAAC,CAACd,WAAW,CAACwB,SAAS,CAAC5C,EAAE,CAAC,CAAC,CAAC;IAC9C;EACF,CAAC;;EAED;AACF;AACA;;EAGET,SAAS,CAACP,SAAS,CAACyB,YAAY,GAAG,SAASA,YAAYA,CAAA,EAAG;IACzD,IAAIgD,KAAK,GAAG,IAAI;IAEhB,IAAIrB,QAAQ,GAAG,IAAI,CAACvC,QAAQ,CAACuC,QAAQ;IAErC,IAAIA,QAAQ,EAAE;MACZ;MACA,IAAIsB,aAAa,GAAG,IAAI,CAAC7D,QAAQ;MAEjC,IAAI8D,SAAS,GAAG,SAASA,SAASA,CAACnB,KAAK,EAAE;QACxC,IAAIrC,IAAI,GAAGqC,KAAK,CAACrC,IAAI;QACrB,IAAIyD,IAAI,GAAGpB,KAAK,CAACoB,IAAI;;QAErB;QACA;QACA;QACA,IAAIF,aAAa,CAACvD,IAAI,CAAC,KAAKuC,SAAS,EAAE;UACrCkB,IAAI,GAAGF,aAAa,CAACvD,IAAI,CAAC;QAC5B;;QAEA;QACA;QACA,IAAIyD,IAAI,KAAK,KAAK,EAAE;UAClB;QACF;;QAEA;QACA;QACA,IAAIA,IAAI,KAAK,IAAI,EAAE;UACjBA,IAAI,GAAG,CAAC,CAAC;QACX;;QAEA;QACA;QACA;QACAA,IAAI,CAACC,aAAa,GAAGJ,KAAK,CAAC5D,QAAQ,CAACgE,aAAa;;QAEjD;QACA;QACA;QACA;QACA,IAAIC,QAAQ,GAAGL,KAAK,CAAClB,QAAQ,CAACpC,IAAI,EAAEyD,IAAI,CAAC;QAEzC,IAAIE,QAAQ,EAAE;UACZL,KAAK,CAACtD,IAAI,CAAC,GAAG2D,QAAQ;QACxB;MACF,CAAC;;MAED;MACA,IAAIC,eAAe,GAAG,KAAK,CAAC;MAC5B,IAAIC,IAAI,GAAGzE,SAAS,CAAC0D,YAAY,CAAC,MAAM,CAAC;MAEzC,IAAIgB,KAAK,CAACC,OAAO,CAAC9B,QAAQ,CAAC,EAAE;QAC3B2B,eAAe,GAAG3B,QAAQ;MAC5B,CAAC,MAAM;QACL2B,eAAe,GAAGhF,MAAM,CAACoF,IAAI,CAAC/B,QAAQ,CAAC;MACzC;MAEA2B;MACA;MACA;MAAA,CACCK,MAAM,CAACrF,MAAM,CAACoF,IAAI,CAAC,IAAI,CAACtE,QAAQ,CAAC,CAACwE,MAAM,CAAC,UAAU7B,KAAK,EAAE;QACzD,OAAO,CAACuB,eAAe,CAACO,IAAI,CAAC,UAAUC,MAAM,EAAE;UAC7C,IAAI,OAAOA,MAAM,KAAK,QAAQ,EAAE;YAC9B,OAAO/B,KAAK,KAAK+B,MAAM;UACzB;UACA,OAAO/B,KAAK,KAAK+B,MAAM,CAACpE,IAAI;QAC9B,CAAC,CAAC;MACJ,CAAC,CAAC,CAAC,CAACqE,GAAG,CAAC,UAAUhC,KAAK,EAAE;QACvB,IAAIrC,IAAI,GAAG,KAAK,CAAC;QACjB,IAAIyD,IAAI,GAAG,KAAK,CAAC;QAEjB,IAAI,OAAOpB,KAAK,KAAK,QAAQ,EAAE;UAC7BrC,IAAI,GAAGqC,KAAK;UACZoB,IAAI,GAAGxB,QAAQ,CAACjC,IAAI,CAAC,IAAIsD,KAAK,CAAC5D,QAAQ,CAACM,IAAI,CAAC,IAAI,CAAC,CAAC;QACrD,CAAC,MAAM;UACLA,IAAI,GAAGqC,KAAK,CAACrC,IAAI;UACjByD,IAAI,GAAGpB,KAAK;QACd;QAEA,OAAO;UAAErC,IAAI,EAAEA,IAAI;UAAEyD,IAAI,EAAEA;QAAK,CAAC;MACnC,CAAC,CAAC,CAACS,MAAM,CAAC,UAAU7B,KAAK,EAAE;QACzB;QACA;QACA;QACA,IAAIiC,CAAC,GAAGlF,SAAS,CAAC0D,YAAY,CAACT,KAAK,CAACoB,IAAI,CAACb,cAAc,IAAI,CAAC,CAAC,EAAEtE,aAAa,CAAC,SAAS,CAAC,EAAE+D,KAAK,CAACrC,IAAI,CAAC,CAAC;QAEtG,OAAOsE,CAAC,IAAI,CAACT,IAAI,CAACU,MAAM,CAACD,CAAC,CAAC;MAC7B,CAAC,CAAC,CAACE,OAAO,CAAChB,SAAS,CAAC;IACvB;EACF,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;EAGEpE,SAAS,CAACP,SAAS,CAAC4F,aAAa,GAAG,SAASA,aAAaA,CAAA,EAAG;IAC3D;IACA;IACA,OAAO,EAAE;EACX,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGErF,SAAS,CAACP,SAAS,CAAC6F,EAAE,GAAG,SAASA,EAAEA,CAACC,KAAK,EAAEC,MAAM,EAAEC,KAAK,EAAE;IACzD,IAAIC,MAAM,GAAG,IAAI;IAEjB,IAAI,OAAOH,KAAK,KAAK,QAAQ,IAAIb,KAAK,CAACC,OAAO,CAACY,KAAK,CAAC,EAAE;MACrDzG,MAAM,CAACwG,EAAE,CAAC,IAAI,CAACzE,GAAG,EAAE0E,KAAK,EAAE7G,EAAE,CAACiH,IAAI,CAAC,IAAI,EAAEH,MAAM,CAAC,CAAC;;MAEjD;IACF,CAAC,MAAM;MACL,IAAII,MAAM,GAAGL,KAAK;MAClB,IAAIhE,IAAI,GAAGiE,MAAM;MACjB,IAAIK,EAAE,GAAGnH,EAAE,CAACiH,IAAI,CAAC,IAAI,EAAEF,KAAK,CAAC;;MAE7B;MACA,IAAIK,eAAe,GAAG,SAASA,eAAeA,CAAA,EAAG;QAC/C,OAAOJ,MAAM,CAAC/D,GAAG,CAACiE,MAAM,EAAErE,IAAI,EAAEsE,EAAE,CAAC;MACrC,CAAC;;MAED;MACA;MACAC,eAAe,CAACC,IAAI,GAAGF,EAAE,CAACE,IAAI;MAC9B,IAAI,CAACT,EAAE,CAAC,SAAS,EAAEQ,eAAe,CAAC;;MAEnC;MACA;MACA;MACA,IAAIE,YAAY,GAAG,SAASA,YAAYA,CAAA,EAAG;QACzC,OAAON,MAAM,CAAC/D,GAAG,CAAC,SAAS,EAAEmE,eAAe,CAAC;MAC/C,CAAC;;MAED;MACAE,YAAY,CAACD,IAAI,GAAGF,EAAE,CAACE,IAAI;;MAE3B;MACA,IAAIR,KAAK,CAACU,QAAQ,EAAE;QAClB;QACAnH,MAAM,CAACwG,EAAE,CAACM,MAAM,EAAErE,IAAI,EAAEsE,EAAE,CAAC;QAC3B/G,MAAM,CAACwG,EAAE,CAACM,MAAM,EAAE,SAAS,EAAEI,YAAY,CAAC;;QAE1C;QACA;MACF,CAAC,MAAM,IAAI,OAAOT,KAAK,CAACD,EAAE,KAAK,UAAU,EAAE;QACzC;QACAM,MAAM,CAACN,EAAE,CAAC/D,IAAI,EAAEsE,EAAE,CAAC;QACnBD,MAAM,CAACN,EAAE,CAAC,SAAS,EAAEU,YAAY,CAAC;MACpC;IACF;IAEA,OAAO,IAAI;EACb,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGEhG,SAAS,CAACP,SAAS,CAACkC,GAAG,GAAG,SAASA,GAAGA,CAAC4D,KAAK,EAAEC,MAAM,EAAEC,KAAK,EAAE;IAC3D,IAAI,CAACF,KAAK,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAIb,KAAK,CAACC,OAAO,CAACY,KAAK,CAAC,EAAE;MAC/DzG,MAAM,CAAC6C,GAAG,CAAC,IAAI,CAACd,GAAG,EAAE0E,KAAK,EAAEC,MAAM,CAAC;IACrC,CAAC,MAAM;MACL,IAAII,MAAM,GAAGL,KAAK;MAClB,IAAIhE,IAAI,GAAGiE,MAAM;MACjB;MACA,IAAIK,EAAE,GAAGnH,EAAE,CAACiH,IAAI,CAAC,IAAI,EAAEF,KAAK,CAAC;;MAE7B;MACA;MACA,IAAI,CAAC9D,GAAG,CAAC,SAAS,EAAEkE,EAAE,CAAC;MAEvB,IAAIN,KAAK,CAACU,QAAQ,EAAE;QAClB;QACAnH,MAAM,CAAC6C,GAAG,CAACiE,MAAM,EAAErE,IAAI,EAAEsE,EAAE,CAAC;QAC5B;QACA/G,MAAM,CAAC6C,GAAG,CAACiE,MAAM,EAAE,SAAS,EAAEC,EAAE,CAAC;MACnC,CAAC,MAAM;QACLD,MAAM,CAACjE,GAAG,CAACJ,IAAI,EAAEsE,EAAE,CAAC;QACpBD,MAAM,CAACjE,GAAG,CAAC,SAAS,EAAEkE,EAAE,CAAC;MAC3B;IACF;IAEA,OAAO,IAAI;EACb,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGE7F,SAAS,CAACP,SAAS,CAACyG,GAAG,GAAG,SAASA,GAAGA,CAACX,KAAK,EAAEC,MAAM,EAAEC,KAAK,EAAE;IAC3D,IAAIU,MAAM,GAAG,IAAI;MACbC,UAAU,GAAGlD,SAAS;IAE1B,IAAI,OAAOqC,KAAK,KAAK,QAAQ,IAAIb,KAAK,CAACC,OAAO,CAACY,KAAK,CAAC,EAAE;MACrDzG,MAAM,CAACoH,GAAG,CAAC,IAAI,CAACrF,GAAG,EAAE0E,KAAK,EAAE7G,EAAE,CAACiH,IAAI,CAAC,IAAI,EAAEH,MAAM,CAAC,CAAC;IACpD,CAAC,MAAM;MACL,IAAII,MAAM,GAAGL,KAAK;MAClB,IAAIhE,IAAI,GAAGiE,MAAM;MACjB,IAAIK,EAAE,GAAGnH,EAAE,CAACiH,IAAI,CAAC,IAAI,EAAEF,KAAK,CAAC;MAE7B,IAAIY,OAAO,GAAG,SAASA,OAAOA,CAAA,EAAG;QAC/BF,MAAM,CAACxE,GAAG,CAACiE,MAAM,EAAErE,IAAI,EAAE8E,OAAO,CAAC;QACjCR,EAAE,CAACS,KAAK,CAAC,IAAI,EAAEF,UAAU,CAAC;MAC5B,CAAC;;MAED;MACAC,OAAO,CAACN,IAAI,GAAGF,EAAE,CAACE,IAAI;MAEtB,IAAI,CAACT,EAAE,CAACM,MAAM,EAAErE,IAAI,EAAE8E,OAAO,CAAC;IAChC;IAEA,OAAO,IAAI;EACb,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGErG,SAAS,CAACP,SAAS,CAAC6B,OAAO,GAAG,SAASA,OAAOA,CAACiF,KAAK,EAAEC,IAAI,EAAE;IAC1D1H,MAAM,CAACwC,OAAO,CAAC,IAAI,CAACT,GAAG,EAAE0F,KAAK,EAAEC,IAAI,CAAC;IACrC,OAAO,IAAI;EACb,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGExG,SAAS,CAACP,SAAS,CAACU,KAAK,GAAG,SAASA,KAAKA,CAAC0F,EAAE,EAAE;IAC7C,IAAIY,IAAI,GAAGvD,SAAS,CAACxB,MAAM,GAAG,CAAC,IAAIwB,SAAS,CAAC,CAAC,CAAC,KAAKC,SAAS,GAAGD,SAAS,CAAC,CAAC,CAAC,GAAG,KAAK;IAEpF,IAAI2C,EAAE,EAAE;MACN,IAAI,IAAI,CAACa,QAAQ,EAAE;QACjB,IAAID,IAAI,EAAE;UACRZ,EAAE,CAAClG,IAAI,CAAC,IAAI,CAAC;QACf,CAAC,MAAM;UACL;UACA,IAAI,CAACgH,UAAU,CAACd,EAAE,EAAE,CAAC,CAAC;QACxB;MACF,CAAC,MAAM;QACL,IAAI,CAACe,WAAW,GAAG,IAAI,CAACA,WAAW,IAAI,EAAE;QACzC,IAAI,CAACA,WAAW,CAACC,IAAI,CAAChB,EAAE,CAAC;MAC3B;IACF;IACA,OAAO,IAAI;EACb,CAAC;;EAED;AACF;AACA;AACA;AACA;;EAGE7F,SAAS,CAACP,SAAS,CAACqH,YAAY,GAAG,SAASA,YAAYA,CAAA,EAAG;IACzD,IAAI,CAACJ,QAAQ,GAAG,IAAI;;IAEpB;IACA,IAAI,CAACC,UAAU,CAAC,YAAY;MAC1B,IAAII,UAAU,GAAG,IAAI,CAACH,WAAW;;MAEjC;MACA,IAAI,CAACA,WAAW,GAAG,EAAE;MAErB,IAAIG,UAAU,IAAIA,UAAU,CAACrF,MAAM,GAAG,CAAC,EAAE;QACvCqF,UAAU,CAAC3B,OAAO,CAAC,UAAUS,EAAE,EAAE;UAC/BA,EAAE,CAAClG,IAAI,CAAC,IAAI,CAAC;QACf,CAAC,EAAE,IAAI,CAAC;MACV;;MAEA;MACA;AACN;AACA;AACA;AACA;AACA;MACM,IAAI,CAAC2B,OAAO,CAAC,OAAO,CAAC;IACvB,CAAC,EAAE,CAAC,CAAC;EACP,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGEtB,SAAS,CAACP,SAAS,CAACuH,CAAC,GAAG,SAASA,CAACA,CAACC,QAAQ,EAAEC,OAAO,EAAE;IACpD,OAAO3I,GAAG,CAACyI,CAAC,CAACC,QAAQ,EAAEC,OAAO,IAAI,IAAI,CAACvE,SAAS,CAAC,CAAC,CAAC;EACrD,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGE3C,SAAS,CAACP,SAAS,CAAC0H,EAAE,GAAG,SAASA,EAAEA,CAACF,QAAQ,EAAEC,OAAO,EAAE;IACtD,OAAO3I,GAAG,CAAC4I,EAAE,CAACF,QAAQ,EAAEC,OAAO,IAAI,IAAI,CAACvE,SAAS,CAAC,CAAC,CAAC;EACtD,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGE3C,SAAS,CAACP,SAAS,CAAC2H,QAAQ,GAAG,SAASA,QAAQA,CAACC,YAAY,EAAE;IAC7D,OAAO9I,GAAG,CAAC+I,UAAU,CAAC,IAAI,CAACzG,GAAG,EAAEwG,YAAY,CAAC;EAC/C,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGErH,SAAS,CAACP,SAAS,CAAC8H,QAAQ,GAAG,SAASA,QAAQA,CAACC,UAAU,EAAE;IAC3DjJ,GAAG,CAACkJ,UAAU,CAAC,IAAI,CAAC5G,GAAG,EAAE2G,UAAU,CAAC;IACpC,OAAO,IAAI;EACb,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGExH,SAAS,CAACP,SAAS,CAACiI,WAAW,GAAG,SAASA,WAAWA,CAACC,aAAa,EAAE;IACpEpJ,GAAG,CAACqJ,aAAa,CAAC,IAAI,CAAC/G,GAAG,EAAE8G,aAAa,CAAC;IAC1C,OAAO,IAAI;EACb,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGE3H,SAAS,CAACP,SAAS,CAACoI,WAAW,GAAG,SAASA,WAAWA,CAACC,aAAa,EAAEC,SAAS,EAAE;IAC/ExJ,GAAG,CAACyJ,aAAa,CAAC,IAAI,CAACnH,GAAG,EAAEiH,aAAa,EAAEC,SAAS,CAAC;IACrD,OAAO,IAAI;EACb,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;EAGE/H,SAAS,CAACP,SAAS,CAACwI,IAAI,GAAG,SAASA,IAAIA,CAAA,EAAG;IACzC,IAAI,CAACP,WAAW,CAAC,YAAY,CAAC;IAC9B,OAAO,IAAI;EACb,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;EAGE1H,SAAS,CAACP,SAAS,CAACyI,IAAI,GAAG,SAASA,IAAIA,CAAA,EAAG;IACzC,IAAI,CAACX,QAAQ,CAAC,YAAY,CAAC;IAC3B,OAAO,IAAI;EACb,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGEvH,SAAS,CAACP,SAAS,CAAC0I,WAAW,GAAG,SAASA,WAAWA,CAAA,EAAG;IACvD,IAAI,CAACZ,QAAQ,CAAC,kBAAkB,CAAC;IACjC,OAAO,IAAI;EACb,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGEvH,SAAS,CAACP,SAAS,CAAC2I,aAAa,GAAG,SAASA,aAAaA,CAAA,EAAG;IAC3D,IAAI,CAACV,WAAW,CAAC,kBAAkB,CAAC;IACpC,OAAO,IAAI;EACb,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGE1H,SAAS,CAACP,SAAS,CAAC4I,YAAY,GAAG,SAASA,YAAYA,CAACC,SAAS,EAAE;IAClE,OAAO/J,GAAG,CAAC8J,YAAY,CAAC,IAAI,CAACxH,GAAG,EAAEyH,SAAS,CAAC;EAC9C,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGEtI,SAAS,CAACP,SAAS,CAAC8I,YAAY,GAAG,SAASA,YAAYA,CAACD,SAAS,EAAEE,KAAK,EAAE;IACzEjK,GAAG,CAACgK,YAAY,CAAC,IAAI,CAAC1H,GAAG,EAAEyH,SAAS,EAAEE,KAAK,CAAC;IAC5C,OAAO,IAAI;EACb,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGExI,SAAS,CAACP,SAAS,CAACgJ,eAAe,GAAG,SAASA,eAAeA,CAACH,SAAS,EAAE;IACxE/J,GAAG,CAACkK,eAAe,CAAC,IAAI,CAAC5H,GAAG,EAAEyH,SAAS,CAAC;IACxC,OAAO,IAAI;EACb,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGEtI,SAAS,CAACP,SAAS,CAACiJ,KAAK,GAAG,SAASA,KAAKA,CAACC,GAAG,EAAEC,aAAa,EAAE;IAC7D,OAAO,IAAI,CAACC,SAAS,CAAC,OAAO,EAAEF,GAAG,EAAEC,aAAa,CAAC;EACpD,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGE5I,SAAS,CAACP,SAAS,CAACqJ,MAAM,GAAG,SAASA,MAAMA,CAACH,GAAG,EAAEC,aAAa,EAAE;IAC/D,OAAO,IAAI,CAACC,SAAS,CAAC,QAAQ,EAAEF,GAAG,EAAEC,aAAa,CAAC;EACrD,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGE5I,SAAS,CAACP,SAAS,CAACsJ,UAAU,GAAG,SAASA,UAAUA,CAACL,KAAK,EAAEI,MAAM,EAAE;IAClE;IACA,OAAO,IAAI,CAACJ,KAAK,CAACA,KAAK,EAAE,IAAI,CAAC,CAACI,MAAM,CAACA,MAAM,CAAC;EAC/C,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGE9I,SAAS,CAACP,SAAS,CAACoJ,SAAS,GAAG,SAASA,SAASA,CAACG,aAAa,EAAEL,GAAG,EAAEC,aAAa,EAAE;IACpF,IAAID,GAAG,KAAKxF,SAAS,EAAE;MACrB;MACA,IAAIwF,GAAG,KAAK,IAAI,IAAIA,GAAG,KAAKA,GAAG,EAAE;QAC/BA,GAAG,GAAG,CAAC;MACT;;MAEA;MACA,IAAI,CAAC,EAAE,GAAGA,GAAG,EAAEM,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,EAAE,GAAGN,GAAG,EAAEM,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;QACrE,IAAI,CAACpI,GAAG,CAACqI,KAAK,CAACF,aAAa,CAAC,GAAGL,GAAG;MACrC,CAAC,MAAM,IAAIA,GAAG,KAAK,MAAM,EAAE;QACzB,IAAI,CAAC9H,GAAG,CAACqI,KAAK,CAACF,aAAa,CAAC,GAAG,EAAE;MACpC,CAAC,MAAM;QACL,IAAI,CAACnI,GAAG,CAACqI,KAAK,CAACF,aAAa,CAAC,GAAGL,GAAG,GAAG,IAAI;MAC5C;;MAEA;MACA,IAAI,CAACC,aAAa,EAAE;QAClB;AACR;AACA;AACA;AACA;AACA;QACQ,IAAI,CAACtH,OAAO,CAAC,QAAQ,CAAC;MACxB;;MAEA;MACA,OAAO,IAAI;IACb;;IAEA;IACA;IACA,IAAI,CAAC,IAAI,CAACT,GAAG,EAAE;MACb,OAAO,CAAC;IACV;;IAEA;IACA,IAAIsI,GAAG,GAAG,IAAI,CAACtI,GAAG,CAACqI,KAAK,CAACF,aAAa,CAAC;IACvC,IAAII,OAAO,GAAGD,GAAG,CAACF,OAAO,CAAC,IAAI,CAAC;IAE/B,IAAIG,OAAO,KAAK,CAAC,CAAC,EAAE;MAClB;MACA,OAAOC,QAAQ,CAACF,GAAG,CAACG,KAAK,CAAC,CAAC,EAAEF,OAAO,CAAC,EAAE,EAAE,CAAC;IAC5C;;IAEA;IACA;IACA;IACA,OAAOC,QAAQ,CAAC,IAAI,CAACxI,GAAG,CAAC,QAAQ,GAAG,CAAC,CAAC,EAAE3B,aAAa,CAAC,SAAS,CAAC,EAAE8J,aAAa,CAAC,CAAC,EAAE,EAAE,CAAC;EACxF,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGEhJ,SAAS,CAACP,SAAS,CAAC8J,gBAAgB,GAAG,SAASA,gBAAgBA,CAACP,aAAa,EAAE;IAC9E,IAAIQ,qBAAqB,GAAG,CAAC;IAE7B,IAAIR,aAAa,KAAK,OAAO,IAAIA,aAAa,KAAK,QAAQ,EAAE;MAC3D,MAAM,IAAIrF,KAAK,CAAC,qDAAqD,CAAC;IACxE;IAEA,IAAI,OAAOvF,QAAQ,CAAC,SAAS,CAAC,CAACqL,gBAAgB,KAAK,UAAU,EAAE;MAC9D,IAAIC,aAAa,GAAGtL,QAAQ,CAAC,SAAS,CAAC,CAACqL,gBAAgB,CAAC,IAAI,CAAC5I,GAAG,CAAC;MAElE2I,qBAAqB,GAAGE,aAAa,CAACC,gBAAgB,CAACX,aAAa,CAAC,IAAIU,aAAa,CAACV,aAAa,CAAC;IACvG;;IAEA;IACAQ,qBAAqB,GAAGI,UAAU,CAACJ,qBAAqB,CAAC;;IAEzD;IACA;IACA;IACA,IAAIA,qBAAqB,KAAK,CAAC,EAAE;MAC/B,IAAIK,IAAI,GAAG,QAAQ,GAAG,CAAC,CAAC,EAAE3K,aAAa,CAAC,SAAS,CAAC,EAAE8J,aAAa,CAAC;MAElEQ,qBAAqB,GAAG,IAAI,CAAC3I,GAAG,CAACgJ,IAAI,CAAC;IACxC;IAEA,OAAOL,qBAAqB;EAC9B,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;AACA;;EAGExJ,SAAS,CAACP,SAAS,CAACqK,iBAAiB,GAAG,SAASA,iBAAiBA,CAAA,EAAG;IACnE,OAAO;MACLpB,KAAK,EAAE,IAAI,CAACa,gBAAgB,CAAC,OAAO,CAAC;MACrCT,MAAM,EAAE,IAAI,CAACS,gBAAgB,CAAC,QAAQ;IACxC,CAAC;EACH,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;;EAGEvJ,SAAS,CAACP,SAAS,CAACsK,YAAY,GAAG,SAASA,YAAYA,CAAA,EAAG;IACzD,OAAO,IAAI,CAACR,gBAAgB,CAAC,OAAO,CAAC;EACvC,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;;EAGEvJ,SAAS,CAACP,SAAS,CAACuK,aAAa,GAAG,SAASA,aAAaA,CAAA,EAAG;IAC3D,OAAO,IAAI,CAACT,gBAAgB,CAAC,QAAQ,CAAC;EACxC,CAAC;;EAED;AACF;AACA;;EAGEvJ,SAAS,CAACP,SAAS,CAACwK,KAAK,GAAG,SAASA,KAAKA,CAAA,EAAG;IAC3C,IAAI,CAACpJ,GAAG,CAACoJ,KAAK,CAAC,CAAC;EAClB,CAAC;;EAED;AACF;AACA;;EAGEjK,SAAS,CAACP,SAAS,CAACyK,IAAI,GAAG,SAASA,IAAIA,CAAA,EAAG;IACzC,IAAI,CAACrJ,GAAG,CAACqJ,IAAI,CAAC,CAAC;EACjB,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGElK,SAAS,CAACP,SAAS,CAAC0K,aAAa,GAAG,SAASA,aAAaA,CAAA,EAAG;IAC3D;IACA,IAAIC,UAAU,GAAG,CAAC;IAClB,IAAIC,UAAU,GAAG,IAAI;;IAErB;IACA;IACA;IACA,IAAIC,oBAAoB,GAAG,EAAE;;IAE7B;IACA,IAAIC,kBAAkB,GAAG,GAAG;IAE5B,IAAIC,UAAU,GAAG,KAAK,CAAC;IAEvB,IAAI,CAAClF,EAAE,CAAC,YAAY,EAAE,UAAUiB,KAAK,EAAE;MACrC;MACA,IAAIA,KAAK,CAACkE,OAAO,CAAC/I,MAAM,KAAK,CAAC,EAAE;QAC9B;QACA2I,UAAU,GAAG;UACXK,KAAK,EAAEnE,KAAK,CAACkE,OAAO,CAAC,CAAC,CAAC,CAACC,KAAK;UAC7BC,KAAK,EAAEpE,KAAK,CAACkE,OAAO,CAAC,CAAC,CAAC,CAACE;QAC1B,CAAC;QACD;QACAP,UAAU,GAAG,IAAIQ,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;QACjC;QACAL,UAAU,GAAG,IAAI;MACnB;IACF,CAAC,CAAC;IAEF,IAAI,CAAClF,EAAE,CAAC,WAAW,EAAE,UAAUiB,KAAK,EAAE;MACpC;MACA,IAAIA,KAAK,CAACkE,OAAO,CAAC/I,MAAM,GAAG,CAAC,EAAE;QAC5B8I,UAAU,GAAG,KAAK;MACpB,CAAC,MAAM,IAAIH,UAAU,EAAE;QACrB;QACA;QACA,IAAIS,KAAK,GAAGvE,KAAK,CAACkE,OAAO,CAAC,CAAC,CAAC,CAACC,KAAK,GAAGL,UAAU,CAACK,KAAK;QACrD,IAAIK,KAAK,GAAGxE,KAAK,CAACkE,OAAO,CAAC,CAAC,CAAC,CAACE,KAAK,GAAGN,UAAU,CAACM,KAAK;QACrD,IAAIK,aAAa,GAAGC,IAAI,CAACC,IAAI,CAACJ,KAAK,GAAGA,KAAK,GAAGC,KAAK,GAAGA,KAAK,CAAC;QAE5D,IAAIC,aAAa,GAAGV,oBAAoB,EAAE;UACxCE,UAAU,GAAG,KAAK;QACpB;MACF;IACF,CAAC,CAAC;IAEF,IAAIW,KAAK,GAAG,SAASA,KAAKA,CAAA,EAAG;MAC3BX,UAAU,GAAG,KAAK;IACpB,CAAC;;IAED;IACA,IAAI,CAAClF,EAAE,CAAC,YAAY,EAAE6F,KAAK,CAAC;IAC5B,IAAI,CAAC7F,EAAE,CAAC,aAAa,EAAE6F,KAAK,CAAC;;IAE7B;IACA;IACA,IAAI,CAAC7F,EAAE,CAAC,UAAU,EAAE,UAAUiB,KAAK,EAAE;MACnC8D,UAAU,GAAG,IAAI;MACjB;MACA,IAAIG,UAAU,KAAK,IAAI,EAAE;QACvB;QACA,IAAIY,SAAS,GAAG,IAAIR,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC,GAAGT,UAAU;;QAEjD;QACA,IAAIgB,SAAS,GAAGb,kBAAkB,EAAE;UAClC;UACAhE,KAAK,CAAC8E,cAAc,CAAC,CAAC;UACtB;AACV;AACA;AACA;AACA;AACA;UACU,IAAI,CAAC/J,OAAO,CAAC,KAAK,CAAC;UACnB;UACA;UACA;QACF;MACF;IACF,CAAC,CAAC;EACJ,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGEtB,SAAS,CAACP,SAAS,CAAC2B,mBAAmB,GAAG,SAASA,mBAAmBA,CAAA,EAAG;IACvE;IACA,IAAI,CAAC,IAAI,CAACnB,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,CAACA,MAAM,CAAC,CAAC,CAACqL,kBAAkB,EAAE;MACvD;IACF;;IAEA;IACA,IAAIC,MAAM,GAAG7M,EAAE,CAACiH,IAAI,CAAC,IAAI,CAAC1F,MAAM,CAAC,CAAC,EAAE,IAAI,CAACA,MAAM,CAAC,CAAC,CAACqL,kBAAkB,CAAC;IAErE,IAAIE,YAAY,GAAG,KAAK,CAAC;IAEzB,IAAI,CAAClG,EAAE,CAAC,YAAY,EAAE,YAAY;MAChCiG,MAAM,CAAC,CAAC;MACR;MACA;MACA;MACA,IAAI,CAACE,aAAa,CAACD,YAAY,CAAC;MAChC;MACAA,YAAY,GAAG,IAAI,CAACE,WAAW,CAACH,MAAM,EAAE,GAAG,CAAC;IAC9C,CAAC,CAAC;IAEF,IAAII,QAAQ,GAAG,SAASA,QAAQA,CAACpF,KAAK,EAAE;MACtCgF,MAAM,CAAC,CAAC;MACR;MACA,IAAI,CAACE,aAAa,CAACD,YAAY,CAAC;IAClC,CAAC;IAED,IAAI,CAAClG,EAAE,CAAC,WAAW,EAAEiG,MAAM,CAAC;IAC5B,IAAI,CAACjG,EAAE,CAAC,UAAU,EAAEqG,QAAQ,CAAC;IAC7B,IAAI,CAACrG,EAAE,CAAC,aAAa,EAAEqG,QAAQ,CAAC;EAClC,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGE3L,SAAS,CAACP,SAAS,CAACkH,UAAU,GAAG,SAASA,UAAUA,CAACd,EAAE,EAAE+F,OAAO,EAAE;IAChE/F,EAAE,GAAGnH,EAAE,CAACiH,IAAI,CAAC,IAAI,EAAEE,EAAE,CAAC;IAEtB,IAAIgG,SAAS,GAAGzN,QAAQ,CAAC,SAAS,CAAC,CAACuI,UAAU,CAACd,EAAE,EAAE+F,OAAO,CAAC;IAC3D,IAAIE,SAAS,GAAG,SAASA,SAASA,CAAA,EAAG;MACnC,IAAI,CAACC,YAAY,CAACF,SAAS,CAAC;IAC9B,CAAC;IAEDC,SAAS,CAAC/F,IAAI,GAAG,cAAc,GAAG8F,SAAS;IAE3C,IAAI,CAACvG,EAAE,CAAC,SAAS,EAAEwG,SAAS,CAAC;IAE7B,OAAOD,SAAS;EAClB,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGE7L,SAAS,CAACP,SAAS,CAACsM,YAAY,GAAG,SAASA,YAAYA,CAACF,SAAS,EAAE;IAClEzN,QAAQ,CAAC,SAAS,CAAC,CAAC2N,YAAY,CAACF,SAAS,CAAC;IAE3C,IAAIC,SAAS,GAAG,SAASA,SAASA,CAAA,EAAG,CAAC,CAAC;IAEvCA,SAAS,CAAC/F,IAAI,GAAG,cAAc,GAAG8F,SAAS;IAE3C,IAAI,CAAClK,GAAG,CAAC,SAAS,EAAEmK,SAAS,CAAC;IAE9B,OAAOD,SAAS;EAClB,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGE7L,SAAS,CAACP,SAAS,CAACiM,WAAW,GAAG,SAASA,WAAWA,CAAC7F,EAAE,EAAEmG,QAAQ,EAAE;IACnEnG,EAAE,GAAGnH,EAAE,CAACiH,IAAI,CAAC,IAAI,EAAEE,EAAE,CAAC;IAEtB,IAAIoG,UAAU,GAAG7N,QAAQ,CAAC,SAAS,CAAC,CAACsN,WAAW,CAAC7F,EAAE,EAAEmG,QAAQ,CAAC;IAE9D,IAAIF,SAAS,GAAG,SAASA,SAASA,CAAA,EAAG;MACnC,IAAI,CAACL,aAAa,CAACQ,UAAU,CAAC;IAChC,CAAC;IAEDH,SAAS,CAAC/F,IAAI,GAAG,eAAe,GAAGkG,UAAU;IAE7C,IAAI,CAAC3G,EAAE,CAAC,SAAS,EAAEwG,SAAS,CAAC;IAE7B,OAAOG,UAAU;EACnB,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGEjM,SAAS,CAACP,SAAS,CAACgM,aAAa,GAAG,SAASA,aAAaA,CAACQ,UAAU,EAAE;IACrE7N,QAAQ,CAAC,SAAS,CAAC,CAACqN,aAAa,CAACQ,UAAU,CAAC;IAE7C,IAAIH,SAAS,GAAG,SAASA,SAASA,CAAA,EAAG,CAAC,CAAC;IAEvCA,SAAS,CAAC/F,IAAI,GAAG,eAAe,GAAGkG,UAAU;IAE7C,IAAI,CAACtK,GAAG,CAAC,SAAS,EAAEmK,SAAS,CAAC;IAE9B,OAAOG,UAAU;EACnB,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGEjM,SAAS,CAACkM,iBAAiB,GAAG,SAASA,iBAAiBA,CAACtL,IAAI,EAAEuL,IAAI,EAAE;IACnE,IAAI,CAACvL,IAAI,EAAE;MACT;IACF;IAEAA,IAAI,GAAG,CAAC,CAAC,EAAE1B,aAAa,CAAC,SAAS,CAAC,EAAE0B,IAAI,CAAC;IAE1C,IAAI,CAACZ,SAAS,CAACoM,WAAW,EAAE;MAC1BpM,SAAS,CAACoM,WAAW,GAAG,CAAC,CAAC;IAC5B;IAEA,IAAIxL,IAAI,KAAK,QAAQ,IAAIZ,SAAS,CAACoM,WAAW,CAACxL,IAAI,CAAC,EAAE;MACpD,IAAIyL,MAAM,GAAGrM,SAAS,CAACoM,WAAW,CAACxL,IAAI,CAAC;;MAExC;MACA;MACA;MACA;MACA,IAAIyL,MAAM,CAACC,OAAO,IAAI9M,MAAM,CAACoF,IAAI,CAACyH,MAAM,CAACC,OAAO,CAAC,CAAC5K,MAAM,GAAG,CAAC,IAAIlC,MAAM,CAACoF,IAAI,CAACyH,MAAM,CAACC,OAAO,CAAC,CAACrH,GAAG,CAAC,UAAUsH,UAAU,EAAE;QACpH,OAAOF,MAAM,CAACC,OAAO,CAACC,UAAU,CAAC;MACnC,CAAC,CAAC,CAACC,KAAK,CAACC,OAAO,CAAC,EAAE;QACjB,MAAM,IAAI9I,KAAK,CAAC,iEAAiE,CAAC;MACpF;IACF;IAEA3D,SAAS,CAACoM,WAAW,CAACxL,IAAI,CAAC,GAAGuL,IAAI;IAElC,OAAOA,IAAI;EACb,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGEnM,SAAS,CAAC0D,YAAY,GAAG,SAASA,YAAYA,CAAC9C,IAAI,EAAE;IACnD,IAAI,CAACA,IAAI,EAAE;MACT;IACF;IAEAA,IAAI,GAAG,CAAC,CAAC,EAAE1B,aAAa,CAAC,SAAS,CAAC,EAAE0B,IAAI,CAAC;IAE1C,IAAIZ,SAAS,CAACoM,WAAW,IAAIpM,SAAS,CAACoM,WAAW,CAACxL,IAAI,CAAC,EAAE;MACxD,OAAOZ,SAAS,CAACoM,WAAW,CAACxL,IAAI,CAAC;IACpC;IAEA,IAAIxC,QAAQ,CAAC,SAAS,CAAC,IAAIA,QAAQ,CAAC,SAAS,CAAC,CAACsO,OAAO,IAAItO,QAAQ,CAAC,SAAS,CAAC,CAACsO,OAAO,CAAC9L,IAAI,CAAC,EAAE;MAC3F5B,KAAK,CAAC,SAAS,CAAC,CAAC+C,IAAI,CAAC,MAAM,GAAGnB,IAAI,GAAG,0HAA0H,CAAC;MAEjK,OAAOxC,QAAQ,CAAC,SAAS,CAAC,CAACsO,OAAO,CAAC9L,IAAI,CAAC;IAC1C;EACF,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGEZ,SAAS,CAAC2M,MAAM,GAAG,SAASA,MAAMA,CAACC,KAAK,EAAE;IACxCA,KAAK,GAAGA,KAAK,IAAI,CAAC,CAAC;IAEnB5N,KAAK,CAAC,SAAS,CAAC,CAAC+C,IAAI,CAAC,4CAA4C,GAAG,4CAA4C,CAAC;;IAElH;IACA;IACA;IACA,IAAI8K,IAAI,GAAGD,KAAK,CAACC,IAAI,IAAID,KAAK,CAACC,IAAI,IAAI,IAAI,CAACpN,SAAS,CAACoN,IAAI,IAAI,IAAI,CAACpN,SAAS,CAACoN,IAAI,IAAI,YAAY,CAAC,CAAC;IACnG;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAIC,MAAM,GAAG,SAASA,MAAMA,CAAA,EAAG;MAC7BD,IAAI,CAACvG,KAAK,CAAC,IAAI,EAAEpD,SAAS,CAAC;IAC7B,CAAC;;IAED;IACA4J,MAAM,CAACrN,SAAS,GAAGD,MAAM,CAACuN,MAAM,CAAC,IAAI,CAACtN,SAAS,CAAC;IAChD;IACA;IACAqN,MAAM,CAACrN,SAAS,CAACuN,WAAW,GAAGF,MAAM;;IAErC;IACAA,MAAM,CAACH,MAAM,GAAG3M,SAAS,CAAC2M,MAAM;;IAEhC;IACA,KAAK,IAAI/L,IAAI,IAAIgM,KAAK,EAAE;MACtB,IAAIA,KAAK,CAAClN,cAAc,CAACkB,IAAI,CAAC,EAAE;QAC9BkM,MAAM,CAACrN,SAAS,CAACmB,IAAI,CAAC,GAAGgM,KAAK,CAAChM,IAAI,CAAC;MACtC;IACF;IAEA,OAAOkM,MAAM;EACf,CAAC;EAED,OAAO9M,SAAS;AAClB,CAAC,CAAC,CAAC;AAEHA,SAAS,CAACkM,iBAAiB,CAAC,WAAW,EAAElM,SAAS,CAAC;AACnDhC,OAAO,CAAC,SAAS,CAAC,GAAGgC,SAAS"},"metadata":{},"sourceType":"script","externalDependencies":[]}