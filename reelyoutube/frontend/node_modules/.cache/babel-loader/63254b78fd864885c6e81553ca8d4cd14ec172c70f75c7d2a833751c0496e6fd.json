{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nexports.logByType = undefined;\nvar _window = require('global/window');\nvar _window2 = _interopRequireDefault(_window);\nvar _browser = require('./browser');\nvar _obj = require('./obj');\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\nvar log = void 0;\n\n/**\n * Log messages to the console and history based on the type of message\n *\n * @param  {string} type\n *         The name of the console method to use.\n *\n * @param  {Array} args\n *         The arguments to be passed to the matching console method.\n *\n * @param  {boolean} [stringify]\n *         By default, only old IEs should get console argument stringification,\n *         but this is exposed as a parameter to facilitate testing.\n */\n/**\n * @file log.js\n * @module log\n */\nvar logByType = exports.logByType = function logByType(type, args) {\n  var stringify = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : !!_browser.IE_VERSION && _browser.IE_VERSION < 11;\n  if (type !== 'log') {\n    // add the type to the front of the message when it's not \"log\"\n    args.unshift(type.toUpperCase() + ':');\n  }\n\n  // add to history\n  log.history.push(args);\n\n  // add console prefix after adding to history\n  args.unshift('VIDEOJS:');\n\n  // If there's no console then don't try to output messages, but they will\n  // still be stored in `log.history`.\n  //\n  // Was setting these once outside of this function, but containing them\n  // in the function makes it easier to test cases where console doesn't exist\n  // when the module is executed.\n  var fn = _window2['default'].console && _window2['default'].console[type];\n\n  // Bail out if there's no console.\n  if (!fn) {\n    return;\n  }\n\n  // IEs previous to 11 log objects uselessly as \"[object Object]\"; so, JSONify\n  // objects and arrays for those less-capable browsers.\n  if (stringify) {\n    args = args.map(function (a) {\n      if ((0, _obj.isObject)(a) || Array.isArray(a)) {\n        try {\n          return JSON.stringify(a);\n        } catch (x) {\n          return String(a);\n        }\n      }\n\n      // Cast to string before joining, so we get null and undefined explicitly\n      // included in output (as we would in a modern console).\n      return String(a);\n    }).join(' ');\n  }\n\n  // Old IE versions do not allow .apply() for console methods (they are\n  // reported as objects rather than functions).\n  if (!fn.apply) {\n    fn(args);\n  } else {\n    fn[Array.isArray(args) ? 'apply' : 'call'](_window2['default'].console, args);\n  }\n};\n\n/**\n * Log plain debug messages\n *\n * @param {Mixed[]} args\n *        One or more messages or objects that should be logged.\n */\nlog = function log() {\n  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  logByType('log', args);\n};\n\n/**\n * Keep a history of log messages\n *\n * @type {Array}\n */\nlog.history = [];\n\n/**\n * Log error messages\n *\n * @param {Mixed[]} args\n *        One or more messages or objects that should be logged as an error\n */\nlog.error = function () {\n  for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n  return logByType('error', args);\n};\n\n/**\n * Log warning messages\n *\n * @param {Mixed[]} args\n *        One or more messages or objects that should be logged as a warning.\n */\nlog.warn = function () {\n  for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    args[_key3] = arguments[_key3];\n  }\n  return logByType('warn', args);\n};\nexports['default'] = log;","map":{"version":3,"names":["exports","__esModule","logByType","undefined","_window","require","_window2","_interopRequireDefault","_browser","_obj","obj","log","type","args","stringify","arguments","length","IE_VERSION","unshift","toUpperCase","history","push","fn","console","map","a","isObject","Array","isArray","JSON","x","String","join","apply","_len","_key","error","_len2","_key2","warn","_len3","_key3"],"sources":["C:/Users/babu7/OneDrive/Desktop/djangoyoutube2/reelyoutube/frontend/node_modules/videojs-react/node_modules/video.js/es5/utils/log.js"],"sourcesContent":["'use strict';\n\nexports.__esModule = true;\nexports.logByType = undefined;\n\nvar _window = require('global/window');\n\nvar _window2 = _interopRequireDefault(_window);\n\nvar _browser = require('./browser');\n\nvar _obj = require('./obj');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar log = void 0;\n\n/**\n * Log messages to the console and history based on the type of message\n *\n * @param  {string} type\n *         The name of the console method to use.\n *\n * @param  {Array} args\n *         The arguments to be passed to the matching console method.\n *\n * @param  {boolean} [stringify]\n *         By default, only old IEs should get console argument stringification,\n *         but this is exposed as a parameter to facilitate testing.\n */\n/**\n * @file log.js\n * @module log\n */\nvar logByType = exports.logByType = function logByType(type, args) {\n  var stringify = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : !!_browser.IE_VERSION && _browser.IE_VERSION < 11;\n\n\n  if (type !== 'log') {\n\n    // add the type to the front of the message when it's not \"log\"\n    args.unshift(type.toUpperCase() + ':');\n  }\n\n  // add to history\n  log.history.push(args);\n\n  // add console prefix after adding to history\n  args.unshift('VIDEOJS:');\n\n  // If there's no console then don't try to output messages, but they will\n  // still be stored in `log.history`.\n  //\n  // Was setting these once outside of this function, but containing them\n  // in the function makes it easier to test cases where console doesn't exist\n  // when the module is executed.\n  var fn = _window2['default'].console && _window2['default'].console[type];\n\n  // Bail out if there's no console.\n  if (!fn) {\n    return;\n  }\n\n  // IEs previous to 11 log objects uselessly as \"[object Object]\"; so, JSONify\n  // objects and arrays for those less-capable browsers.\n  if (stringify) {\n    args = args.map(function (a) {\n      if ((0, _obj.isObject)(a) || Array.isArray(a)) {\n        try {\n          return JSON.stringify(a);\n        } catch (x) {\n          return String(a);\n        }\n      }\n\n      // Cast to string before joining, so we get null and undefined explicitly\n      // included in output (as we would in a modern console).\n      return String(a);\n    }).join(' ');\n  }\n\n  // Old IE versions do not allow .apply() for console methods (they are\n  // reported as objects rather than functions).\n  if (!fn.apply) {\n    fn(args);\n  } else {\n    fn[Array.isArray(args) ? 'apply' : 'call'](_window2['default'].console, args);\n  }\n};\n\n/**\n * Log plain debug messages\n *\n * @param {Mixed[]} args\n *        One or more messages or objects that should be logged.\n */\nlog = function log() {\n  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  logByType('log', args);\n};\n\n/**\n * Keep a history of log messages\n *\n * @type {Array}\n */\nlog.history = [];\n\n/**\n * Log error messages\n *\n * @param {Mixed[]} args\n *        One or more messages or objects that should be logged as an error\n */\nlog.error = function () {\n  for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n\n  return logByType('error', args);\n};\n\n/**\n * Log warning messages\n *\n * @param {Mixed[]} args\n *        One or more messages or objects that should be logged as a warning.\n */\nlog.warn = function () {\n  for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    args[_key3] = arguments[_key3];\n  }\n\n  return logByType('warn', args);\n};\n\nexports['default'] = log;\n"],"mappings":"AAAA,YAAY;;AAEZA,OAAO,CAACC,UAAU,GAAG,IAAI;AACzBD,OAAO,CAACE,SAAS,GAAGC,SAAS;AAE7B,IAAIC,OAAO,GAAGC,OAAO,CAAC,eAAe,CAAC;AAEtC,IAAIC,QAAQ,GAAGC,sBAAsB,CAACH,OAAO,CAAC;AAE9C,IAAII,QAAQ,GAAGH,OAAO,CAAC,WAAW,CAAC;AAEnC,IAAII,IAAI,GAAGJ,OAAO,CAAC,OAAO,CAAC;AAE3B,SAASE,sBAAsBA,CAACG,GAAG,EAAE;EAAE,OAAOA,GAAG,IAAIA,GAAG,CAACT,UAAU,GAAGS,GAAG,GAAG;IAAE,SAAS,EAAEA;EAAI,CAAC;AAAE;AAEhG,IAAIC,GAAG,GAAG,KAAK,CAAC;;AAEhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIT,SAAS,GAAGF,OAAO,CAACE,SAAS,GAAG,SAASA,SAASA,CAACU,IAAI,EAAEC,IAAI,EAAE;EACjE,IAAIC,SAAS,GAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKZ,SAAS,GAAGY,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAACP,QAAQ,CAACS,UAAU,IAAIT,QAAQ,CAACS,UAAU,GAAG,EAAE;EAGrI,IAAIL,IAAI,KAAK,KAAK,EAAE;IAElB;IACAC,IAAI,CAACK,OAAO,CAACN,IAAI,CAACO,WAAW,CAAC,CAAC,GAAG,GAAG,CAAC;EACxC;;EAEA;EACAR,GAAG,CAACS,OAAO,CAACC,IAAI,CAACR,IAAI,CAAC;;EAEtB;EACAA,IAAI,CAACK,OAAO,CAAC,UAAU,CAAC;;EAExB;EACA;EACA;EACA;EACA;EACA;EACA,IAAII,EAAE,GAAGhB,QAAQ,CAAC,SAAS,CAAC,CAACiB,OAAO,IAAIjB,QAAQ,CAAC,SAAS,CAAC,CAACiB,OAAO,CAACX,IAAI,CAAC;;EAEzE;EACA,IAAI,CAACU,EAAE,EAAE;IACP;EACF;;EAEA;EACA;EACA,IAAIR,SAAS,EAAE;IACbD,IAAI,GAAGA,IAAI,CAACW,GAAG,CAAC,UAAUC,CAAC,EAAE;MAC3B,IAAI,CAAC,CAAC,EAAEhB,IAAI,CAACiB,QAAQ,EAAED,CAAC,CAAC,IAAIE,KAAK,CAACC,OAAO,CAACH,CAAC,CAAC,EAAE;QAC7C,IAAI;UACF,OAAOI,IAAI,CAACf,SAAS,CAACW,CAAC,CAAC;QAC1B,CAAC,CAAC,OAAOK,CAAC,EAAE;UACV,OAAOC,MAAM,CAACN,CAAC,CAAC;QAClB;MACF;;MAEA;MACA;MACA,OAAOM,MAAM,CAACN,CAAC,CAAC;IAClB,CAAC,CAAC,CAACO,IAAI,CAAC,GAAG,CAAC;EACd;;EAEA;EACA;EACA,IAAI,CAACV,EAAE,CAACW,KAAK,EAAE;IACbX,EAAE,CAACT,IAAI,CAAC;EACV,CAAC,MAAM;IACLS,EAAE,CAACK,KAAK,CAACC,OAAO,CAACf,IAAI,CAAC,GAAG,OAAO,GAAG,MAAM,CAAC,CAACP,QAAQ,CAAC,SAAS,CAAC,CAACiB,OAAO,EAAEV,IAAI,CAAC;EAC/E;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACAF,GAAG,GAAG,SAASA,GAAGA,CAAA,EAAG;EACnB,KAAK,IAAIuB,IAAI,GAAGnB,SAAS,CAACC,MAAM,EAAEH,IAAI,GAAGc,KAAK,CAACO,IAAI,CAAC,EAAEC,IAAI,GAAG,CAAC,EAAEA,IAAI,GAAGD,IAAI,EAAEC,IAAI,EAAE,EAAE;IACnFtB,IAAI,CAACsB,IAAI,CAAC,GAAGpB,SAAS,CAACoB,IAAI,CAAC;EAC9B;EAEAjC,SAAS,CAAC,KAAK,EAAEW,IAAI,CAAC;AACxB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAF,GAAG,CAACS,OAAO,GAAG,EAAE;;AAEhB;AACA;AACA;AACA;AACA;AACA;AACAT,GAAG,CAACyB,KAAK,GAAG,YAAY;EACtB,KAAK,IAAIC,KAAK,GAAGtB,SAAS,CAACC,MAAM,EAAEH,IAAI,GAAGc,KAAK,CAACU,KAAK,CAAC,EAAEC,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGD,KAAK,EAAEC,KAAK,EAAE,EAAE;IACzFzB,IAAI,CAACyB,KAAK,CAAC,GAAGvB,SAAS,CAACuB,KAAK,CAAC;EAChC;EAEA,OAAOpC,SAAS,CAAC,OAAO,EAAEW,IAAI,CAAC;AACjC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACAF,GAAG,CAAC4B,IAAI,GAAG,YAAY;EACrB,KAAK,IAAIC,KAAK,GAAGzB,SAAS,CAACC,MAAM,EAAEH,IAAI,GAAGc,KAAK,CAACa,KAAK,CAAC,EAAEC,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGD,KAAK,EAAEC,KAAK,EAAE,EAAE;IACzF5B,IAAI,CAAC4B,KAAK,CAAC,GAAG1B,SAAS,CAAC0B,KAAK,CAAC;EAChC;EAEA,OAAOvC,SAAS,CAAC,MAAM,EAAEW,IAAI,CAAC;AAChC,CAAC;AAEDb,OAAO,CAAC,SAAS,CAAC,GAAGW,GAAG"},"metadata":{},"sourceType":"script","externalDependencies":[]}