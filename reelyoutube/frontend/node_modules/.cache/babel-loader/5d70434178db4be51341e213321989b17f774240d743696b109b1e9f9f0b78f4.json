{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\babu7\\\\OneDrive\\\\Desktop\\\\djangoyoutube2\\\\reelyoutube\\\\frontend\\\\src\\\\pages\\\\LazyImage.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction LazyImage({\n  src,\n  'data-real-src': dataRealSrc,\n  alt\n}) {\n  _s();\n  const [loaded, setLoaded] = useState(false);\n  const imageRef = useRef();\n  useEffect(() => {\n    const options = {\n      root: null,\n      // viewport\n      rootMargin: '0px',\n      // margin around root\n      threshold: 0.5 // visible area ratio\n    };\n\n    const observer = new IntersectionObserver(entries => {\n      entries.forEach(entry => {\n        if (entry.isIntersecting) {\n          // Set a 500ms delay before loading the image\n          const delay = 500;\n\n          // Wait for the delay before loading the image\n          const timeoutId = setTimeout(() => {\n            // Ensure that imageRef.current exists before accessing its attributes\n            if (imageRef.current) {\n              // Load the image by setting the data-real-src attribute\n              const realSrc = imageRef.current.getAttribute('data-real-src');\n              if (realSrc) {\n                imageRef.current.src = realSrc;\n                imageRef.current.onload = () => {\n                  // Once the image is loaded, update the state to display it\n                  setLoaded(true);\n                };\n              }\n            }\n\n            // Disconnect the observer since we only want to load the image once\n            observer.disconnect();\n          }, delay);\n\n          // Clean up the timeout on unmount or if the image is loaded before the timeout\n          return () => clearTimeout(timeoutId);\n        }\n      });\n    }, options);\n\n    // Start observing the image element\n    if (imageRef.current) {\n      observer.observe(imageRef.current);\n    }\n\n    // Clean up the observer on unmount\n    return () => {\n      if (imageRef.current) {\n        observer.unobserve(imageRef.current);\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"img\", {\n    ref: imageRef,\n    \"data-real-src\": dataRealSrc,\n    src: loaded ? dataRealSrc : src,\n    alt: alt\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n_s(LazyImage, \"CtJin2S9Vz94qpWyBPb7T49P4ac=\");\n_c = LazyImage;\nexport default LazyImage;\nvar _c;\n$RefreshReg$(_c, \"LazyImage\");","map":{"version":3,"names":["React","useRef","useEffect","useState","jsxDEV","_jsxDEV","LazyImage","src","dataRealSrc","alt","_s","loaded","setLoaded","imageRef","options","root","rootMargin","threshold","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","delay","timeoutId","setTimeout","current","realSrc","getAttribute","onload","disconnect","clearTimeout","observe","unobserve","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/babu7/OneDrive/Desktop/djangoyoutube2/reelyoutube/frontend/src/pages/LazyImage.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\r\n\r\nfunction LazyImage({ src, 'data-real-src': dataRealSrc, alt }) {\r\n  const [loaded, setLoaded] = useState(false);\r\n  const imageRef = useRef();\r\n\r\n  useEffect(() => {\r\n    const options = {\r\n      root: null, // viewport\r\n      rootMargin: '0px', // margin around root\r\n      threshold: 0.5, // visible area ratio\r\n    };\r\n\r\n    const observer = new IntersectionObserver((entries) => {\r\n      entries.forEach((entry) => {\r\n        if (entry.isIntersecting) {\r\n          // Set a 500ms delay before loading the image\r\n          const delay = 500;\r\n\r\n          // Wait for the delay before loading the image\r\n          const timeoutId = setTimeout(() => {\r\n            // Ensure that imageRef.current exists before accessing its attributes\r\n            if (imageRef.current) {\r\n              // Load the image by setting the data-real-src attribute\r\n              const realSrc = imageRef.current.getAttribute('data-real-src');\r\n              if (realSrc) {\r\n                imageRef.current.src = realSrc;\r\n                imageRef.current.onload = () => {\r\n                  // Once the image is loaded, update the state to display it\r\n                  setLoaded(true);\r\n                };\r\n              }\r\n            }\r\n\r\n            // Disconnect the observer since we only want to load the image once\r\n            observer.disconnect();\r\n          }, delay);\r\n\r\n          // Clean up the timeout on unmount or if the image is loaded before the timeout\r\n          return () => clearTimeout(timeoutId);\r\n        }\r\n      });\r\n    }, options);\r\n\r\n    // Start observing the image element\r\n    if (imageRef.current) {\r\n      observer.observe(imageRef.current);\r\n    }\r\n\r\n    // Clean up the observer on unmount\r\n    return () => {\r\n      if (imageRef.current) {\r\n        observer.unobserve(imageRef.current);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <img\r\n      ref={imageRef}\r\n      data-real-src={dataRealSrc}\r\n      src={loaded ? dataRealSrc : src}\r\n      alt={alt}\r\n    />\r\n  );\r\n}\r\n\r\nexport default LazyImage;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3D,SAASC,SAASA,CAAC;EAAEC,GAAG;EAAE,eAAe,EAAEC,WAAW;EAAEC;AAAI,CAAC,EAAE;EAAAC,EAAA;EAC7D,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAC3C,MAAMU,QAAQ,GAAGZ,MAAM,CAAC,CAAC;EAEzBC,SAAS,CAAC,MAAM;IACd,MAAMY,OAAO,GAAG;MACdC,IAAI,EAAE,IAAI;MAAE;MACZC,UAAU,EAAE,KAAK;MAAE;MACnBC,SAAS,EAAE,GAAG,CAAE;IAClB,CAAC;;IAED,MAAMC,QAAQ,GAAG,IAAIC,oBAAoB,CAAEC,OAAO,IAAK;MACrDA,OAAO,CAACC,OAAO,CAAEC,KAAK,IAAK;QACzB,IAAIA,KAAK,CAACC,cAAc,EAAE;UACxB;UACA,MAAMC,KAAK,GAAG,GAAG;;UAEjB;UACA,MAAMC,SAAS,GAAGC,UAAU,CAAC,MAAM;YACjC;YACA,IAAIb,QAAQ,CAACc,OAAO,EAAE;cACpB;cACA,MAAMC,OAAO,GAAGf,QAAQ,CAACc,OAAO,CAACE,YAAY,CAAC,eAAe,CAAC;cAC9D,IAAID,OAAO,EAAE;gBACXf,QAAQ,CAACc,OAAO,CAACpB,GAAG,GAAGqB,OAAO;gBAC9Bf,QAAQ,CAACc,OAAO,CAACG,MAAM,GAAG,MAAM;kBAC9B;kBACAlB,SAAS,CAAC,IAAI,CAAC;gBACjB,CAAC;cACH;YACF;;YAEA;YACAM,QAAQ,CAACa,UAAU,CAAC,CAAC;UACvB,CAAC,EAAEP,KAAK,CAAC;;UAET;UACA,OAAO,MAAMQ,YAAY,CAACP,SAAS,CAAC;QACtC;MACF,CAAC,CAAC;IACJ,CAAC,EAAEX,OAAO,CAAC;;IAEX;IACA,IAAID,QAAQ,CAACc,OAAO,EAAE;MACpBT,QAAQ,CAACe,OAAO,CAACpB,QAAQ,CAACc,OAAO,CAAC;IACpC;;IAEA;IACA,OAAO,MAAM;MACX,IAAId,QAAQ,CAACc,OAAO,EAAE;QACpBT,QAAQ,CAACgB,SAAS,CAACrB,QAAQ,CAACc,OAAO,CAAC;MACtC;IACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEtB,OAAA;IACE8B,GAAG,EAAEtB,QAAS;IACd,iBAAeL,WAAY;IAC3BD,GAAG,EAAEI,MAAM,GAAGH,WAAW,GAAGD,GAAI;IAChCE,GAAG,EAAEA;EAAI;IAAA2B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACV,CAAC;AAEN;AAAC7B,EAAA,CA/DQJ,SAAS;AAAAkC,EAAA,GAATlC,SAAS;AAiElB,eAAeA,SAAS;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}