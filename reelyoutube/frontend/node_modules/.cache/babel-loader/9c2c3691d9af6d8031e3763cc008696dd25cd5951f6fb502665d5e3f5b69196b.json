{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nvar _templateObject = _taggedTemplateLiteralLoose(['Text Tracks are being loaded from another origin but the crossorigin attribute isn\\'t used.\\n            This may prevent text tracks from loading.'], ['Text Tracks are being loaded from another origin but the crossorigin attribute isn\\'t used.\\n            This may prevent text tracks from loading.']);\nvar _tech = require('./tech.js');\nvar _tech2 = _interopRequireDefault(_tech);\nvar _component = require('../component');\nvar _component2 = _interopRequireDefault(_component);\nvar _dom = require('../utils/dom.js');\nvar Dom = _interopRequireWildcard(_dom);\nvar _url = require('../utils/url.js');\nvar Url = _interopRequireWildcard(_url);\nvar _fn = require('../utils/fn.js');\nvar Fn = _interopRequireWildcard(_fn);\nvar _log = require('../utils/log.js');\nvar _log2 = _interopRequireDefault(_log);\nvar _tsml = require('tsml');\nvar _tsml2 = _interopRequireDefault(_tsml);\nvar _browser = require('../utils/browser.js');\nvar browser = _interopRequireWildcard(_browser);\nvar _document = require('global/document');\nvar _document2 = _interopRequireDefault(_document);\nvar _window = require('global/window');\nvar _window2 = _interopRequireDefault(_window);\nvar _obj = require('../utils/obj');\nvar _mergeOptions = require('../utils/merge-options.js');\nvar _mergeOptions2 = _interopRequireDefault(_mergeOptions);\nvar _toTitleCase = require('../utils/to-title-case.js');\nvar _toTitleCase2 = _interopRequireDefault(_toTitleCase);\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n    newObj['default'] = obj;\n    return newObj;\n  }\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\nfunction _taggedTemplateLiteralLoose(strings, raw) {\n  strings.raw = raw;\n  return strings;\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n} /**\n   * @file html5.js\n   */\n\n/**\n * HTML5 Media Controller - Wrapper for HTML5 Media API\n *\n * @mixes Tech~SouceHandlerAdditions\n * @extends Tech\n */\nvar Html5 = function (_Tech) {\n  _inherits(Html5, _Tech);\n\n  /**\n   * Create an instance of this Tech.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @param {Component~ReadyCallback} ready\n   *        Callback function to call when the `HTML5` Tech is ready.\n   */\n  function Html5(options, ready) {\n    _classCallCheck(this, Html5);\n    var _this = _possibleConstructorReturn(this, _Tech.call(this, options, ready));\n    var source = options.source;\n    var crossoriginTracks = false;\n\n    // Set the source if one is provided\n    // 1) Check if the source is new (if not, we want to keep the original so playback isn't interrupted)\n    // 2) Check to see if the network state of the tag was failed at init, and if so, reset the source\n    // anyway so the error gets fired.\n    if (source && (_this.el_.currentSrc !== source.src || options.tag && options.tag.initNetworkState_ === 3)) {\n      _this.setSource(source);\n    } else {\n      _this.handleLateInit_(_this.el_);\n    }\n    if (_this.el_.hasChildNodes()) {\n      var nodes = _this.el_.childNodes;\n      var nodesLength = nodes.length;\n      var removeNodes = [];\n      while (nodesLength--) {\n        var node = nodes[nodesLength];\n        var nodeName = node.nodeName.toLowerCase();\n        if (nodeName === 'track') {\n          if (!_this.featuresNativeTextTracks) {\n            // Empty video tag tracks so the built-in player doesn't use them also.\n            // This may not be fast enough to stop HTML5 browsers from reading the tags\n            // so we'll need to turn off any default tracks if we're manually doing\n            // captions and subtitles. videoElement.textTracks\n            removeNodes.push(node);\n          } else {\n            // store HTMLTrackElement and TextTrack to remote list\n            _this.remoteTextTrackEls().addTrackElement_(node);\n            _this.remoteTextTracks().addTrack_(node.track);\n            if (!crossoriginTracks && !_this.el_.hasAttribute('crossorigin') && Url.isCrossOrigin(node.src)) {\n              crossoriginTracks = true;\n            }\n          }\n        }\n      }\n      for (var i = 0; i < removeNodes.length; i++) {\n        _this.el_.removeChild(removeNodes[i]);\n      }\n    }\n\n    // TODO: add text tracks into this list\n    var trackTypes = ['audio', 'video'];\n\n    // ProxyNative Video/Audio Track\n    trackTypes.forEach(function (type) {\n      var elTracks = _this.el()[type + 'Tracks'];\n      var techTracks = _this[type + 'Tracks']();\n      var capitalType = (0, _toTitleCase2['default'])(type);\n      if (!_this['featuresNative' + capitalType + 'Tracks'] || !elTracks || !elTracks.addEventListener) {\n        return;\n      }\n      _this['handle' + capitalType + 'TrackChange_'] = function (e) {\n        techTracks.trigger({\n          type: 'change',\n          target: techTracks,\n          currentTarget: techTracks,\n          srcElement: techTracks\n        });\n      };\n      _this['handle' + capitalType + 'TrackAdd_'] = function (e) {\n        return techTracks.addTrack(e.track);\n      };\n      _this['handle' + capitalType + 'TrackRemove_'] = function (e) {\n        return techTracks.removeTrack(e.track);\n      };\n      elTracks.addEventListener('change', _this['handle' + capitalType + 'TrackChange_']);\n      elTracks.addEventListener('addtrack', _this['handle' + capitalType + 'TrackAdd_']);\n      elTracks.addEventListener('removetrack', _this['handle' + capitalType + 'TrackRemove_']);\n      _this['removeOld' + capitalType + 'Tracks_'] = function (e) {\n        return _this.removeOldTracks_(techTracks, elTracks);\n      };\n\n      // Remove (native) tracks that are not used anymore\n      _this.on('loadstart', _this['removeOld' + capitalType + 'Tracks_']);\n    });\n    if (_this.featuresNativeTextTracks) {\n      if (crossoriginTracks) {\n        _log2['default'].warn((0, _tsml2['default'])(_templateObject));\n      }\n      _this.handleTextTrackChange_ = Fn.bind(_this, _this.handleTextTrackChange);\n      _this.handleTextTrackAdd_ = Fn.bind(_this, _this.handleTextTrackAdd);\n      _this.handleTextTrackRemove_ = Fn.bind(_this, _this.handleTextTrackRemove);\n      _this.proxyNativeTextTracks_();\n    }\n\n    // prevent iOS Safari from disabling metadata text tracks during native playback\n    _this.restoreMetadataTracksInIOSNativePlayer_();\n\n    // Determine if native controls should be used\n    // Our goal should be to get the custom controls on mobile solid everywhere\n    // so we can remove this all together. Right now this will block custom\n    // controls on touch enabled laptops like the Chrome Pixel\n    if ((browser.TOUCH_ENABLED || browser.IS_IPHONE || browser.IS_NATIVE_ANDROID) && options.nativeControlsForTouch === true) {\n      _this.setControls(true);\n    }\n\n    // on iOS, we want to proxy `webkitbeginfullscreen` and `webkitendfullscreen`\n    // into a `fullscreenchange` event\n    _this.proxyWebkitFullscreen_();\n    _this.triggerReady();\n    return _this;\n  }\n\n  /**\n   * Dispose of `HTML5` media element and remove all tracks.\n   */\n\n  Html5.prototype.dispose = function dispose() {\n    var _this2 = this;\n\n    // Un-ProxyNativeTracks\n    ['audio', 'video', 'text'].forEach(function (type) {\n      var capitalType = (0, _toTitleCase2['default'])(type);\n      var tl = _this2.el_[type + 'Tracks'];\n      if (tl && tl.removeEventListener) {\n        tl.removeEventListener('change', _this2['handle' + capitalType + 'TrackChange_']);\n        tl.removeEventListener('addtrack', _this2['handle' + capitalType + 'TrackAdd_']);\n        tl.removeEventListener('removetrack', _this2['handle' + capitalType + 'TrackRemove_']);\n      }\n\n      // Stop removing old text tracks\n      if (tl) {\n        _this2.off('loadstart', _this2['removeOld' + capitalType + 'Tracks_']);\n      }\n    });\n    Html5.disposeMediaElement(this.el_);\n    // tech will handle clearing of the emulated track list\n    _Tech.prototype.dispose.call(this);\n  };\n\n  /**\n   * When a captions track is enabled in the iOS Safari native player, all other\n   * tracks are disabled (including metadata tracks), which nulls all of their\n   * associated cue points. This will restore metadata tracks to their pre-fullscreen\n   * state in those cases so that cue points are not needlessly lost.\n   *\n   * @private\n   */\n\n  Html5.prototype.restoreMetadataTracksInIOSNativePlayer_ = function restoreMetadataTracksInIOSNativePlayer_() {\n    var textTracks = this.textTracks();\n    var metadataTracksPreFullscreenState = void 0;\n\n    // captures a snapshot of every metadata track's current state\n    var takeMetadataTrackSnapshot = function takeMetadataTrackSnapshot() {\n      metadataTracksPreFullscreenState = [];\n      for (var i = 0; i < textTracks.length; i++) {\n        var track = textTracks[i];\n        if (track.kind === 'metadata') {\n          metadataTracksPreFullscreenState.push({\n            track: track,\n            storedMode: track.mode\n          });\n        }\n      }\n    };\n\n    // snapshot each metadata track's initial state, and update the snapshot\n    // each time there is a track 'change' event\n    takeMetadataTrackSnapshot();\n    textTracks.addEventListener('change', takeMetadataTrackSnapshot);\n    var restoreTrackMode = function restoreTrackMode() {\n      for (var i = 0; i < metadataTracksPreFullscreenState.length; i++) {\n        var storedTrack = metadataTracksPreFullscreenState[i];\n        if (storedTrack.track.mode === 'disabled' && storedTrack.track.mode !== storedTrack.storedMode) {\n          storedTrack.track.mode = storedTrack.storedMode;\n        }\n      }\n      // we only want this handler to be executed on the first 'change' event\n      textTracks.removeEventListener('change', restoreTrackMode);\n    };\n\n    // when we enter fullscreen playback, stop updating the snapshot and\n    // restore all track modes to their pre-fullscreen state\n    this.on('webkitbeginfullscreen', function () {\n      textTracks.removeEventListener('change', takeMetadataTrackSnapshot);\n\n      // remove the listener before adding it just in case it wasn't previously removed\n      textTracks.removeEventListener('change', restoreTrackMode);\n      textTracks.addEventListener('change', restoreTrackMode);\n    });\n\n    // start updating the snapshot again after leaving fullscreen\n    this.on('webkitendfullscreen', function () {\n      // remove the listener before adding it just in case it wasn't previously removed\n      textTracks.removeEventListener('change', takeMetadataTrackSnapshot);\n      textTracks.addEventListener('change', takeMetadataTrackSnapshot);\n\n      // remove the restoreTrackMode handler in case it wasn't triggered during fullscreen playback\n      textTracks.removeEventListener('change', restoreTrackMode);\n    });\n  };\n\n  /**\n   * Create the `Html5` Tech's DOM element.\n   *\n   * @return {Element}\n   *         The element that gets created.\n   */\n\n  Html5.prototype.createEl = function createEl() {\n    var el = this.options_.tag;\n\n    // Check if this browser supports moving the element into the box.\n    // On the iPhone video will break if you move the element,\n    // So we have to create a brand new element.\n    // If we ingested the player div, we do not need to move the media element.\n    if (!el || !(this.options_.playerElIngest || this.movingMediaElementInDOM)) {\n      // If the original tag is still there, clone and remove it.\n      if (el) {\n        var clone = el.cloneNode(true);\n        if (el.parentNode) {\n          el.parentNode.insertBefore(clone, el);\n        }\n        Html5.disposeMediaElement(el);\n        el = clone;\n      } else {\n        el = _document2['default'].createElement('video');\n\n        // determine if native controls should be used\n        var tagAttributes = this.options_.tag && Dom.getElAttributes(this.options_.tag);\n        var attributes = (0, _mergeOptions2['default'])({}, tagAttributes);\n        if (!browser.TOUCH_ENABLED || this.options_.nativeControlsForTouch !== true) {\n          delete attributes.controls;\n        }\n        Dom.setElAttributes(el, (0, _obj.assign)(attributes, {\n          id: this.options_.techId,\n          'class': 'vjs-tech'\n        }));\n      }\n      el.playerId = this.options_.playerId;\n    }\n    if (typeof this.options_.preload !== 'undefined') {\n      Dom.setAttribute(el, 'preload', this.options_.preload);\n    }\n\n    // Update specific tag settings, in case they were overridden\n    // `autoplay` has to be *last* so that `muted` and `playsinline` are present\n    // when iOS/Safari or other browsers attempt to autoplay.\n    var settingsAttrs = ['loop', 'muted', 'playsinline', 'autoplay'];\n    for (var i = settingsAttrs.length - 1; i >= 0; i--) {\n      var attr = settingsAttrs[i];\n      var value = this.options_[attr];\n      if (typeof value !== 'undefined') {\n        if (value) {\n          Dom.setAttribute(el, attr, attr);\n        } else {\n          Dom.removeAttribute(el, attr);\n        }\n        el[attr] = value;\n      }\n    }\n    return el;\n  };\n\n  /**\n   * This will be triggered if the loadstart event has already fired, before videojs was\n   * ready. Two known examples of when this can happen are:\n   * 1. If we're loading the playback object after it has started loading\n   * 2. The media is already playing the (often with autoplay on) then\n   *\n   * This function will fire another loadstart so that videojs can catchup.\n   *\n   * @fires Tech#loadstart\n   *\n   * @return {undefined}\n   *         returns nothing.\n   */\n\n  Html5.prototype.handleLateInit_ = function handleLateInit_(el) {\n    if (el.networkState === 0 || el.networkState === 3) {\n      // The video element hasn't started loading the source yet\n      // or didn't find a source\n      return;\n    }\n    if (el.readyState === 0) {\n      // NetworkState is set synchronously BUT loadstart is fired at the\n      // end of the current stack, usually before setInterval(fn, 0).\n      // So at this point we know loadstart may have already fired or is\n      // about to fire, and either way the player hasn't seen it yet.\n      // We don't want to fire loadstart prematurely here and cause a\n      // double loadstart so we'll wait and see if it happens between now\n      // and the next loop, and fire it if not.\n      // HOWEVER, we also want to make sure it fires before loadedmetadata\n      // which could also happen between now and the next loop, so we'll\n      // watch for that also.\n      var loadstartFired = false;\n      var setLoadstartFired = function setLoadstartFired() {\n        loadstartFired = true;\n      };\n      this.on('loadstart', setLoadstartFired);\n      var triggerLoadstart = function triggerLoadstart() {\n        // We did miss the original loadstart. Make sure the player\n        // sees loadstart before loadedmetadata\n        if (!loadstartFired) {\n          this.trigger('loadstart');\n        }\n      };\n      this.on('loadedmetadata', triggerLoadstart);\n      this.ready(function () {\n        this.off('loadstart', setLoadstartFired);\n        this.off('loadedmetadata', triggerLoadstart);\n        if (!loadstartFired) {\n          // We did miss the original native loadstart. Fire it now.\n          this.trigger('loadstart');\n        }\n      });\n      return;\n    }\n\n    // From here on we know that loadstart already fired and we missed it.\n    // The other readyState events aren't as much of a problem if we double\n    // them, so not going to go to as much trouble as loadstart to prevent\n    // that unless we find reason to.\n    var eventsToTrigger = ['loadstart'];\n\n    // loadedmetadata: newly equal to HAVE_METADATA (1) or greater\n    eventsToTrigger.push('loadedmetadata');\n\n    // loadeddata: newly increased to HAVE_CURRENT_DATA (2) or greater\n    if (el.readyState >= 2) {\n      eventsToTrigger.push('loadeddata');\n    }\n\n    // canplay: newly increased to HAVE_FUTURE_DATA (3) or greater\n    if (el.readyState >= 3) {\n      eventsToTrigger.push('canplay');\n    }\n\n    // canplaythrough: newly equal to HAVE_ENOUGH_DATA (4)\n    if (el.readyState >= 4) {\n      eventsToTrigger.push('canplaythrough');\n    }\n\n    // We still need to give the player time to add event listeners\n    this.ready(function () {\n      eventsToTrigger.forEach(function (type) {\n        this.trigger(type);\n      }, this);\n    });\n  };\n\n  /**\n   * Add event listeners to native text track events. This adds the native text tracks\n   * to our emulated {@link TextTrackList}.\n   */\n\n  Html5.prototype.proxyNativeTextTracks_ = function proxyNativeTextTracks_() {\n    var tt = this.el().textTracks;\n    if (tt) {\n      // Add tracks - if player is initialised after DOM loaded, textTracks\n      // will not trigger addtrack\n      for (var i = 0; i < tt.length; i++) {\n        this.textTracks().addTrack_(tt[i]);\n      }\n      if (tt.addEventListener) {\n        tt.addEventListener('change', this.handleTextTrackChange_);\n        tt.addEventListener('addtrack', this.handleTextTrackAdd_);\n        tt.addEventListener('removetrack', this.handleTextTrackRemove_);\n      }\n\n      // Remove (native) texttracks that are not used anymore\n      this.on('loadstart', this.removeOldTextTracks_);\n    }\n  };\n\n  /**\n   * Handle any {@link TextTrackList} `change` event.\n   *\n   * @param {EventTarget~Event} e\n   *        The `change` event that caused this to run.\n   *\n   * @listens TextTrackList#change\n   */\n\n  Html5.prototype.handleTextTrackChange = function handleTextTrackChange(e) {\n    var tt = this.textTracks();\n    this.textTracks().trigger({\n      type: 'change',\n      target: tt,\n      currentTarget: tt,\n      srcElement: tt\n    });\n  };\n\n  /**\n   * Handle any {@link TextTrackList} `addtrack` event.\n   *\n   * @param {EventTarget~Event} e\n   *        The `addtrack` event that caused this to run.\n   *\n   * @listens TextTrackList#addtrack\n   */\n\n  Html5.prototype.handleTextTrackAdd = function handleTextTrackAdd(e) {\n    this.textTracks().addTrack_(e.track);\n  };\n\n  /**\n   * Handle any {@link TextTrackList} `removetrack` event.\n   *\n   * @param {EventTarget~Event} e\n   *        The `removetrack` event that caused this to run.\n   *\n   * @listens TextTrackList#removetrack\n   */\n\n  Html5.prototype.handleTextTrackRemove = function handleTextTrackRemove(e) {\n    this.textTracks().removeTrack_(e.track);\n  };\n\n  /**\n   * This function removes any {@link AudioTrack}s, {@link VideoTrack}s, or\n   * {@link TextTrack}s that are not in the media elements TrackList.\n   *\n   * @param {TrackList} techTracks\n   *        HTML5 Tech's TrackList to search through\n   *\n   * @param {TrackList} elTracks\n   *        HTML5 media elements TrackList to search trough.\n   *\n   * @private\n   */\n\n  Html5.prototype.removeOldTracks_ = function removeOldTracks_(techTracks, elTracks) {\n    // This will loop over the techTracks and check if they are still used by the HTML5 media element\n    // If not, they will be removed from the emulated list\n    var removeTracks = [];\n    if (!elTracks) {\n      return;\n    }\n    for (var i = 0; i < techTracks.length; i++) {\n      var techTrack = techTracks[i];\n      var found = false;\n      for (var j = 0; j < elTracks.length; j++) {\n        if (elTracks[j] === techTrack) {\n          found = true;\n          break;\n        }\n      }\n      if (!found) {\n        removeTracks.push(techTrack);\n      }\n    }\n    for (var _i = 0; _i < removeTracks.length; _i++) {\n      var track = removeTracks[_i];\n      techTracks.removeTrack_(track);\n    }\n  };\n\n  /**\n   * Remove {@link TextTrack}s that dont exist in the native track list from our\n   * emulated {@link TextTrackList}.\n   *\n   * @listens Tech#loadstart\n   */\n\n  Html5.prototype.removeOldTextTracks_ = function removeOldTextTracks_(e) {\n    var techTracks = this.textTracks();\n    var elTracks = this.el().textTracks;\n    this.removeOldTracks_(techTracks, elTracks);\n  };\n\n  /**\n   * Called by {@link Player#play} to play using the `Html5` `Tech`.\n   */\n\n  Html5.prototype.play = function play() {\n    var playPromise = this.el_.play();\n\n    // Catch/silence error when a pause interrupts a play request\n    // on browsers which return a promise\n    if (playPromise !== undefined && typeof playPromise.then === 'function') {\n      playPromise.then(null, function (e) {});\n    }\n  };\n\n  /**\n   * Set current time for the `HTML5` tech.\n   *\n   * @param {number} seconds\n   *        Set the current time of the media to this.\n   */\n\n  Html5.prototype.setCurrentTime = function setCurrentTime(seconds) {\n    try {\n      this.el_.currentTime = seconds;\n    } catch (e) {\n      (0, _log2['default'])(e, 'Video is not ready. (Video.js)');\n      // this.warning(VideoJS.warnings.videoNotReady);\n    }\n  };\n\n  /**\n   * Get the current duration of the HTML5 media element.\n   *\n   * @return {number}\n   *         The duration of the media or 0 if there is no duration.\n   */\n\n  Html5.prototype.duration = function duration() {\n    var _this3 = this;\n\n    // Android Chrome will report duration as Infinity for VOD HLS until after\n    // playback has started, which triggers the live display erroneously.\n    // Return NaN if playback has not started and trigger a durationupdate once\n    // the duration can be reliably known.\n    if (this.el_.duration === Infinity && browser.IS_ANDROID && browser.IS_CHROME) {\n      if (this.el_.currentTime === 0) {\n        // Wait for the first `timeupdate` with currentTime > 0 - there may be\n        // several with 0\n        var checkProgress = function checkProgress() {\n          if (_this3.el_.currentTime > 0) {\n            // Trigger durationchange for genuinely live video\n            if (_this3.el_.duration === Infinity) {\n              _this3.trigger('durationchange');\n            }\n            _this3.off('timeupdate', checkProgress);\n          }\n        };\n        this.on('timeupdate', checkProgress);\n        return NaN;\n      }\n    }\n    return this.el_.duration || NaN;\n  };\n\n  /**\n   * Get the current width of the HTML5 media element.\n   *\n   * @return {number}\n   *         The width of the HTML5 media element.\n   */\n\n  Html5.prototype.width = function width() {\n    return this.el_.offsetWidth;\n  };\n\n  /**\n   * Get the current height of the HTML5 media element.\n   *\n   * @return {number}\n   *         The heigth of the HTML5 media element.\n   */\n\n  Html5.prototype.height = function height() {\n    return this.el_.offsetHeight;\n  };\n\n  /**\n   * Proxy iOS `webkitbeginfullscreen` and `webkitendfullscreen` into\n   * `fullscreenchange` event.\n   *\n   * @private\n   * @fires fullscreenchange\n   * @listens webkitendfullscreen\n   * @listens webkitbeginfullscreen\n   * @listens webkitbeginfullscreen\n   */\n\n  Html5.prototype.proxyWebkitFullscreen_ = function proxyWebkitFullscreen_() {\n    var _this4 = this;\n    if (!('webkitDisplayingFullscreen' in this.el_)) {\n      return;\n    }\n    var endFn = function endFn() {\n      this.trigger('fullscreenchange', {\n        isFullscreen: false\n      });\n    };\n    var beginFn = function beginFn() {\n      if ('webkitPresentationMode' in this.el_ && this.el_.webkitPresentationMode !== 'picture-in-picture') {\n        this.one('webkitendfullscreen', endFn);\n        this.trigger('fullscreenchange', {\n          isFullscreen: true\n        });\n      }\n    };\n    this.on('webkitbeginfullscreen', beginFn);\n    this.on('dispose', function () {\n      _this4.off('webkitbeginfullscreen', beginFn);\n      _this4.off('webkitendfullscreen', endFn);\n    });\n  };\n\n  /**\n   * Check if fullscreen is supported on the current playback device.\n   *\n   * @return {boolean}\n   *         - True if fullscreen is supported.\n   *         - False if fullscreen is not supported.\n   */\n\n  Html5.prototype.supportsFullScreen = function supportsFullScreen() {\n    if (typeof this.el_.webkitEnterFullScreen === 'function') {\n      var userAgent = _window2['default'].navigator && _window2['default'].navigator.userAgent || '';\n\n      // Seems to be broken in Chromium/Chrome && Safari in Leopard\n      if (/Android/.test(userAgent) || !/Chrome|Mac OS X 10.5/.test(userAgent)) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  /**\n   * Request that the `HTML5` Tech enter fullscreen.\n   */\n\n  Html5.prototype.enterFullScreen = function enterFullScreen() {\n    var video = this.el_;\n    if (video.paused && video.networkState <= video.HAVE_METADATA) {\n      // attempt to prime the video element for programmatic access\n      // this isn't necessary on the desktop but shouldn't hurt\n      this.el_.play();\n\n      // playing and pausing synchronously during the transition to fullscreen\n      // can get iOS ~6.1 devices into a play/pause loop\n      this.setTimeout(function () {\n        video.pause();\n        video.webkitEnterFullScreen();\n      }, 0);\n    } else {\n      video.webkitEnterFullScreen();\n    }\n  };\n\n  /**\n   * Request that the `HTML5` Tech exit fullscreen.\n   */\n\n  Html5.prototype.exitFullScreen = function exitFullScreen() {\n    this.el_.webkitExitFullScreen();\n  };\n\n  /**\n   * A getter/setter for the `Html5` Tech's source object.\n   * > Note: Please use {@link Html5#setSource}\n   *\n   * @param {Tech~SourceObject} [src]\n   *        The source object you want to set on the `HTML5` techs element.\n   *\n   * @return {Tech~SourceObject|undefined}\n   *         - The current source object when a source is not passed in.\n   *         - undefined when setting\n   *\n   * @deprecated Since version 5.\n   */\n\n  Html5.prototype.src = function src(_src) {\n    if (_src === undefined) {\n      return this.el_.src;\n    }\n\n    // Setting src through `src` instead of `setSrc` will be deprecated\n    this.setSrc(_src);\n  };\n\n  /**\n   * Reset the tech by removing all sources and then calling\n   * {@link Html5.resetMediaElement}.\n   */\n\n  Html5.prototype.reset = function reset() {\n    Html5.resetMediaElement(this.el_);\n  };\n\n  /**\n   * Get the current source on the `HTML5` Tech. Falls back to returning the source from\n   * the HTML5 media element.\n   *\n   * @return {Tech~SourceObject}\n   *         The current source object from the HTML5 tech. With a fallback to the\n   *         elements source.\n   */\n\n  Html5.prototype.currentSrc = function currentSrc() {\n    if (this.currentSource_) {\n      return this.currentSource_.src;\n    }\n    return this.el_.currentSrc;\n  };\n\n  /**\n   * Set controls attribute for the HTML5 media Element.\n   *\n   * @param {string} val\n   *        Value to set the controls attribute to\n   */\n\n  Html5.prototype.setControls = function setControls(val) {\n    this.el_.controls = !!val;\n  };\n\n  /**\n   * Create and returns a remote {@link TextTrack} object.\n   *\n   * @param {string} kind\n   *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata)\n   *\n   * @param {string} [label]\n   *        Label to identify the text track\n   *\n   * @param {string} [language]\n   *        Two letter language abbreviation\n   *\n   * @return {TextTrack}\n   *         The TextTrack that gets created.\n   */\n\n  Html5.prototype.addTextTrack = function addTextTrack(kind, label, language) {\n    if (!this.featuresNativeTextTracks) {\n      return _Tech.prototype.addTextTrack.call(this, kind, label, language);\n    }\n    return this.el_.addTextTrack(kind, label, language);\n  };\n\n  /**\n   * Creates either native TextTrack or an emulated TextTrack depending\n   * on the value of `featuresNativeTextTracks`\n   *\n   * @param {Object} options\n   *        The object should contain the options to intialize the TextTrack with.\n   *\n   * @param {string} [options.kind]\n   *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata).\n   *\n   * @param {string} [options.label].\n   *        Label to identify the text track\n   *\n   * @param {string} [options.language]\n   *        Two letter language abbreviation.\n   *\n   * @param {boolean} [options.default]\n   *        Default this track to on.\n   *\n   * @param {string} [options.id]\n   *        The internal id to assign this track.\n   *\n   * @param {string} [options.src]\n   *        A source url for the track.\n   *\n   * @return {HTMLTrackElement}\n   *         The track element that gets created.\n   */\n\n  Html5.prototype.createRemoteTextTrack = function createRemoteTextTrack(options) {\n    if (!this.featuresNativeTextTracks) {\n      return _Tech.prototype.createRemoteTextTrack.call(this, options);\n    }\n    var htmlTrackElement = _document2['default'].createElement('track');\n    if (options.kind) {\n      htmlTrackElement.kind = options.kind;\n    }\n    if (options.label) {\n      htmlTrackElement.label = options.label;\n    }\n    if (options.language || options.srclang) {\n      htmlTrackElement.srclang = options.language || options.srclang;\n    }\n    if (options['default']) {\n      htmlTrackElement['default'] = options['default'];\n    }\n    if (options.id) {\n      htmlTrackElement.id = options.id;\n    }\n    if (options.src) {\n      htmlTrackElement.src = options.src;\n    }\n    return htmlTrackElement;\n  };\n\n  /**\n   * Creates a remote text track object and returns an html track element.\n   *\n   * @param {Object} options The object should contain values for\n   * kind, language, label, and src (location of the WebVTT file)\n   * @param {Boolean} [manualCleanup=true] if set to false, the TextTrack will be\n   * automatically removed from the video element whenever the source changes\n   * @return {HTMLTrackElement} An Html Track Element.\n   * This can be an emulated {@link HTMLTrackElement} or a native one.\n   * @deprecated The default value of the \"manualCleanup\" parameter will default\n   * to \"false\" in upcoming versions of Video.js\n   */\n\n  Html5.prototype.addRemoteTextTrack = function addRemoteTextTrack(options, manualCleanup) {\n    var htmlTrackElement = _Tech.prototype.addRemoteTextTrack.call(this, options, manualCleanup);\n    if (this.featuresNativeTextTracks) {\n      this.el().appendChild(htmlTrackElement);\n    }\n    return htmlTrackElement;\n  };\n\n  /**\n   * Remove remote `TextTrack` from `TextTrackList` object\n   *\n   * @param {TextTrack} track\n   *        `TextTrack` object to remove\n   */\n\n  Html5.prototype.removeRemoteTextTrack = function removeRemoteTextTrack(track) {\n    _Tech.prototype.removeRemoteTextTrack.call(this, track);\n    if (this.featuresNativeTextTracks) {\n      var tracks = this.$$('track');\n      var i = tracks.length;\n      while (i--) {\n        if (track === tracks[i] || track === tracks[i].track) {\n          this.el().removeChild(tracks[i]);\n        }\n      }\n    }\n  };\n\n  /**\n   * Gets available media playback quality metrics as specified by the W3C's Media\n   * Playback Quality API.\n   *\n   * @see [Spec]{@link https://wicg.github.io/media-playback-quality}\n   *\n   * @return {Object}\n   *         An object with supported media playback quality metrics\n   */\n\n  Html5.prototype.getVideoPlaybackQuality = function getVideoPlaybackQuality() {\n    if (typeof this.el().getVideoPlaybackQuality === 'function') {\n      return this.el().getVideoPlaybackQuality();\n    }\n    var videoPlaybackQuality = {};\n    if (typeof this.el().webkitDroppedFrameCount !== 'undefined' && typeof this.el().webkitDecodedFrameCount !== 'undefined') {\n      videoPlaybackQuality.droppedVideoFrames = this.el().webkitDroppedFrameCount;\n      videoPlaybackQuality.totalVideoFrames = this.el().webkitDecodedFrameCount;\n    }\n    if (_window2['default'].performance && typeof _window2['default'].performance.now === 'function') {\n      videoPlaybackQuality.creationTime = _window2['default'].performance.now();\n    } else if (_window2['default'].performance && _window2['default'].performance.timing && typeof _window2['default'].performance.timing.navigationStart === 'number') {\n      videoPlaybackQuality.creationTime = _window2['default'].Date.now() - _window2['default'].performance.timing.navigationStart;\n    }\n    return videoPlaybackQuality;\n  };\n  return Html5;\n}(_tech2['default']);\n\n/* HTML5 Support Testing ---------------------------------------------------- */\n\nif (Dom.isReal()) {\n  /**\n   * Element for testing browser HTML5 media capabilities\n   *\n   * @type {Element}\n   * @constant\n   * @private\n   */\n  Html5.TEST_VID = _document2['default'].createElement('video');\n  var track = _document2['default'].createElement('track');\n  track.kind = 'captions';\n  track.srclang = 'en';\n  track.label = 'English';\n  Html5.TEST_VID.appendChild(track);\n}\n\n/**\n * Check if HTML5 media is supported by this browser/device.\n *\n * @return {boolean}\n *         - True if HTML5 media is supported.\n *         - False if HTML5 media is not supported.\n */\nHtml5.isSupported = function () {\n  // IE9 with no Media Player is a LIAR! (#984)\n  try {\n    Html5.TEST_VID.volume = 0.5;\n  } catch (e) {\n    return false;\n  }\n  return !!(Html5.TEST_VID && Html5.TEST_VID.canPlayType);\n};\n\n/**\n * Check if the volume can be changed in this browser/device.\n * Volume cannot be changed in a lot of mobile devices.\n * Specifically, it can't be changed from 1 on iOS.\n *\n * @return {boolean}\n *         - True if volume can be controlled\n *         - False otherwise\n */\nHtml5.canControlVolume = function () {\n  // IE will error if Windows Media Player not installed #3315\n  try {\n    var volume = Html5.TEST_VID.volume;\n    Html5.TEST_VID.volume = volume / 2 + 0.1;\n    return volume !== Html5.TEST_VID.volume;\n  } catch (e) {\n    return false;\n  }\n};\n\n/**\n * Check if the playback rate can be changed in this browser/device.\n *\n * @return {boolean}\n *         - True if playback rate can be controlled\n *         - False otherwise\n */\nHtml5.canControlPlaybackRate = function () {\n  // Playback rate API is implemented in Android Chrome, but doesn't do anything\n  // https://github.com/videojs/video.js/issues/3180\n  if (browser.IS_ANDROID && browser.IS_CHROME && browser.CHROME_VERSION < 58) {\n    return false;\n  }\n  // IE will error if Windows Media Player not installed #3315\n  try {\n    var playbackRate = Html5.TEST_VID.playbackRate;\n    Html5.TEST_VID.playbackRate = playbackRate / 2 + 0.1;\n    return playbackRate !== Html5.TEST_VID.playbackRate;\n  } catch (e) {\n    return false;\n  }\n};\n\n/**\n * Check to see if native `TextTrack`s are supported by this browser/device.\n *\n * @return {boolean}\n *         - True if native `TextTrack`s are supported.\n *         - False otherwise\n */\nHtml5.supportsNativeTextTracks = function () {\n  return browser.IS_ANY_SAFARI;\n};\n\n/**\n * Check to see if native `VideoTrack`s are supported by this browser/device\n *\n * @return {boolean}\n *        - True if native `VideoTrack`s are supported.\n *        - False otherwise\n */\nHtml5.supportsNativeVideoTracks = function () {\n  return !!(Html5.TEST_VID && Html5.TEST_VID.videoTracks);\n};\n\n/**\n * Check to see if native `AudioTrack`s are supported by this browser/device\n *\n * @return {boolean}\n *        - True if native `AudioTrack`s are supported.\n *        - False otherwise\n */\nHtml5.supportsNativeAudioTracks = function () {\n  return !!(Html5.TEST_VID && Html5.TEST_VID.audioTracks);\n};\n\n/**\n * An array of events available on the Html5 tech.\n *\n * @private\n * @type {Array}\n */\nHtml5.Events = ['loadstart', 'suspend', 'abort', 'error', 'emptied', 'stalled', 'loadedmetadata', 'loadeddata', 'canplay', 'canplaythrough', 'playing', 'waiting', 'seeking', 'seeked', 'ended', 'durationchange', 'timeupdate', 'progress', 'play', 'pause', 'ratechange', 'volumechange'];\n\n/**\n * Boolean indicating whether the `Tech` supports volume control.\n *\n * @type {boolean}\n * @default {@link Html5.canControlVolume}\n */\nHtml5.prototype.featuresVolumeControl = Html5.canControlVolume();\n\n/**\n * Boolean indicating whether the `Tech` supports changing the speed at which the media\n * plays. Examples:\n *   - Set player to play 2x (twice) as fast\n *   - Set player to play 0.5x (half) as fast\n *\n * @type {boolean}\n * @default {@link Html5.canControlPlaybackRate}\n */\nHtml5.prototype.featuresPlaybackRate = Html5.canControlPlaybackRate();\n\n/**\n * Boolean indicating whether the `HTML5` tech currently supports the media element\n * moving in the DOM. iOS breaks if you move the media element, so this is set this to\n * false there. Everywhere else this should be true.\n *\n * @type {boolean}\n * @default\n */\nHtml5.prototype.movingMediaElementInDOM = !browser.IS_IOS;\n\n// TODO: Previous comment: No longer appears to be used. Can probably be removed.\n//       Is this true?\n/**\n * Boolean indicating whether the `HTML5` tech currently supports automatic media resize\n * when going into fullscreen.\n *\n * @type {boolean}\n * @default\n */\nHtml5.prototype.featuresFullscreenResize = true;\n\n/**\n * Boolean indicating whether the `HTML5` tech currently supports the progress event.\n * If this is false, manual `progress` events will be triggred instead.\n *\n * @type {boolean}\n * @default\n */\nHtml5.prototype.featuresProgressEvents = true;\n\n/**\n * Boolean indicating whether the `HTML5` tech currently supports the timeupdate event.\n * If this is false, manual `timeupdate` events will be triggred instead.\n *\n * @default\n */\nHtml5.prototype.featuresTimeupdateEvents = true;\n\n/**\n * Boolean indicating whether the `HTML5` tech currently supports native `TextTrack`s.\n *\n * @type {boolean}\n * @default {@link Html5.supportsNativeTextTracks}\n */\nHtml5.prototype.featuresNativeTextTracks = Html5.supportsNativeTextTracks();\n\n/**\n * Boolean indicating whether the `HTML5` tech currently supports native `VideoTrack`s.\n *\n * @type {boolean}\n * @default {@link Html5.supportsNativeVideoTracks}\n */\nHtml5.prototype.featuresNativeVideoTracks = Html5.supportsNativeVideoTracks();\n\n/**\n * Boolean indicating whether the `HTML5` tech currently supports native `AudioTrack`s.\n *\n * @type {boolean}\n * @default {@link Html5.supportsNativeAudioTracks}\n */\nHtml5.prototype.featuresNativeAudioTracks = Html5.supportsNativeAudioTracks();\n\n// HTML5 Feature detection and Device Fixes --------------------------------- //\nvar canPlayType = Html5.TEST_VID && Html5.TEST_VID.constructor.prototype.canPlayType;\nvar mpegurlRE = /^application\\/(?:x-|vnd\\.apple\\.)mpegurl/i;\nvar mp4RE = /^video\\/mp4/i;\nHtml5.patchCanPlayType = function () {\n  // Android 4.0 and above can play HLS to some extent but it reports being unable to do so\n  if (browser.ANDROID_VERSION >= 4.0 && !browser.IS_FIREFOX) {\n    Html5.TEST_VID.constructor.prototype.canPlayType = function (type) {\n      if (type && mpegurlRE.test(type)) {\n        return 'maybe';\n      }\n      return canPlayType.call(this, type);\n    };\n\n    // Override Android 2.2 and less canPlayType method which is broken\n  } else if (browser.IS_OLD_ANDROID) {\n    Html5.TEST_VID.constructor.prototype.canPlayType = function (type) {\n      if (type && mp4RE.test(type)) {\n        return 'maybe';\n      }\n      return canPlayType.call(this, type);\n    };\n  }\n};\nHtml5.unpatchCanPlayType = function () {\n  var r = Html5.TEST_VID.constructor.prototype.canPlayType;\n  Html5.TEST_VID.constructor.prototype.canPlayType = canPlayType;\n  return r;\n};\n\n// by default, patch the media element\nHtml5.patchCanPlayType();\nHtml5.disposeMediaElement = function (el) {\n  if (!el) {\n    return;\n  }\n  if (el.parentNode) {\n    el.parentNode.removeChild(el);\n  }\n\n  // remove any child track or source nodes to prevent their loading\n  while (el.hasChildNodes()) {\n    el.removeChild(el.firstChild);\n  }\n\n  // remove any src reference. not setting `src=''` because that causes a warning\n  // in firefox\n  el.removeAttribute('src');\n\n  // force the media element to update its loading state by calling load()\n  // however IE on Windows 7N has a bug that throws an error so need a try/catch (#793)\n  if (typeof el.load === 'function') {\n    // wrapping in an iife so it's not deoptimized (#1060#discussion_r10324473)\n    (function () {\n      try {\n        el.load();\n      } catch (e) {\n        // not supported\n      }\n    })();\n  }\n};\nHtml5.resetMediaElement = function (el) {\n  if (!el) {\n    return;\n  }\n  var sources = el.querySelectorAll('source');\n  var i = sources.length;\n  while (i--) {\n    el.removeChild(sources[i]);\n  }\n\n  // remove any src reference.\n  // not setting `src=''` because that throws an error\n  el.removeAttribute('src');\n  if (typeof el.load === 'function') {\n    // wrapping in an iife so it's not deoptimized (#1060#discussion_r10324473)\n    (function () {\n      try {\n        el.load();\n      } catch (e) {\n        // satisfy linter\n      }\n    })();\n  }\n};\n\n/* Native HTML5 element property wrapping ----------------------------------- */\n// Wrap native boolean attributes with getters that check both property and attribute\n// The list is as followed:\n// muted, defaultMuted, autoplay, controls, loop, playsinline\n[\n/**\n * Get the value of `muted` from the media element. `muted` indicates\n * that the volume for the media should be set to silent. This does not actually change\n * the `volume` attribute.\n *\n * @method Html5#muted\n * @return {boolean}\n *         - True if the value of `volume` should be ignored and the audio set to silent.\n *         - False if the value of `volume` should be used.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-muted}\n */\n'muted',\n/**\n * Get the value of `defaultMuted` from the media element. `defaultMuted` indicates\n * whether the media should start muted or not. Only changes the default state of the\n * media. `muted` and `defaultMuted` can have different values. {@link Html5#muted} indicates the\n * current state.\n *\n * @method Html5#defaultMuted\n * @return {boolean}\n *         - The value of `defaultMuted` from the media element.\n *         - True indicates that the media should start muted.\n *         - False indicates that the media should not start muted\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-defaultmuted}\n */\n'defaultMuted',\n/**\n * Get the value of `autoplay` from the media element. `autoplay` indicates\n * that the media should start to play as soon as the page is ready.\n *\n * @method Html5#autoplay\n * @return {boolean}\n *         - The value of `autoplay` from the media element.\n *         - True indicates that the media should start as soon as the page loads.\n *         - False indicates that the media should not start as soon as the page loads.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-autoplay}\n */\n'autoplay',\n/**\n * Get the value of `controls` from the media element. `controls` indicates\n * whether the native media controls should be shown or hidden.\n *\n * @method Html5#controls\n * @return {boolean}\n *         - The value of `controls` from the media element.\n *         - True indicates that native controls should be showing.\n *         - False indicates that native controls should be hidden.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-controls}\n */\n'controls',\n/**\n * Get the value of `loop` from the media element. `loop` indicates\n * that the media should return to the start of the media and continue playing once\n * it reaches the end.\n *\n * @method Html5#loop\n * @return {boolean}\n *         - The value of `loop` from the media element.\n *         - True indicates that playback should seek back to start once\n *           the end of a media is reached.\n *         - False indicates that playback should not loop back to the start when the\n *           end of the media is reached.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-loop}\n */\n'loop',\n/**\n * Get the value of `playsinline` from the media element. `playsinline` indicates\n * to the browser that non-fullscreen playback is preferred when fullscreen\n * playback is the native default, such as in iOS Safari.\n *\n * @method Html5#playsinline\n * @return {boolean}\n *         - The value of `playsinline` from the media element.\n *         - True indicates that the media should play inline.\n *         - False indicates that the media should not play inline.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/#attr-video-playsinline}\n */\n'playsinline'].forEach(function (prop) {\n  Html5.prototype[prop] = function () {\n    return this.el_[prop] || this.el_.hasAttribute(prop);\n  };\n});\n\n// Wrap native boolean attributes with setters that set both property and attribute\n// The list is as followed:\n// setMuted, setDefaultMuted, setAutoplay, setLoop, setPlaysinline\n// setControls is special-cased above\n[\n/**\n * Set the value of `muted` on the media element. `muted` indicates that the current\n * audio level should be silent.\n *\n * @method Html5#setMuted\n * @param {boolean} muted\n *        - True if the audio should be set to silent\n *        - False otherwise\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-muted}\n */\n'muted',\n/**\n * Set the value of `defaultMuted` on the media element. `defaultMuted` indicates that the current\n * audio level should be silent, but will only effect the muted level on intial playback..\n *\n * @method Html5.prototype.setDefaultMuted\n * @param {boolean} defaultMuted\n *        - True if the audio should be set to silent\n *        - False otherwise\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-defaultmuted}\n */\n'defaultMuted',\n/**\n * Set the value of `autoplay` on the media element. `autoplay` indicates\n * that the media should start to play as soon as the page is ready.\n *\n * @method Html5#setAutoplay\n * @param {boolean} autoplay\n *         - True indicates that the media should start as soon as the page loads.\n *         - False indicates that the media should not start as soon as the page loads.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-autoplay}\n */\n'autoplay',\n/**\n * Set the value of `loop` on the media element. `loop` indicates\n * that the media should return to the start of the media and continue playing once\n * it reaches the end.\n *\n * @method Html5#setLoop\n * @param {boolean} loop\n *         - True indicates that playback should seek back to start once\n *           the end of a media is reached.\n *         - False indicates that playback should not loop back to the start when the\n *           end of the media is reached.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-loop}\n */\n'loop',\n/**\n * Set the value of `playsinline` from the media element. `playsinline` indicates\n * to the browser that non-fullscreen playback is preferred when fullscreen\n * playback is the native default, such as in iOS Safari.\n *\n * @method Html5#setPlaysinline\n * @param {boolean} playsinline\n *         - True indicates that the media should play inline.\n *         - False indicates that the media should not play inline.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/#attr-video-playsinline}\n */\n'playsinline'].forEach(function (prop) {\n  Html5.prototype['set' + (0, _toTitleCase2['default'])(prop)] = function (v) {\n    this.el_[prop] = v;\n    if (v) {\n      this.el_.setAttribute(prop, prop);\n    } else {\n      this.el_.removeAttribute(prop);\n    }\n  };\n});\n\n// Wrap native properties with a getter\n// The list is as followed\n// paused, currentTime, buffered, volume, poster, preload, error, seeking\n// seekable, ended, playbackRate, defaultPlaybackRate, played, networkState\n// readyState, videoWidth, videoHeight\n[\n/**\n * Get the value of `paused` from the media element. `paused` indicates whether the media element\n * is currently paused or not.\n *\n * @method Html5#paused\n * @return {boolean}\n *         The value of `paused` from the media element.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-paused}\n */\n'paused',\n/**\n * Get the value of `currentTime` from the media element. `currentTime` indicates\n * the current second that the media is at in playback.\n *\n * @method Html5#currentTime\n * @return {number}\n *         The value of `currentTime` from the media element.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-currenttime}\n */\n'currentTime',\n/**\n * Get the value of `buffered` from the media element. `buffered` is a `TimeRange`\n * object that represents the parts of the media that are already downloaded and\n * available for playback.\n *\n * @method Html5#buffered\n * @return {TimeRange}\n *         The value of `buffered` from the media element.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-buffered}\n */\n'buffered',\n/**\n * Get the value of `volume` from the media element. `volume` indicates\n * the current playback volume of audio for a media. `volume` will be a value from 0\n * (silent) to 1 (loudest and default).\n *\n * @method Html5#volume\n * @return {number}\n *         The value of `volume` from the media element. Value will be between 0-1.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-a-volume}\n */\n'volume',\n/**\n * Get the value of `poster` from the media element. `poster` indicates\n * that the url of an image file that can/will be shown when no media data is available.\n *\n * @method Html5#poster\n * @return {string}\n *         The value of `poster` from the media element. Value will be a url to an\n *         image.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-video-poster}\n */\n'poster',\n/**\n * Get the value of `preload` from the media element. `preload` indicates\n * what should download before the media is interacted with. It can have the following\n * values:\n * - none: nothing should be downloaded\n * - metadata: poster and the first few frames of the media may be downloaded to get\n *   media dimensions and other metadata\n * - auto: allow the media and metadata for the media to be downloaded before\n *    interaction\n *\n * @method Html5#preload\n * @return {string}\n *         The value of `preload` from the media element. Will be 'none', 'metadata',\n *         or 'auto'.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-preload}\n */\n'preload',\n/**\n * Get the value of the `error` from the media element. `error` indicates any\n * MediaError that may have occured during playback. If error returns null there is no\n * current error.\n *\n * @method Html5#error\n * @return {MediaError|null}\n *         The value of `error` from the media element. Will be `MediaError` if there\n *         is a current error and null otherwise.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-error}\n */\n'error',\n/**\n * Get the value of `seeking` from the media element. `seeking` indicates whether the\n * media is currently seeking to a new position or not.\n *\n * @method Html5#seeking\n * @return {boolean}\n *         - The value of `seeking` from the media element.\n *         - True indicates that the media is currently seeking to a new position.\n *         - Flase indicates that the media is not seeking to a new position at this time.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-seeking}\n */\n'seeking',\n/**\n * Get the value of `seekable` from the media element. `seekable` returns a\n * `TimeRange` object indicating ranges of time that can currently be `seeked` to.\n *\n * @method Html5#seekable\n * @return {TimeRange}\n *         The value of `seekable` from the media element. A `TimeRange` object\n *         indicating the current ranges of time that can be seeked to.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-seekable}\n */\n'seekable',\n/**\n * Get the value of `ended` from the media element. `ended` indicates whether\n * the media has reached the end or not.\n *\n * @method Html5#ended\n * @return {boolean}\n *         - The value of `ended` from the media element.\n *         - True indicates that the media has ended.\n *         - False indicates that the media has not ended.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-ended}\n */\n'ended',\n/**\n * Get the value of `playbackRate` from the media element. `playbackRate` indicates\n * the rate at which the media is currently playing back. Examples:\n *   - if playbackRate is set to 2, media will play twice as fast.\n *   - if playbackRate is set to 0.5, media will play half as fast.\n *\n * @method Html5#playbackRate\n * @return {number}\n *         The value of `playbackRate` from the media element. A number indicating\n *         the current playback speed of the media, where 1 is normal speed.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-playbackrate}\n */\n'playbackRate',\n/**\n * Get the value of `played` from the media element. `played` returns a `TimeRange`\n * object representing points in the media timeline that have been played.\n *\n * @method Html5#played\n * @return {TimeRange}\n *         The value of `played` from the media element. A `TimeRange` object indicating\n *         the ranges of time that have been played.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-played}\n */\n'played',\n/**\n * Get the value of `networkState` from the media element. `networkState` indicates\n * the current network state. It returns an enumeration from the following list:\n * - 0: NETWORK_EMPTY\n * - 1: NEWORK_IDLE\n * - 2: NETWORK_LOADING\n * - 3: NETWORK_NO_SOURCE\n *\n * @method Html5#networkState\n * @return {number}\n *         The value of `networkState` from the media element. This will be a number\n *         from the list in the description.\n *\n * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-networkstate}\n */\n'networkState',\n/**\n * Get the value of `readyState` from the media element. `readyState` indicates\n * the current state of the media element. It returns an enumeration from the\n * following list:\n * - 0: HAVE_NOTHING\n * - 1: HAVE_METADATA\n * - 2: HAVE_CURRENT_DATA\n * - 3: HAVE_FUTURE_DATA\n * - 4: HAVE_ENOUGH_DATA\n *\n * @method Html5#readyState\n * @return {number}\n *         The value of `readyState` from the media element. This will be a number\n *         from the list in the description.\n *\n * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#ready-states}\n */\n'readyState',\n/**\n * Get the value of `videoWidth` from the video element. `videoWidth` indicates\n * the current width of the video in css pixels.\n *\n * @method Html5#videoWidth\n * @return {number}\n *         The value of `videoWidth` from the video element. This will be a number\n *         in css pixels.\n *\n * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-video-videowidth}\n */\n'videoWidth',\n/**\n * Get the value of `videoHeight` from the video element. `videoHeigth` indicates\n * the current height of the video in css pixels.\n *\n * @method Html5#videoHeight\n * @return {number}\n *         The value of `videoHeight` from the video element. This will be a number\n *         in css pixels.\n *\n * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-video-videowidth}\n */\n'videoHeight'].forEach(function (prop) {\n  Html5.prototype[prop] = function () {\n    return this.el_[prop];\n  };\n});\n\n// Wrap native properties with a setter in this format:\n// set + toTitleCase(name)\n// The list is as follows:\n// setVolume, setSrc, setPoster, setPreload, setPlaybackRate, setDefaultPlaybackRate\n[\n/**\n * Set the value of `volume` on the media element. `volume` indicates the current\n * audio level as a percentage in decimal form. This means that 1 is 100%, 0.5 is 50%, and\n * so on.\n *\n * @method Html5#setVolume\n * @param {number} percentAsDecimal\n *        The volume percent as a decimal. Valid range is from 0-1.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-a-volume}\n */\n'volume',\n/**\n * Set the value of `src` on the media element. `src` indicates the current\n * {@link Tech~SourceObject} for the media.\n *\n * @method Html5#setSrc\n * @param {Tech~SourceObject} src\n *        The source object to set as the current source.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-src}\n */\n'src',\n/**\n * Set the value of `poster` on the media element. `poster` is the url to\n * an image file that can/will be shown when no media data is available.\n *\n * @method Html5#setPoster\n * @param {string} poster\n *        The url to an image that should be used as the `poster` for the media\n *        element.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-poster}\n */\n'poster',\n/**\n * Set the value of `preload` on the media element. `preload` indicates\n * what should download before the media is interacted with. It can have the following\n * values:\n * - none: nothing should be downloaded\n * - metadata: poster and the first few frames of the media may be downloaded to get\n *   media dimensions and other metadata\n * - auto: allow the media and metadata for the media to be downloaded before\n *    interaction\n *\n * @method Html5#setPreload\n * @param {string} preload\n *         The value of `preload` to set on the media element. Must be 'none', 'metadata',\n *         or 'auto'.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-preload}\n */\n'preload',\n/**\n * Set the value of `playbackRate` on the media element. `playbackRate` indicates\n * the rate at which the media should play back. Examples:\n *   - if playbackRate is set to 2, media will play twice as fast.\n *   - if playbackRate is set to 0.5, media will play half as fast.\n *\n * @method Html5#setPlaybackRate\n * @return {number}\n *         The value of `playbackRate` from the media element. A number indicating\n *         the current playback speed of the media, where 1 is normal speed.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-playbackrate}\n */\n'playbackRate'].forEach(function (prop) {\n  Html5.prototype['set' + (0, _toTitleCase2['default'])(prop)] = function (v) {\n    this.el_[prop] = v;\n  };\n});\n\n// wrap native functions with a function\n// The list is as follows:\n// pause, load play\n[\n/**\n * A wrapper around the media elements `pause` function. This will call the `HTML5`\n * media elements `pause` function.\n *\n * @method Html5#pause\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-pause}\n */\n'pause',\n/**\n * A wrapper around the media elements `load` function. This will call the `HTML5`s\n * media element `load` function.\n *\n * @method Html5#load\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-load}\n */\n'load'].forEach(function (prop) {\n  Html5.prototype[prop] = function () {\n    return this.el_[prop]();\n  };\n});\n_tech2['default'].withSourceHandlers(Html5);\n\n/**\n * Native source handler for Html5, simply passes the source to the media element.\n *\n * @proprety {Tech~SourceObject} source\n *        The source object\n *\n * @proprety {Html5} tech\n *        The instance of the HTML5 tech.\n */\nHtml5.nativeSourceHandler = {};\n\n/**\n * Check if the media element can play the given mime type.\n *\n * @param {string} type\n *        The mimetype to check\n *\n * @return {string}\n *         'probably', 'maybe', or '' (empty string)\n */\nHtml5.nativeSourceHandler.canPlayType = function (type) {\n  // IE9 on Windows 7 without MediaPlayer throws an error here\n  // https://github.com/videojs/video.js/issues/519\n  try {\n    return Html5.TEST_VID.canPlayType(type);\n  } catch (e) {\n    return '';\n  }\n};\n\n/**\n * Check if the media element can handle a source natively.\n *\n * @param {Tech~SourceObject} source\n *         The source object\n *\n * @param {Object} [options]\n *         Options to be passed to the tech.\n *\n * @return {string}\n *         'probably', 'maybe', or '' (empty string).\n */\nHtml5.nativeSourceHandler.canHandleSource = function (source, options) {\n  // If a type was provided we should rely on that\n  if (source.type) {\n    return Html5.nativeSourceHandler.canPlayType(source.type);\n\n    // If no type, fall back to checking 'video/[EXTENSION]'\n  } else if (source.src) {\n    var ext = Url.getFileExtension(source.src);\n    return Html5.nativeSourceHandler.canPlayType('video/' + ext);\n  }\n  return '';\n};\n\n/**\n * Pass the source to the native media element.\n *\n * @param {Tech~SourceObject} source\n *        The source object\n *\n * @param {Html5} tech\n *        The instance of the Html5 tech\n *\n * @param {Object} [options]\n *        The options to pass to the source\n */\nHtml5.nativeSourceHandler.handleSource = function (source, tech, options) {\n  tech.setSrc(source.src);\n};\n\n/**\n * A noop for the native dispose function, as cleanup is not needed.\n */\nHtml5.nativeSourceHandler.dispose = function () {};\n\n// Register the native source handler\nHtml5.registerSourceHandler(Html5.nativeSourceHandler);\n_component2['default'].registerComponent('Html5', Html5);\n_tech2['default'].registerTech('Html5', Html5);\nexports['default'] = Html5;","map":{"version":3,"names":["exports","__esModule","_templateObject","_taggedTemplateLiteralLoose","_tech","require","_tech2","_interopRequireDefault","_component","_component2","_dom","Dom","_interopRequireWildcard","_url","Url","_fn","Fn","_log","_log2","_tsml","_tsml2","_browser","browser","_document","_document2","_window","_window2","_obj","_mergeOptions","_mergeOptions2","_toTitleCase","_toTitleCase2","obj","newObj","key","Object","prototype","hasOwnProperty","call","strings","raw","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","Html5","_Tech","options","ready","_this","source","crossoriginTracks","el_","currentSrc","src","tag","initNetworkState_","setSource","handleLateInit_","hasChildNodes","nodes","childNodes","nodesLength","length","removeNodes","node","nodeName","toLowerCase","featuresNativeTextTracks","push","remoteTextTrackEls","addTrackElement_","remoteTextTracks","addTrack_","track","hasAttribute","isCrossOrigin","i","removeChild","trackTypes","forEach","type","elTracks","el","techTracks","capitalType","addEventListener","e","trigger","target","currentTarget","srcElement","addTrack","removeTrack","removeOldTracks_","on","warn","handleTextTrackChange_","bind","handleTextTrackChange","handleTextTrackAdd_","handleTextTrackAdd","handleTextTrackRemove_","handleTextTrackRemove","proxyNativeTextTracks_","restoreMetadataTracksInIOSNativePlayer_","TOUCH_ENABLED","IS_IPHONE","IS_NATIVE_ANDROID","nativeControlsForTouch","setControls","proxyWebkitFullscreen_","triggerReady","dispose","_this2","tl","removeEventListener","off","disposeMediaElement","textTracks","metadataTracksPreFullscreenState","takeMetadataTrackSnapshot","kind","storedMode","mode","restoreTrackMode","storedTrack","createEl","options_","playerElIngest","movingMediaElementInDOM","clone","cloneNode","parentNode","insertBefore","createElement","tagAttributes","getElAttributes","attributes","controls","setElAttributes","assign","id","techId","playerId","preload","setAttribute","settingsAttrs","attr","removeAttribute","networkState","readyState","loadstartFired","setLoadstartFired","triggerLoadstart","eventsToTrigger","tt","removeOldTextTracks_","removeTrack_","removeTracks","techTrack","found","j","_i","play","playPromise","undefined","then","setCurrentTime","seconds","currentTime","duration","_this3","Infinity","IS_ANDROID","IS_CHROME","checkProgress","NaN","width","offsetWidth","height","offsetHeight","_this4","endFn","isFullscreen","beginFn","webkitPresentationMode","one","supportsFullScreen","webkitEnterFullScreen","userAgent","navigator","test","enterFullScreen","video","paused","HAVE_METADATA","setTimeout","pause","exitFullScreen","webkitExitFullScreen","_src","setSrc","reset","resetMediaElement","currentSource_","val","addTextTrack","label","language","createRemoteTextTrack","htmlTrackElement","srclang","addRemoteTextTrack","manualCleanup","appendChild","removeRemoteTextTrack","tracks","$$","getVideoPlaybackQuality","videoPlaybackQuality","webkitDroppedFrameCount","webkitDecodedFrameCount","droppedVideoFrames","totalVideoFrames","performance","now","creationTime","timing","navigationStart","Date","isReal","TEST_VID","isSupported","volume","canPlayType","canControlVolume","canControlPlaybackRate","CHROME_VERSION","playbackRate","supportsNativeTextTracks","IS_ANY_SAFARI","supportsNativeVideoTracks","videoTracks","supportsNativeAudioTracks","audioTracks","Events","featuresVolumeControl","featuresPlaybackRate","IS_IOS","featuresFullscreenResize","featuresProgressEvents","featuresTimeupdateEvents","featuresNativeVideoTracks","featuresNativeAudioTracks","mpegurlRE","mp4RE","patchCanPlayType","ANDROID_VERSION","IS_FIREFOX","IS_OLD_ANDROID","unpatchCanPlayType","r","firstChild","load","sources","querySelectorAll","prop","v","withSourceHandlers","nativeSourceHandler","canHandleSource","ext","getFileExtension","handleSource","tech","registerSourceHandler","registerComponent","registerTech"],"sources":["C:/Users/babu7/OneDrive/Desktop/djangoyoutube2/reelyoutube/frontend/node_modules/videojs-react/node_modules/video.js/es5/tech/html5.js"],"sourcesContent":["'use strict';\n\nexports.__esModule = true;\n\nvar _templateObject = _taggedTemplateLiteralLoose(['Text Tracks are being loaded from another origin but the crossorigin attribute isn\\'t used.\\n            This may prevent text tracks from loading.'], ['Text Tracks are being loaded from another origin but the crossorigin attribute isn\\'t used.\\n            This may prevent text tracks from loading.']);\n\nvar _tech = require('./tech.js');\n\nvar _tech2 = _interopRequireDefault(_tech);\n\nvar _component = require('../component');\n\nvar _component2 = _interopRequireDefault(_component);\n\nvar _dom = require('../utils/dom.js');\n\nvar Dom = _interopRequireWildcard(_dom);\n\nvar _url = require('../utils/url.js');\n\nvar Url = _interopRequireWildcard(_url);\n\nvar _fn = require('../utils/fn.js');\n\nvar Fn = _interopRequireWildcard(_fn);\n\nvar _log = require('../utils/log.js');\n\nvar _log2 = _interopRequireDefault(_log);\n\nvar _tsml = require('tsml');\n\nvar _tsml2 = _interopRequireDefault(_tsml);\n\nvar _browser = require('../utils/browser.js');\n\nvar browser = _interopRequireWildcard(_browser);\n\nvar _document = require('global/document');\n\nvar _document2 = _interopRequireDefault(_document);\n\nvar _window = require('global/window');\n\nvar _window2 = _interopRequireDefault(_window);\n\nvar _obj = require('../utils/obj');\n\nvar _mergeOptions = require('../utils/merge-options.js');\n\nvar _mergeOptions2 = _interopRequireDefault(_mergeOptions);\n\nvar _toTitleCase = require('../utils/to-title-case.js');\n\nvar _toTitleCase2 = _interopRequireDefault(_toTitleCase);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _taggedTemplateLiteralLoose(strings, raw) { strings.raw = raw; return strings; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file html5.js\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n\n/**\n * HTML5 Media Controller - Wrapper for HTML5 Media API\n *\n * @mixes Tech~SouceHandlerAdditions\n * @extends Tech\n */\nvar Html5 = function (_Tech) {\n  _inherits(Html5, _Tech);\n\n  /**\n   * Create an instance of this Tech.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @param {Component~ReadyCallback} ready\n   *        Callback function to call when the `HTML5` Tech is ready.\n   */\n  function Html5(options, ready) {\n    _classCallCheck(this, Html5);\n\n    var _this = _possibleConstructorReturn(this, _Tech.call(this, options, ready));\n\n    var source = options.source;\n    var crossoriginTracks = false;\n\n    // Set the source if one is provided\n    // 1) Check if the source is new (if not, we want to keep the original so playback isn't interrupted)\n    // 2) Check to see if the network state of the tag was failed at init, and if so, reset the source\n    // anyway so the error gets fired.\n    if (source && (_this.el_.currentSrc !== source.src || options.tag && options.tag.initNetworkState_ === 3)) {\n      _this.setSource(source);\n    } else {\n      _this.handleLateInit_(_this.el_);\n    }\n\n    if (_this.el_.hasChildNodes()) {\n\n      var nodes = _this.el_.childNodes;\n      var nodesLength = nodes.length;\n      var removeNodes = [];\n\n      while (nodesLength--) {\n        var node = nodes[nodesLength];\n        var nodeName = node.nodeName.toLowerCase();\n\n        if (nodeName === 'track') {\n          if (!_this.featuresNativeTextTracks) {\n            // Empty video tag tracks so the built-in player doesn't use them also.\n            // This may not be fast enough to stop HTML5 browsers from reading the tags\n            // so we'll need to turn off any default tracks if we're manually doing\n            // captions and subtitles. videoElement.textTracks\n            removeNodes.push(node);\n          } else {\n            // store HTMLTrackElement and TextTrack to remote list\n            _this.remoteTextTrackEls().addTrackElement_(node);\n            _this.remoteTextTracks().addTrack_(node.track);\n            if (!crossoriginTracks && !_this.el_.hasAttribute('crossorigin') && Url.isCrossOrigin(node.src)) {\n              crossoriginTracks = true;\n            }\n          }\n        }\n      }\n\n      for (var i = 0; i < removeNodes.length; i++) {\n        _this.el_.removeChild(removeNodes[i]);\n      }\n    }\n\n    // TODO: add text tracks into this list\n    var trackTypes = ['audio', 'video'];\n\n    // ProxyNative Video/Audio Track\n    trackTypes.forEach(function (type) {\n      var elTracks = _this.el()[type + 'Tracks'];\n      var techTracks = _this[type + 'Tracks']();\n      var capitalType = (0, _toTitleCase2['default'])(type);\n\n      if (!_this['featuresNative' + capitalType + 'Tracks'] || !elTracks || !elTracks.addEventListener) {\n        return;\n      }\n\n      _this['handle' + capitalType + 'TrackChange_'] = function (e) {\n        techTracks.trigger({\n          type: 'change',\n          target: techTracks,\n          currentTarget: techTracks,\n          srcElement: techTracks\n        });\n      };\n\n      _this['handle' + capitalType + 'TrackAdd_'] = function (e) {\n        return techTracks.addTrack(e.track);\n      };\n      _this['handle' + capitalType + 'TrackRemove_'] = function (e) {\n        return techTracks.removeTrack(e.track);\n      };\n\n      elTracks.addEventListener('change', _this['handle' + capitalType + 'TrackChange_']);\n      elTracks.addEventListener('addtrack', _this['handle' + capitalType + 'TrackAdd_']);\n      elTracks.addEventListener('removetrack', _this['handle' + capitalType + 'TrackRemove_']);\n      _this['removeOld' + capitalType + 'Tracks_'] = function (e) {\n        return _this.removeOldTracks_(techTracks, elTracks);\n      };\n\n      // Remove (native) tracks that are not used anymore\n      _this.on('loadstart', _this['removeOld' + capitalType + 'Tracks_']);\n    });\n\n    if (_this.featuresNativeTextTracks) {\n      if (crossoriginTracks) {\n        _log2['default'].warn((0, _tsml2['default'])(_templateObject));\n      }\n\n      _this.handleTextTrackChange_ = Fn.bind(_this, _this.handleTextTrackChange);\n      _this.handleTextTrackAdd_ = Fn.bind(_this, _this.handleTextTrackAdd);\n      _this.handleTextTrackRemove_ = Fn.bind(_this, _this.handleTextTrackRemove);\n      _this.proxyNativeTextTracks_();\n    }\n\n    // prevent iOS Safari from disabling metadata text tracks during native playback\n    _this.restoreMetadataTracksInIOSNativePlayer_();\n\n    // Determine if native controls should be used\n    // Our goal should be to get the custom controls on mobile solid everywhere\n    // so we can remove this all together. Right now this will block custom\n    // controls on touch enabled laptops like the Chrome Pixel\n    if ((browser.TOUCH_ENABLED || browser.IS_IPHONE || browser.IS_NATIVE_ANDROID) && options.nativeControlsForTouch === true) {\n      _this.setControls(true);\n    }\n\n    // on iOS, we want to proxy `webkitbeginfullscreen` and `webkitendfullscreen`\n    // into a `fullscreenchange` event\n    _this.proxyWebkitFullscreen_();\n\n    _this.triggerReady();\n    return _this;\n  }\n\n  /**\n   * Dispose of `HTML5` media element and remove all tracks.\n   */\n\n\n  Html5.prototype.dispose = function dispose() {\n    var _this2 = this;\n\n    // Un-ProxyNativeTracks\n    ['audio', 'video', 'text'].forEach(function (type) {\n      var capitalType = (0, _toTitleCase2['default'])(type);\n      var tl = _this2.el_[type + 'Tracks'];\n\n      if (tl && tl.removeEventListener) {\n        tl.removeEventListener('change', _this2['handle' + capitalType + 'TrackChange_']);\n        tl.removeEventListener('addtrack', _this2['handle' + capitalType + 'TrackAdd_']);\n        tl.removeEventListener('removetrack', _this2['handle' + capitalType + 'TrackRemove_']);\n      }\n\n      // Stop removing old text tracks\n      if (tl) {\n        _this2.off('loadstart', _this2['removeOld' + capitalType + 'Tracks_']);\n      }\n    });\n\n    Html5.disposeMediaElement(this.el_);\n    // tech will handle clearing of the emulated track list\n    _Tech.prototype.dispose.call(this);\n  };\n\n  /**\n   * When a captions track is enabled in the iOS Safari native player, all other\n   * tracks are disabled (including metadata tracks), which nulls all of their\n   * associated cue points. This will restore metadata tracks to their pre-fullscreen\n   * state in those cases so that cue points are not needlessly lost.\n   *\n   * @private\n   */\n\n\n  Html5.prototype.restoreMetadataTracksInIOSNativePlayer_ = function restoreMetadataTracksInIOSNativePlayer_() {\n    var textTracks = this.textTracks();\n    var metadataTracksPreFullscreenState = void 0;\n\n    // captures a snapshot of every metadata track's current state\n    var takeMetadataTrackSnapshot = function takeMetadataTrackSnapshot() {\n      metadataTracksPreFullscreenState = [];\n\n      for (var i = 0; i < textTracks.length; i++) {\n        var track = textTracks[i];\n\n        if (track.kind === 'metadata') {\n          metadataTracksPreFullscreenState.push({\n            track: track,\n            storedMode: track.mode\n          });\n        }\n      }\n    };\n\n    // snapshot each metadata track's initial state, and update the snapshot\n    // each time there is a track 'change' event\n    takeMetadataTrackSnapshot();\n    textTracks.addEventListener('change', takeMetadataTrackSnapshot);\n\n    var restoreTrackMode = function restoreTrackMode() {\n      for (var i = 0; i < metadataTracksPreFullscreenState.length; i++) {\n        var storedTrack = metadataTracksPreFullscreenState[i];\n\n        if (storedTrack.track.mode === 'disabled' && storedTrack.track.mode !== storedTrack.storedMode) {\n          storedTrack.track.mode = storedTrack.storedMode;\n        }\n      }\n      // we only want this handler to be executed on the first 'change' event\n      textTracks.removeEventListener('change', restoreTrackMode);\n    };\n\n    // when we enter fullscreen playback, stop updating the snapshot and\n    // restore all track modes to their pre-fullscreen state\n    this.on('webkitbeginfullscreen', function () {\n      textTracks.removeEventListener('change', takeMetadataTrackSnapshot);\n\n      // remove the listener before adding it just in case it wasn't previously removed\n      textTracks.removeEventListener('change', restoreTrackMode);\n      textTracks.addEventListener('change', restoreTrackMode);\n    });\n\n    // start updating the snapshot again after leaving fullscreen\n    this.on('webkitendfullscreen', function () {\n      // remove the listener before adding it just in case it wasn't previously removed\n      textTracks.removeEventListener('change', takeMetadataTrackSnapshot);\n      textTracks.addEventListener('change', takeMetadataTrackSnapshot);\n\n      // remove the restoreTrackMode handler in case it wasn't triggered during fullscreen playback\n      textTracks.removeEventListener('change', restoreTrackMode);\n    });\n  };\n\n  /**\n   * Create the `Html5` Tech's DOM element.\n   *\n   * @return {Element}\n   *         The element that gets created.\n   */\n\n\n  Html5.prototype.createEl = function createEl() {\n    var el = this.options_.tag;\n\n    // Check if this browser supports moving the element into the box.\n    // On the iPhone video will break if you move the element,\n    // So we have to create a brand new element.\n    // If we ingested the player div, we do not need to move the media element.\n    if (!el || !(this.options_.playerElIngest || this.movingMediaElementInDOM)) {\n\n      // If the original tag is still there, clone and remove it.\n      if (el) {\n        var clone = el.cloneNode(true);\n\n        if (el.parentNode) {\n          el.parentNode.insertBefore(clone, el);\n        }\n        Html5.disposeMediaElement(el);\n        el = clone;\n      } else {\n        el = _document2['default'].createElement('video');\n\n        // determine if native controls should be used\n        var tagAttributes = this.options_.tag && Dom.getElAttributes(this.options_.tag);\n        var attributes = (0, _mergeOptions2['default'])({}, tagAttributes);\n\n        if (!browser.TOUCH_ENABLED || this.options_.nativeControlsForTouch !== true) {\n          delete attributes.controls;\n        }\n\n        Dom.setElAttributes(el, (0, _obj.assign)(attributes, {\n          id: this.options_.techId,\n          'class': 'vjs-tech'\n        }));\n      }\n\n      el.playerId = this.options_.playerId;\n    }\n\n    if (typeof this.options_.preload !== 'undefined') {\n      Dom.setAttribute(el, 'preload', this.options_.preload);\n    }\n\n    // Update specific tag settings, in case they were overridden\n    // `autoplay` has to be *last* so that `muted` and `playsinline` are present\n    // when iOS/Safari or other browsers attempt to autoplay.\n    var settingsAttrs = ['loop', 'muted', 'playsinline', 'autoplay'];\n\n    for (var i = settingsAttrs.length - 1; i >= 0; i--) {\n      var attr = settingsAttrs[i];\n      var value = this.options_[attr];\n\n      if (typeof value !== 'undefined') {\n        if (value) {\n          Dom.setAttribute(el, attr, attr);\n        } else {\n          Dom.removeAttribute(el, attr);\n        }\n        el[attr] = value;\n      }\n    }\n\n    return el;\n  };\n\n  /**\n   * This will be triggered if the loadstart event has already fired, before videojs was\n   * ready. Two known examples of when this can happen are:\n   * 1. If we're loading the playback object after it has started loading\n   * 2. The media is already playing the (often with autoplay on) then\n   *\n   * This function will fire another loadstart so that videojs can catchup.\n   *\n   * @fires Tech#loadstart\n   *\n   * @return {undefined}\n   *         returns nothing.\n   */\n\n\n  Html5.prototype.handleLateInit_ = function handleLateInit_(el) {\n    if (el.networkState === 0 || el.networkState === 3) {\n      // The video element hasn't started loading the source yet\n      // or didn't find a source\n      return;\n    }\n\n    if (el.readyState === 0) {\n      // NetworkState is set synchronously BUT loadstart is fired at the\n      // end of the current stack, usually before setInterval(fn, 0).\n      // So at this point we know loadstart may have already fired or is\n      // about to fire, and either way the player hasn't seen it yet.\n      // We don't want to fire loadstart prematurely here and cause a\n      // double loadstart so we'll wait and see if it happens between now\n      // and the next loop, and fire it if not.\n      // HOWEVER, we also want to make sure it fires before loadedmetadata\n      // which could also happen between now and the next loop, so we'll\n      // watch for that also.\n      var loadstartFired = false;\n      var setLoadstartFired = function setLoadstartFired() {\n        loadstartFired = true;\n      };\n\n      this.on('loadstart', setLoadstartFired);\n\n      var triggerLoadstart = function triggerLoadstart() {\n        // We did miss the original loadstart. Make sure the player\n        // sees loadstart before loadedmetadata\n        if (!loadstartFired) {\n          this.trigger('loadstart');\n        }\n      };\n\n      this.on('loadedmetadata', triggerLoadstart);\n\n      this.ready(function () {\n        this.off('loadstart', setLoadstartFired);\n        this.off('loadedmetadata', triggerLoadstart);\n\n        if (!loadstartFired) {\n          // We did miss the original native loadstart. Fire it now.\n          this.trigger('loadstart');\n        }\n      });\n\n      return;\n    }\n\n    // From here on we know that loadstart already fired and we missed it.\n    // The other readyState events aren't as much of a problem if we double\n    // them, so not going to go to as much trouble as loadstart to prevent\n    // that unless we find reason to.\n    var eventsToTrigger = ['loadstart'];\n\n    // loadedmetadata: newly equal to HAVE_METADATA (1) or greater\n    eventsToTrigger.push('loadedmetadata');\n\n    // loadeddata: newly increased to HAVE_CURRENT_DATA (2) or greater\n    if (el.readyState >= 2) {\n      eventsToTrigger.push('loadeddata');\n    }\n\n    // canplay: newly increased to HAVE_FUTURE_DATA (3) or greater\n    if (el.readyState >= 3) {\n      eventsToTrigger.push('canplay');\n    }\n\n    // canplaythrough: newly equal to HAVE_ENOUGH_DATA (4)\n    if (el.readyState >= 4) {\n      eventsToTrigger.push('canplaythrough');\n    }\n\n    // We still need to give the player time to add event listeners\n    this.ready(function () {\n      eventsToTrigger.forEach(function (type) {\n        this.trigger(type);\n      }, this);\n    });\n  };\n\n  /**\n   * Add event listeners to native text track events. This adds the native text tracks\n   * to our emulated {@link TextTrackList}.\n   */\n\n\n  Html5.prototype.proxyNativeTextTracks_ = function proxyNativeTextTracks_() {\n    var tt = this.el().textTracks;\n\n    if (tt) {\n      // Add tracks - if player is initialised after DOM loaded, textTracks\n      // will not trigger addtrack\n      for (var i = 0; i < tt.length; i++) {\n        this.textTracks().addTrack_(tt[i]);\n      }\n\n      if (tt.addEventListener) {\n        tt.addEventListener('change', this.handleTextTrackChange_);\n        tt.addEventListener('addtrack', this.handleTextTrackAdd_);\n        tt.addEventListener('removetrack', this.handleTextTrackRemove_);\n      }\n\n      // Remove (native) texttracks that are not used anymore\n      this.on('loadstart', this.removeOldTextTracks_);\n    }\n  };\n\n  /**\n   * Handle any {@link TextTrackList} `change` event.\n   *\n   * @param {EventTarget~Event} e\n   *        The `change` event that caused this to run.\n   *\n   * @listens TextTrackList#change\n   */\n\n\n  Html5.prototype.handleTextTrackChange = function handleTextTrackChange(e) {\n    var tt = this.textTracks();\n\n    this.textTracks().trigger({\n      type: 'change',\n      target: tt,\n      currentTarget: tt,\n      srcElement: tt\n    });\n  };\n\n  /**\n   * Handle any {@link TextTrackList} `addtrack` event.\n   *\n   * @param {EventTarget~Event} e\n   *        The `addtrack` event that caused this to run.\n   *\n   * @listens TextTrackList#addtrack\n   */\n\n\n  Html5.prototype.handleTextTrackAdd = function handleTextTrackAdd(e) {\n    this.textTracks().addTrack_(e.track);\n  };\n\n  /**\n   * Handle any {@link TextTrackList} `removetrack` event.\n   *\n   * @param {EventTarget~Event} e\n   *        The `removetrack` event that caused this to run.\n   *\n   * @listens TextTrackList#removetrack\n   */\n\n\n  Html5.prototype.handleTextTrackRemove = function handleTextTrackRemove(e) {\n    this.textTracks().removeTrack_(e.track);\n  };\n\n  /**\n   * This function removes any {@link AudioTrack}s, {@link VideoTrack}s, or\n   * {@link TextTrack}s that are not in the media elements TrackList.\n   *\n   * @param {TrackList} techTracks\n   *        HTML5 Tech's TrackList to search through\n   *\n   * @param {TrackList} elTracks\n   *        HTML5 media elements TrackList to search trough.\n   *\n   * @private\n   */\n\n\n  Html5.prototype.removeOldTracks_ = function removeOldTracks_(techTracks, elTracks) {\n    // This will loop over the techTracks and check if they are still used by the HTML5 media element\n    // If not, they will be removed from the emulated list\n    var removeTracks = [];\n\n    if (!elTracks) {\n      return;\n    }\n\n    for (var i = 0; i < techTracks.length; i++) {\n      var techTrack = techTracks[i];\n      var found = false;\n\n      for (var j = 0; j < elTracks.length; j++) {\n        if (elTracks[j] === techTrack) {\n          found = true;\n          break;\n        }\n      }\n\n      if (!found) {\n        removeTracks.push(techTrack);\n      }\n    }\n\n    for (var _i = 0; _i < removeTracks.length; _i++) {\n      var track = removeTracks[_i];\n\n      techTracks.removeTrack_(track);\n    }\n  };\n\n  /**\n   * Remove {@link TextTrack}s that dont exist in the native track list from our\n   * emulated {@link TextTrackList}.\n   *\n   * @listens Tech#loadstart\n   */\n\n\n  Html5.prototype.removeOldTextTracks_ = function removeOldTextTracks_(e) {\n    var techTracks = this.textTracks();\n    var elTracks = this.el().textTracks;\n\n    this.removeOldTracks_(techTracks, elTracks);\n  };\n\n  /**\n   * Called by {@link Player#play} to play using the `Html5` `Tech`.\n   */\n\n\n  Html5.prototype.play = function play() {\n    var playPromise = this.el_.play();\n\n    // Catch/silence error when a pause interrupts a play request\n    // on browsers which return a promise\n    if (playPromise !== undefined && typeof playPromise.then === 'function') {\n      playPromise.then(null, function (e) {});\n    }\n  };\n\n  /**\n   * Set current time for the `HTML5` tech.\n   *\n   * @param {number} seconds\n   *        Set the current time of the media to this.\n   */\n\n\n  Html5.prototype.setCurrentTime = function setCurrentTime(seconds) {\n    try {\n      this.el_.currentTime = seconds;\n    } catch (e) {\n      (0, _log2['default'])(e, 'Video is not ready. (Video.js)');\n      // this.warning(VideoJS.warnings.videoNotReady);\n    }\n  };\n\n  /**\n   * Get the current duration of the HTML5 media element.\n   *\n   * @return {number}\n   *         The duration of the media or 0 if there is no duration.\n   */\n\n\n  Html5.prototype.duration = function duration() {\n    var _this3 = this;\n\n    // Android Chrome will report duration as Infinity for VOD HLS until after\n    // playback has started, which triggers the live display erroneously.\n    // Return NaN if playback has not started and trigger a durationupdate once\n    // the duration can be reliably known.\n    if (this.el_.duration === Infinity && browser.IS_ANDROID && browser.IS_CHROME) {\n      if (this.el_.currentTime === 0) {\n        // Wait for the first `timeupdate` with currentTime > 0 - there may be\n        // several with 0\n        var checkProgress = function checkProgress() {\n          if (_this3.el_.currentTime > 0) {\n            // Trigger durationchange for genuinely live video\n            if (_this3.el_.duration === Infinity) {\n              _this3.trigger('durationchange');\n            }\n            _this3.off('timeupdate', checkProgress);\n          }\n        };\n\n        this.on('timeupdate', checkProgress);\n        return NaN;\n      }\n    }\n    return this.el_.duration || NaN;\n  };\n\n  /**\n   * Get the current width of the HTML5 media element.\n   *\n   * @return {number}\n   *         The width of the HTML5 media element.\n   */\n\n\n  Html5.prototype.width = function width() {\n    return this.el_.offsetWidth;\n  };\n\n  /**\n   * Get the current height of the HTML5 media element.\n   *\n   * @return {number}\n   *         The heigth of the HTML5 media element.\n   */\n\n\n  Html5.prototype.height = function height() {\n    return this.el_.offsetHeight;\n  };\n\n  /**\n   * Proxy iOS `webkitbeginfullscreen` and `webkitendfullscreen` into\n   * `fullscreenchange` event.\n   *\n   * @private\n   * @fires fullscreenchange\n   * @listens webkitendfullscreen\n   * @listens webkitbeginfullscreen\n   * @listens webkitbeginfullscreen\n   */\n\n\n  Html5.prototype.proxyWebkitFullscreen_ = function proxyWebkitFullscreen_() {\n    var _this4 = this;\n\n    if (!('webkitDisplayingFullscreen' in this.el_)) {\n      return;\n    }\n\n    var endFn = function endFn() {\n      this.trigger('fullscreenchange', { isFullscreen: false });\n    };\n\n    var beginFn = function beginFn() {\n      if ('webkitPresentationMode' in this.el_ && this.el_.webkitPresentationMode !== 'picture-in-picture') {\n        this.one('webkitendfullscreen', endFn);\n\n        this.trigger('fullscreenchange', { isFullscreen: true });\n      }\n    };\n\n    this.on('webkitbeginfullscreen', beginFn);\n    this.on('dispose', function () {\n      _this4.off('webkitbeginfullscreen', beginFn);\n      _this4.off('webkitendfullscreen', endFn);\n    });\n  };\n\n  /**\n   * Check if fullscreen is supported on the current playback device.\n   *\n   * @return {boolean}\n   *         - True if fullscreen is supported.\n   *         - False if fullscreen is not supported.\n   */\n\n\n  Html5.prototype.supportsFullScreen = function supportsFullScreen() {\n    if (typeof this.el_.webkitEnterFullScreen === 'function') {\n      var userAgent = _window2['default'].navigator && _window2['default'].navigator.userAgent || '';\n\n      // Seems to be broken in Chromium/Chrome && Safari in Leopard\n      if (/Android/.test(userAgent) || !/Chrome|Mac OS X 10.5/.test(userAgent)) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  /**\n   * Request that the `HTML5` Tech enter fullscreen.\n   */\n\n\n  Html5.prototype.enterFullScreen = function enterFullScreen() {\n    var video = this.el_;\n\n    if (video.paused && video.networkState <= video.HAVE_METADATA) {\n      // attempt to prime the video element for programmatic access\n      // this isn't necessary on the desktop but shouldn't hurt\n      this.el_.play();\n\n      // playing and pausing synchronously during the transition to fullscreen\n      // can get iOS ~6.1 devices into a play/pause loop\n      this.setTimeout(function () {\n        video.pause();\n        video.webkitEnterFullScreen();\n      }, 0);\n    } else {\n      video.webkitEnterFullScreen();\n    }\n  };\n\n  /**\n   * Request that the `HTML5` Tech exit fullscreen.\n   */\n\n\n  Html5.prototype.exitFullScreen = function exitFullScreen() {\n    this.el_.webkitExitFullScreen();\n  };\n\n  /**\n   * A getter/setter for the `Html5` Tech's source object.\n   * > Note: Please use {@link Html5#setSource}\n   *\n   * @param {Tech~SourceObject} [src]\n   *        The source object you want to set on the `HTML5` techs element.\n   *\n   * @return {Tech~SourceObject|undefined}\n   *         - The current source object when a source is not passed in.\n   *         - undefined when setting\n   *\n   * @deprecated Since version 5.\n   */\n\n\n  Html5.prototype.src = function src(_src) {\n    if (_src === undefined) {\n      return this.el_.src;\n    }\n\n    // Setting src through `src` instead of `setSrc` will be deprecated\n    this.setSrc(_src);\n  };\n\n  /**\n   * Reset the tech by removing all sources and then calling\n   * {@link Html5.resetMediaElement}.\n   */\n\n\n  Html5.prototype.reset = function reset() {\n    Html5.resetMediaElement(this.el_);\n  };\n\n  /**\n   * Get the current source on the `HTML5` Tech. Falls back to returning the source from\n   * the HTML5 media element.\n   *\n   * @return {Tech~SourceObject}\n   *         The current source object from the HTML5 tech. With a fallback to the\n   *         elements source.\n   */\n\n\n  Html5.prototype.currentSrc = function currentSrc() {\n    if (this.currentSource_) {\n      return this.currentSource_.src;\n    }\n    return this.el_.currentSrc;\n  };\n\n  /**\n   * Set controls attribute for the HTML5 media Element.\n   *\n   * @param {string} val\n   *        Value to set the controls attribute to\n   */\n\n\n  Html5.prototype.setControls = function setControls(val) {\n    this.el_.controls = !!val;\n  };\n\n  /**\n   * Create and returns a remote {@link TextTrack} object.\n   *\n   * @param {string} kind\n   *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata)\n   *\n   * @param {string} [label]\n   *        Label to identify the text track\n   *\n   * @param {string} [language]\n   *        Two letter language abbreviation\n   *\n   * @return {TextTrack}\n   *         The TextTrack that gets created.\n   */\n\n\n  Html5.prototype.addTextTrack = function addTextTrack(kind, label, language) {\n    if (!this.featuresNativeTextTracks) {\n      return _Tech.prototype.addTextTrack.call(this, kind, label, language);\n    }\n\n    return this.el_.addTextTrack(kind, label, language);\n  };\n\n  /**\n   * Creates either native TextTrack or an emulated TextTrack depending\n   * on the value of `featuresNativeTextTracks`\n   *\n   * @param {Object} options\n   *        The object should contain the options to intialize the TextTrack with.\n   *\n   * @param {string} [options.kind]\n   *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata).\n   *\n   * @param {string} [options.label].\n   *        Label to identify the text track\n   *\n   * @param {string} [options.language]\n   *        Two letter language abbreviation.\n   *\n   * @param {boolean} [options.default]\n   *        Default this track to on.\n   *\n   * @param {string} [options.id]\n   *        The internal id to assign this track.\n   *\n   * @param {string} [options.src]\n   *        A source url for the track.\n   *\n   * @return {HTMLTrackElement}\n   *         The track element that gets created.\n   */\n\n\n  Html5.prototype.createRemoteTextTrack = function createRemoteTextTrack(options) {\n    if (!this.featuresNativeTextTracks) {\n      return _Tech.prototype.createRemoteTextTrack.call(this, options);\n    }\n    var htmlTrackElement = _document2['default'].createElement('track');\n\n    if (options.kind) {\n      htmlTrackElement.kind = options.kind;\n    }\n    if (options.label) {\n      htmlTrackElement.label = options.label;\n    }\n    if (options.language || options.srclang) {\n      htmlTrackElement.srclang = options.language || options.srclang;\n    }\n    if (options['default']) {\n      htmlTrackElement['default'] = options['default'];\n    }\n    if (options.id) {\n      htmlTrackElement.id = options.id;\n    }\n    if (options.src) {\n      htmlTrackElement.src = options.src;\n    }\n\n    return htmlTrackElement;\n  };\n\n  /**\n   * Creates a remote text track object and returns an html track element.\n   *\n   * @param {Object} options The object should contain values for\n   * kind, language, label, and src (location of the WebVTT file)\n   * @param {Boolean} [manualCleanup=true] if set to false, the TextTrack will be\n   * automatically removed from the video element whenever the source changes\n   * @return {HTMLTrackElement} An Html Track Element.\n   * This can be an emulated {@link HTMLTrackElement} or a native one.\n   * @deprecated The default value of the \"manualCleanup\" parameter will default\n   * to \"false\" in upcoming versions of Video.js\n   */\n\n\n  Html5.prototype.addRemoteTextTrack = function addRemoteTextTrack(options, manualCleanup) {\n    var htmlTrackElement = _Tech.prototype.addRemoteTextTrack.call(this, options, manualCleanup);\n\n    if (this.featuresNativeTextTracks) {\n      this.el().appendChild(htmlTrackElement);\n    }\n\n    return htmlTrackElement;\n  };\n\n  /**\n   * Remove remote `TextTrack` from `TextTrackList` object\n   *\n   * @param {TextTrack} track\n   *        `TextTrack` object to remove\n   */\n\n\n  Html5.prototype.removeRemoteTextTrack = function removeRemoteTextTrack(track) {\n    _Tech.prototype.removeRemoteTextTrack.call(this, track);\n\n    if (this.featuresNativeTextTracks) {\n      var tracks = this.$$('track');\n\n      var i = tracks.length;\n\n      while (i--) {\n        if (track === tracks[i] || track === tracks[i].track) {\n          this.el().removeChild(tracks[i]);\n        }\n      }\n    }\n  };\n\n  /**\n   * Gets available media playback quality metrics as specified by the W3C's Media\n   * Playback Quality API.\n   *\n   * @see [Spec]{@link https://wicg.github.io/media-playback-quality}\n   *\n   * @return {Object}\n   *         An object with supported media playback quality metrics\n   */\n\n\n  Html5.prototype.getVideoPlaybackQuality = function getVideoPlaybackQuality() {\n    if (typeof this.el().getVideoPlaybackQuality === 'function') {\n      return this.el().getVideoPlaybackQuality();\n    }\n\n    var videoPlaybackQuality = {};\n\n    if (typeof this.el().webkitDroppedFrameCount !== 'undefined' && typeof this.el().webkitDecodedFrameCount !== 'undefined') {\n      videoPlaybackQuality.droppedVideoFrames = this.el().webkitDroppedFrameCount;\n      videoPlaybackQuality.totalVideoFrames = this.el().webkitDecodedFrameCount;\n    }\n\n    if (_window2['default'].performance && typeof _window2['default'].performance.now === 'function') {\n      videoPlaybackQuality.creationTime = _window2['default'].performance.now();\n    } else if (_window2['default'].performance && _window2['default'].performance.timing && typeof _window2['default'].performance.timing.navigationStart === 'number') {\n      videoPlaybackQuality.creationTime = _window2['default'].Date.now() - _window2['default'].performance.timing.navigationStart;\n    }\n\n    return videoPlaybackQuality;\n  };\n\n  return Html5;\n}(_tech2['default']);\n\n/* HTML5 Support Testing ---------------------------------------------------- */\n\nif (Dom.isReal()) {\n\n  /**\n   * Element for testing browser HTML5 media capabilities\n   *\n   * @type {Element}\n   * @constant\n   * @private\n   */\n  Html5.TEST_VID = _document2['default'].createElement('video');\n  var track = _document2['default'].createElement('track');\n\n  track.kind = 'captions';\n  track.srclang = 'en';\n  track.label = 'English';\n  Html5.TEST_VID.appendChild(track);\n}\n\n/**\n * Check if HTML5 media is supported by this browser/device.\n *\n * @return {boolean}\n *         - True if HTML5 media is supported.\n *         - False if HTML5 media is not supported.\n */\nHtml5.isSupported = function () {\n  // IE9 with no Media Player is a LIAR! (#984)\n  try {\n    Html5.TEST_VID.volume = 0.5;\n  } catch (e) {\n    return false;\n  }\n\n  return !!(Html5.TEST_VID && Html5.TEST_VID.canPlayType);\n};\n\n/**\n * Check if the volume can be changed in this browser/device.\n * Volume cannot be changed in a lot of mobile devices.\n * Specifically, it can't be changed from 1 on iOS.\n *\n * @return {boolean}\n *         - True if volume can be controlled\n *         - False otherwise\n */\nHtml5.canControlVolume = function () {\n  // IE will error if Windows Media Player not installed #3315\n  try {\n    var volume = Html5.TEST_VID.volume;\n\n    Html5.TEST_VID.volume = volume / 2 + 0.1;\n    return volume !== Html5.TEST_VID.volume;\n  } catch (e) {\n    return false;\n  }\n};\n\n/**\n * Check if the playback rate can be changed in this browser/device.\n *\n * @return {boolean}\n *         - True if playback rate can be controlled\n *         - False otherwise\n */\nHtml5.canControlPlaybackRate = function () {\n  // Playback rate API is implemented in Android Chrome, but doesn't do anything\n  // https://github.com/videojs/video.js/issues/3180\n  if (browser.IS_ANDROID && browser.IS_CHROME && browser.CHROME_VERSION < 58) {\n    return false;\n  }\n  // IE will error if Windows Media Player not installed #3315\n  try {\n    var playbackRate = Html5.TEST_VID.playbackRate;\n\n    Html5.TEST_VID.playbackRate = playbackRate / 2 + 0.1;\n    return playbackRate !== Html5.TEST_VID.playbackRate;\n  } catch (e) {\n    return false;\n  }\n};\n\n/**\n * Check to see if native `TextTrack`s are supported by this browser/device.\n *\n * @return {boolean}\n *         - True if native `TextTrack`s are supported.\n *         - False otherwise\n */\nHtml5.supportsNativeTextTracks = function () {\n  return browser.IS_ANY_SAFARI;\n};\n\n/**\n * Check to see if native `VideoTrack`s are supported by this browser/device\n *\n * @return {boolean}\n *        - True if native `VideoTrack`s are supported.\n *        - False otherwise\n */\nHtml5.supportsNativeVideoTracks = function () {\n  return !!(Html5.TEST_VID && Html5.TEST_VID.videoTracks);\n};\n\n/**\n * Check to see if native `AudioTrack`s are supported by this browser/device\n *\n * @return {boolean}\n *        - True if native `AudioTrack`s are supported.\n *        - False otherwise\n */\nHtml5.supportsNativeAudioTracks = function () {\n  return !!(Html5.TEST_VID && Html5.TEST_VID.audioTracks);\n};\n\n/**\n * An array of events available on the Html5 tech.\n *\n * @private\n * @type {Array}\n */\nHtml5.Events = ['loadstart', 'suspend', 'abort', 'error', 'emptied', 'stalled', 'loadedmetadata', 'loadeddata', 'canplay', 'canplaythrough', 'playing', 'waiting', 'seeking', 'seeked', 'ended', 'durationchange', 'timeupdate', 'progress', 'play', 'pause', 'ratechange', 'volumechange'];\n\n/**\n * Boolean indicating whether the `Tech` supports volume control.\n *\n * @type {boolean}\n * @default {@link Html5.canControlVolume}\n */\nHtml5.prototype.featuresVolumeControl = Html5.canControlVolume();\n\n/**\n * Boolean indicating whether the `Tech` supports changing the speed at which the media\n * plays. Examples:\n *   - Set player to play 2x (twice) as fast\n *   - Set player to play 0.5x (half) as fast\n *\n * @type {boolean}\n * @default {@link Html5.canControlPlaybackRate}\n */\nHtml5.prototype.featuresPlaybackRate = Html5.canControlPlaybackRate();\n\n/**\n * Boolean indicating whether the `HTML5` tech currently supports the media element\n * moving in the DOM. iOS breaks if you move the media element, so this is set this to\n * false there. Everywhere else this should be true.\n *\n * @type {boolean}\n * @default\n */\nHtml5.prototype.movingMediaElementInDOM = !browser.IS_IOS;\n\n// TODO: Previous comment: No longer appears to be used. Can probably be removed.\n//       Is this true?\n/**\n * Boolean indicating whether the `HTML5` tech currently supports automatic media resize\n * when going into fullscreen.\n *\n * @type {boolean}\n * @default\n */\nHtml5.prototype.featuresFullscreenResize = true;\n\n/**\n * Boolean indicating whether the `HTML5` tech currently supports the progress event.\n * If this is false, manual `progress` events will be triggred instead.\n *\n * @type {boolean}\n * @default\n */\nHtml5.prototype.featuresProgressEvents = true;\n\n/**\n * Boolean indicating whether the `HTML5` tech currently supports the timeupdate event.\n * If this is false, manual `timeupdate` events will be triggred instead.\n *\n * @default\n */\nHtml5.prototype.featuresTimeupdateEvents = true;\n\n/**\n * Boolean indicating whether the `HTML5` tech currently supports native `TextTrack`s.\n *\n * @type {boolean}\n * @default {@link Html5.supportsNativeTextTracks}\n */\nHtml5.prototype.featuresNativeTextTracks = Html5.supportsNativeTextTracks();\n\n/**\n * Boolean indicating whether the `HTML5` tech currently supports native `VideoTrack`s.\n *\n * @type {boolean}\n * @default {@link Html5.supportsNativeVideoTracks}\n */\nHtml5.prototype.featuresNativeVideoTracks = Html5.supportsNativeVideoTracks();\n\n/**\n * Boolean indicating whether the `HTML5` tech currently supports native `AudioTrack`s.\n *\n * @type {boolean}\n * @default {@link Html5.supportsNativeAudioTracks}\n */\nHtml5.prototype.featuresNativeAudioTracks = Html5.supportsNativeAudioTracks();\n\n// HTML5 Feature detection and Device Fixes --------------------------------- //\nvar canPlayType = Html5.TEST_VID && Html5.TEST_VID.constructor.prototype.canPlayType;\nvar mpegurlRE = /^application\\/(?:x-|vnd\\.apple\\.)mpegurl/i;\nvar mp4RE = /^video\\/mp4/i;\n\nHtml5.patchCanPlayType = function () {\n\n  // Android 4.0 and above can play HLS to some extent but it reports being unable to do so\n  if (browser.ANDROID_VERSION >= 4.0 && !browser.IS_FIREFOX) {\n    Html5.TEST_VID.constructor.prototype.canPlayType = function (type) {\n      if (type && mpegurlRE.test(type)) {\n        return 'maybe';\n      }\n      return canPlayType.call(this, type);\n    };\n\n    // Override Android 2.2 and less canPlayType method which is broken\n  } else if (browser.IS_OLD_ANDROID) {\n    Html5.TEST_VID.constructor.prototype.canPlayType = function (type) {\n      if (type && mp4RE.test(type)) {\n        return 'maybe';\n      }\n      return canPlayType.call(this, type);\n    };\n  }\n};\n\nHtml5.unpatchCanPlayType = function () {\n  var r = Html5.TEST_VID.constructor.prototype.canPlayType;\n\n  Html5.TEST_VID.constructor.prototype.canPlayType = canPlayType;\n  return r;\n};\n\n// by default, patch the media element\nHtml5.patchCanPlayType();\n\nHtml5.disposeMediaElement = function (el) {\n  if (!el) {\n    return;\n  }\n\n  if (el.parentNode) {\n    el.parentNode.removeChild(el);\n  }\n\n  // remove any child track or source nodes to prevent their loading\n  while (el.hasChildNodes()) {\n    el.removeChild(el.firstChild);\n  }\n\n  // remove any src reference. not setting `src=''` because that causes a warning\n  // in firefox\n  el.removeAttribute('src');\n\n  // force the media element to update its loading state by calling load()\n  // however IE on Windows 7N has a bug that throws an error so need a try/catch (#793)\n  if (typeof el.load === 'function') {\n    // wrapping in an iife so it's not deoptimized (#1060#discussion_r10324473)\n    (function () {\n      try {\n        el.load();\n      } catch (e) {\n        // not supported\n      }\n    })();\n  }\n};\n\nHtml5.resetMediaElement = function (el) {\n  if (!el) {\n    return;\n  }\n\n  var sources = el.querySelectorAll('source');\n  var i = sources.length;\n\n  while (i--) {\n    el.removeChild(sources[i]);\n  }\n\n  // remove any src reference.\n  // not setting `src=''` because that throws an error\n  el.removeAttribute('src');\n\n  if (typeof el.load === 'function') {\n    // wrapping in an iife so it's not deoptimized (#1060#discussion_r10324473)\n    (function () {\n      try {\n        el.load();\n      } catch (e) {\n        // satisfy linter\n      }\n    })();\n  }\n};\n\n/* Native HTML5 element property wrapping ----------------------------------- */\n// Wrap native boolean attributes with getters that check both property and attribute\n// The list is as followed:\n// muted, defaultMuted, autoplay, controls, loop, playsinline\n[\n/**\n * Get the value of `muted` from the media element. `muted` indicates\n * that the volume for the media should be set to silent. This does not actually change\n * the `volume` attribute.\n *\n * @method Html5#muted\n * @return {boolean}\n *         - True if the value of `volume` should be ignored and the audio set to silent.\n *         - False if the value of `volume` should be used.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-muted}\n */\n'muted',\n\n/**\n * Get the value of `defaultMuted` from the media element. `defaultMuted` indicates\n * whether the media should start muted or not. Only changes the default state of the\n * media. `muted` and `defaultMuted` can have different values. {@link Html5#muted} indicates the\n * current state.\n *\n * @method Html5#defaultMuted\n * @return {boolean}\n *         - The value of `defaultMuted` from the media element.\n *         - True indicates that the media should start muted.\n *         - False indicates that the media should not start muted\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-defaultmuted}\n */\n'defaultMuted',\n\n/**\n * Get the value of `autoplay` from the media element. `autoplay` indicates\n * that the media should start to play as soon as the page is ready.\n *\n * @method Html5#autoplay\n * @return {boolean}\n *         - The value of `autoplay` from the media element.\n *         - True indicates that the media should start as soon as the page loads.\n *         - False indicates that the media should not start as soon as the page loads.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-autoplay}\n */\n'autoplay',\n\n/**\n * Get the value of `controls` from the media element. `controls` indicates\n * whether the native media controls should be shown or hidden.\n *\n * @method Html5#controls\n * @return {boolean}\n *         - The value of `controls` from the media element.\n *         - True indicates that native controls should be showing.\n *         - False indicates that native controls should be hidden.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-controls}\n */\n'controls',\n\n/**\n * Get the value of `loop` from the media element. `loop` indicates\n * that the media should return to the start of the media and continue playing once\n * it reaches the end.\n *\n * @method Html5#loop\n * @return {boolean}\n *         - The value of `loop` from the media element.\n *         - True indicates that playback should seek back to start once\n *           the end of a media is reached.\n *         - False indicates that playback should not loop back to the start when the\n *           end of the media is reached.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-loop}\n */\n'loop',\n\n/**\n * Get the value of `playsinline` from the media element. `playsinline` indicates\n * to the browser that non-fullscreen playback is preferred when fullscreen\n * playback is the native default, such as in iOS Safari.\n *\n * @method Html5#playsinline\n * @return {boolean}\n *         - The value of `playsinline` from the media element.\n *         - True indicates that the media should play inline.\n *         - False indicates that the media should not play inline.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/#attr-video-playsinline}\n */\n'playsinline'].forEach(function (prop) {\n  Html5.prototype[prop] = function () {\n    return this.el_[prop] || this.el_.hasAttribute(prop);\n  };\n});\n\n// Wrap native boolean attributes with setters that set both property and attribute\n// The list is as followed:\n// setMuted, setDefaultMuted, setAutoplay, setLoop, setPlaysinline\n// setControls is special-cased above\n[\n/**\n * Set the value of `muted` on the media element. `muted` indicates that the current\n * audio level should be silent.\n *\n * @method Html5#setMuted\n * @param {boolean} muted\n *        - True if the audio should be set to silent\n *        - False otherwise\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-muted}\n */\n'muted',\n\n/**\n * Set the value of `defaultMuted` on the media element. `defaultMuted` indicates that the current\n * audio level should be silent, but will only effect the muted level on intial playback..\n *\n * @method Html5.prototype.setDefaultMuted\n * @param {boolean} defaultMuted\n *        - True if the audio should be set to silent\n *        - False otherwise\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-defaultmuted}\n */\n'defaultMuted',\n\n/**\n * Set the value of `autoplay` on the media element. `autoplay` indicates\n * that the media should start to play as soon as the page is ready.\n *\n * @method Html5#setAutoplay\n * @param {boolean} autoplay\n *         - True indicates that the media should start as soon as the page loads.\n *         - False indicates that the media should not start as soon as the page loads.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-autoplay}\n */\n'autoplay',\n\n/**\n * Set the value of `loop` on the media element. `loop` indicates\n * that the media should return to the start of the media and continue playing once\n * it reaches the end.\n *\n * @method Html5#setLoop\n * @param {boolean} loop\n *         - True indicates that playback should seek back to start once\n *           the end of a media is reached.\n *         - False indicates that playback should not loop back to the start when the\n *           end of the media is reached.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-loop}\n */\n'loop',\n\n/**\n * Set the value of `playsinline` from the media element. `playsinline` indicates\n * to the browser that non-fullscreen playback is preferred when fullscreen\n * playback is the native default, such as in iOS Safari.\n *\n * @method Html5#setPlaysinline\n * @param {boolean} playsinline\n *         - True indicates that the media should play inline.\n *         - False indicates that the media should not play inline.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/#attr-video-playsinline}\n */\n'playsinline'].forEach(function (prop) {\n  Html5.prototype['set' + (0, _toTitleCase2['default'])(prop)] = function (v) {\n    this.el_[prop] = v;\n\n    if (v) {\n      this.el_.setAttribute(prop, prop);\n    } else {\n      this.el_.removeAttribute(prop);\n    }\n  };\n});\n\n// Wrap native properties with a getter\n// The list is as followed\n// paused, currentTime, buffered, volume, poster, preload, error, seeking\n// seekable, ended, playbackRate, defaultPlaybackRate, played, networkState\n// readyState, videoWidth, videoHeight\n[\n/**\n * Get the value of `paused` from the media element. `paused` indicates whether the media element\n * is currently paused or not.\n *\n * @method Html5#paused\n * @return {boolean}\n *         The value of `paused` from the media element.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-paused}\n */\n'paused',\n\n/**\n * Get the value of `currentTime` from the media element. `currentTime` indicates\n * the current second that the media is at in playback.\n *\n * @method Html5#currentTime\n * @return {number}\n *         The value of `currentTime` from the media element.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-currenttime}\n */\n'currentTime',\n\n/**\n * Get the value of `buffered` from the media element. `buffered` is a `TimeRange`\n * object that represents the parts of the media that are already downloaded and\n * available for playback.\n *\n * @method Html5#buffered\n * @return {TimeRange}\n *         The value of `buffered` from the media element.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-buffered}\n */\n'buffered',\n\n/**\n * Get the value of `volume` from the media element. `volume` indicates\n * the current playback volume of audio for a media. `volume` will be a value from 0\n * (silent) to 1 (loudest and default).\n *\n * @method Html5#volume\n * @return {number}\n *         The value of `volume` from the media element. Value will be between 0-1.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-a-volume}\n */\n'volume',\n\n/**\n * Get the value of `poster` from the media element. `poster` indicates\n * that the url of an image file that can/will be shown when no media data is available.\n *\n * @method Html5#poster\n * @return {string}\n *         The value of `poster` from the media element. Value will be a url to an\n *         image.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-video-poster}\n */\n'poster',\n\n/**\n * Get the value of `preload` from the media element. `preload` indicates\n * what should download before the media is interacted with. It can have the following\n * values:\n * - none: nothing should be downloaded\n * - metadata: poster and the first few frames of the media may be downloaded to get\n *   media dimensions and other metadata\n * - auto: allow the media and metadata for the media to be downloaded before\n *    interaction\n *\n * @method Html5#preload\n * @return {string}\n *         The value of `preload` from the media element. Will be 'none', 'metadata',\n *         or 'auto'.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-preload}\n */\n'preload',\n\n/**\n * Get the value of the `error` from the media element. `error` indicates any\n * MediaError that may have occured during playback. If error returns null there is no\n * current error.\n *\n * @method Html5#error\n * @return {MediaError|null}\n *         The value of `error` from the media element. Will be `MediaError` if there\n *         is a current error and null otherwise.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-error}\n */\n'error',\n\n/**\n * Get the value of `seeking` from the media element. `seeking` indicates whether the\n * media is currently seeking to a new position or not.\n *\n * @method Html5#seeking\n * @return {boolean}\n *         - The value of `seeking` from the media element.\n *         - True indicates that the media is currently seeking to a new position.\n *         - Flase indicates that the media is not seeking to a new position at this time.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-seeking}\n */\n'seeking',\n\n/**\n * Get the value of `seekable` from the media element. `seekable` returns a\n * `TimeRange` object indicating ranges of time that can currently be `seeked` to.\n *\n * @method Html5#seekable\n * @return {TimeRange}\n *         The value of `seekable` from the media element. A `TimeRange` object\n *         indicating the current ranges of time that can be seeked to.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-seekable}\n */\n'seekable',\n\n/**\n * Get the value of `ended` from the media element. `ended` indicates whether\n * the media has reached the end or not.\n *\n * @method Html5#ended\n * @return {boolean}\n *         - The value of `ended` from the media element.\n *         - True indicates that the media has ended.\n *         - False indicates that the media has not ended.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-ended}\n */\n'ended',\n\n/**\n * Get the value of `playbackRate` from the media element. `playbackRate` indicates\n * the rate at which the media is currently playing back. Examples:\n *   - if playbackRate is set to 2, media will play twice as fast.\n *   - if playbackRate is set to 0.5, media will play half as fast.\n *\n * @method Html5#playbackRate\n * @return {number}\n *         The value of `playbackRate` from the media element. A number indicating\n *         the current playback speed of the media, where 1 is normal speed.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-playbackrate}\n */\n'playbackRate',\n\n/**\n * Get the value of `played` from the media element. `played` returns a `TimeRange`\n * object representing points in the media timeline that have been played.\n *\n * @method Html5#played\n * @return {TimeRange}\n *         The value of `played` from the media element. A `TimeRange` object indicating\n *         the ranges of time that have been played.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-played}\n */\n'played',\n\n/**\n * Get the value of `networkState` from the media element. `networkState` indicates\n * the current network state. It returns an enumeration from the following list:\n * - 0: NETWORK_EMPTY\n * - 1: NEWORK_IDLE\n * - 2: NETWORK_LOADING\n * - 3: NETWORK_NO_SOURCE\n *\n * @method Html5#networkState\n * @return {number}\n *         The value of `networkState` from the media element. This will be a number\n *         from the list in the description.\n *\n * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-networkstate}\n */\n'networkState',\n\n/**\n * Get the value of `readyState` from the media element. `readyState` indicates\n * the current state of the media element. It returns an enumeration from the\n * following list:\n * - 0: HAVE_NOTHING\n * - 1: HAVE_METADATA\n * - 2: HAVE_CURRENT_DATA\n * - 3: HAVE_FUTURE_DATA\n * - 4: HAVE_ENOUGH_DATA\n *\n * @method Html5#readyState\n * @return {number}\n *         The value of `readyState` from the media element. This will be a number\n *         from the list in the description.\n *\n * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#ready-states}\n */\n'readyState',\n\n/**\n * Get the value of `videoWidth` from the video element. `videoWidth` indicates\n * the current width of the video in css pixels.\n *\n * @method Html5#videoWidth\n * @return {number}\n *         The value of `videoWidth` from the video element. This will be a number\n *         in css pixels.\n *\n * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-video-videowidth}\n */\n'videoWidth',\n\n/**\n * Get the value of `videoHeight` from the video element. `videoHeigth` indicates\n * the current height of the video in css pixels.\n *\n * @method Html5#videoHeight\n * @return {number}\n *         The value of `videoHeight` from the video element. This will be a number\n *         in css pixels.\n *\n * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-video-videowidth}\n */\n'videoHeight'].forEach(function (prop) {\n  Html5.prototype[prop] = function () {\n    return this.el_[prop];\n  };\n});\n\n// Wrap native properties with a setter in this format:\n// set + toTitleCase(name)\n// The list is as follows:\n// setVolume, setSrc, setPoster, setPreload, setPlaybackRate, setDefaultPlaybackRate\n[\n/**\n * Set the value of `volume` on the media element. `volume` indicates the current\n * audio level as a percentage in decimal form. This means that 1 is 100%, 0.5 is 50%, and\n * so on.\n *\n * @method Html5#setVolume\n * @param {number} percentAsDecimal\n *        The volume percent as a decimal. Valid range is from 0-1.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-a-volume}\n */\n'volume',\n\n/**\n * Set the value of `src` on the media element. `src` indicates the current\n * {@link Tech~SourceObject} for the media.\n *\n * @method Html5#setSrc\n * @param {Tech~SourceObject} src\n *        The source object to set as the current source.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-src}\n */\n'src',\n\n/**\n * Set the value of `poster` on the media element. `poster` is the url to\n * an image file that can/will be shown when no media data is available.\n *\n * @method Html5#setPoster\n * @param {string} poster\n *        The url to an image that should be used as the `poster` for the media\n *        element.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-poster}\n */\n'poster',\n\n/**\n * Set the value of `preload` on the media element. `preload` indicates\n * what should download before the media is interacted with. It can have the following\n * values:\n * - none: nothing should be downloaded\n * - metadata: poster and the first few frames of the media may be downloaded to get\n *   media dimensions and other metadata\n * - auto: allow the media and metadata for the media to be downloaded before\n *    interaction\n *\n * @method Html5#setPreload\n * @param {string} preload\n *         The value of `preload` to set on the media element. Must be 'none', 'metadata',\n *         or 'auto'.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-preload}\n */\n'preload',\n\n/**\n * Set the value of `playbackRate` on the media element. `playbackRate` indicates\n * the rate at which the media should play back. Examples:\n *   - if playbackRate is set to 2, media will play twice as fast.\n *   - if playbackRate is set to 0.5, media will play half as fast.\n *\n * @method Html5#setPlaybackRate\n * @return {number}\n *         The value of `playbackRate` from the media element. A number indicating\n *         the current playback speed of the media, where 1 is normal speed.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-playbackrate}\n */\n'playbackRate'].forEach(function (prop) {\n  Html5.prototype['set' + (0, _toTitleCase2['default'])(prop)] = function (v) {\n    this.el_[prop] = v;\n  };\n});\n\n// wrap native functions with a function\n// The list is as follows:\n// pause, load play\n[\n/**\n * A wrapper around the media elements `pause` function. This will call the `HTML5`\n * media elements `pause` function.\n *\n * @method Html5#pause\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-pause}\n */\n'pause',\n\n/**\n * A wrapper around the media elements `load` function. This will call the `HTML5`s\n * media element `load` function.\n *\n * @method Html5#load\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-load}\n */\n'load'].forEach(function (prop) {\n  Html5.prototype[prop] = function () {\n    return this.el_[prop]();\n  };\n});\n\n_tech2['default'].withSourceHandlers(Html5);\n\n/**\n * Native source handler for Html5, simply passes the source to the media element.\n *\n * @proprety {Tech~SourceObject} source\n *        The source object\n *\n * @proprety {Html5} tech\n *        The instance of the HTML5 tech.\n */\nHtml5.nativeSourceHandler = {};\n\n/**\n * Check if the media element can play the given mime type.\n *\n * @param {string} type\n *        The mimetype to check\n *\n * @return {string}\n *         'probably', 'maybe', or '' (empty string)\n */\nHtml5.nativeSourceHandler.canPlayType = function (type) {\n  // IE9 on Windows 7 without MediaPlayer throws an error here\n  // https://github.com/videojs/video.js/issues/519\n  try {\n    return Html5.TEST_VID.canPlayType(type);\n  } catch (e) {\n    return '';\n  }\n};\n\n/**\n * Check if the media element can handle a source natively.\n *\n * @param {Tech~SourceObject} source\n *         The source object\n *\n * @param {Object} [options]\n *         Options to be passed to the tech.\n *\n * @return {string}\n *         'probably', 'maybe', or '' (empty string).\n */\nHtml5.nativeSourceHandler.canHandleSource = function (source, options) {\n\n  // If a type was provided we should rely on that\n  if (source.type) {\n    return Html5.nativeSourceHandler.canPlayType(source.type);\n\n    // If no type, fall back to checking 'video/[EXTENSION]'\n  } else if (source.src) {\n    var ext = Url.getFileExtension(source.src);\n\n    return Html5.nativeSourceHandler.canPlayType('video/' + ext);\n  }\n\n  return '';\n};\n\n/**\n * Pass the source to the native media element.\n *\n * @param {Tech~SourceObject} source\n *        The source object\n *\n * @param {Html5} tech\n *        The instance of the Html5 tech\n *\n * @param {Object} [options]\n *        The options to pass to the source\n */\nHtml5.nativeSourceHandler.handleSource = function (source, tech, options) {\n  tech.setSrc(source.src);\n};\n\n/**\n * A noop for the native dispose function, as cleanup is not needed.\n */\nHtml5.nativeSourceHandler.dispose = function () {};\n\n// Register the native source handler\nHtml5.registerSourceHandler(Html5.nativeSourceHandler);\n\n_component2['default'].registerComponent('Html5', Html5);\n_tech2['default'].registerTech('Html5', Html5);\nexports['default'] = Html5;\n"],"mappings":"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AAC,EAAE,CAAC;EACN;AACF,CAAC;AAED1C,KAAK,CAAC+J,iBAAiB,GAAG,UAAUzH,EAAE,EAAE;EACtC,IAAI,CAACA,EAAE,EAAE;IACP;EACF;EAEA,IAAIsL,OAAO,GAAGtL,EAAE,CAACuL,gBAAgB,CAAC,QAAQ,CAAC;EAC3C,IAAI7L,CAAC,GAAG4L,OAAO,CAAC1M,MAAM;EAEtB,OAAOc,CAAC,EAAE,EAAE;IACVM,EAAE,CAACL,WAAW,CAAC2L,OAAO,CAAC5L,CAAC,CAAC,CAAC;EAC5B;;EAEA;EACA;EACAM,EAAE,CAACkE,eAAe,CAAC,KAAK,CAAC;EAEzB,IAAI,OAAOlE,EAAE,CAACqL,IAAI,KAAK,UAAU,EAAE;IACjC;IACA,CAAC,YAAY;MACX,IAAI;QACFrL,EAAE,CAACqL,IAAI,CAAC,CAAC;MACX,CAAC,CAAC,OAAOjL,CAAC,EAAE;QACV;MAAA;IAEJ,CAAC,EAAE,CAAC;EACN;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AAEd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,CAAC,CAACP,OAAO,CAAC,UAAU2L,IAAI,EAAE;EACrC9N,KAAK,CAACvB,SAAS,CAACqP,IAAI,CAAC,GAAG,YAAY;IAClC,OAAO,IAAI,CAACvN,GAAG,CAACuN,IAAI,CAAC,IAAI,IAAI,CAACvN,GAAG,CAACuB,YAAY,CAACgM,IAAI,CAAC;EACtD,CAAC;AACH,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AAEd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,CAAC,CAAC3L,OAAO,CAAC,UAAU2L,IAAI,EAAE;EACrC9N,KAAK,CAACvB,SAAS,CAAC,KAAK,GAAG,CAAC,CAAC,EAAEL,aAAa,CAAC,SAAS,CAAC,EAAE0P,IAAI,CAAC,CAAC,GAAG,UAAUC,CAAC,EAAE;IAC1E,IAAI,CAACxN,GAAG,CAACuN,IAAI,CAAC,GAAGC,CAAC;IAElB,IAAIA,CAAC,EAAE;MACL,IAAI,CAACxN,GAAG,CAAC8F,YAAY,CAACyH,IAAI,EAAEA,IAAI,CAAC;IACnC,CAAC,MAAM;MACL,IAAI,CAACvN,GAAG,CAACiG,eAAe,CAACsH,IAAI,CAAC;IAChC;EACF,CAAC;AACH,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AAER;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AAEbcAAc;AAEd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AAER;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AAEd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AAEZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AAEZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,CAAC,CAAC3L,OAAO,CAAC,UAAU2L,IAAI,EAAE;EACrC9N,KAAK,CAACvB,SAAS,CAACqP,IAAI,CAAC,GAAG,YAAY;IAClC,OAAO,IAAI,CAACvN,GAAG,CAACuN,IAAI,CAAC;EACvB,CAAC;AACH,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AAER;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AAER;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,CAAC,CAAC3L,OAAO,CAAC,UAAU2L,IAAI,EAAE;EACtC9N,KAAK,CAACvB,SAAS,CAAC,KAAK,GAAG,CAAC,CAAC,EAAEL,aAAa,CAAC,SAAS,CAAC,EAAE0P,IAAI,CAAC,CAAC,GAAG,UAAUC,CAAC,EAAE;IAC1E,IAAI,CAACxN,GAAG,CAACuN,IAAI,CAAC,GAAGC,CAAC;EACpB,CAAC;AACH,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,CAAC,CAAC5L,OAAO,CAAC,UAAU2L,IAAI,EAAE;EAC9B9N,KAAK,CAACvB,SAAS,CAACqP,IAAI,CAAC,GAAG,YAAY;IAClC,OAAO,IAAI,CAACvN,GAAG,CAACuN,IAAI,CAAC,CAAC,CAAC;EACzB,CAAC;AACH,CAAC,CAAC;AAEFnR,MAAM,CAAC,SAAS,CAAC,CAACqR,kBAAkB,CAAChO,KAAK,CAAC;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,KAAK,CAACiO,mBAAmB,GAAG,CAAC,CAAC;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAjO,KAAK,CAACiO,mBAAmB,CAACnC,WAAW,GAAG,UAAU1J,IAAI,EAAE;EACtD;EACA;EACA,IAAI;IACF,OAAOpC,KAAK,CAAC2L,QAAQ,CAACG,WAAW,CAAC1J,IAAI,CAAC;EACzC,CAAC,CAAC,OAAOM,CAAC,EAAE;IACV,OAAO,EAAE;EACX;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA1C,KAAK,CAACiO,mBAAmB,CAACC,eAAe,GAAG,UAAU7N,MAAM,EAAEH,OAAO,EAAE;EAErE;EACA,IAAIG,MAAM,CAAC+B,IAAI,EAAE;IACf,OAAOpC,KAAK,CAACiO,mBAAmB,CAACnC,WAAW,CAACzL,MAAM,CAAC+B,IAAI,CAAC;;IAEzD;EACF,CAAC,MAAM,IAAI/B,MAAM,CAACI,GAAG,EAAE;IACrB,IAAI0N,GAAG,GAAGhR,GAAG,CAACiR,gBAAgB,CAAC/N,MAAM,CAACI,GAAG,CAAC;IAE1C,OAAOT,KAAK,CAACiO,mBAAmB,CAACnC,WAAW,CAAC,QAAQ,GAAGqC,GAAG,CAAC;EAC9D;EAEA,OAAO,EAAE;AACX,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAnO,KAAK,CAACiO,mBAAmB,CAACI,YAAY,GAAG,UAAUhO,MAAM,EAAEiO,IAAI,EAAEpO,OAAO,EAAE;EACxEoO,IAAI,CAACzE,MAAM,CAACxJ,MAAM,CAACI,GAAG,CAAC;AACzB,CAAC;;AAED;AACA;AACA;AACAT,KAAK,CAACiO,mBAAmB,CAAC7J,OAAO,GAAG,YAAY,CAAC,CAAC;;AAElD;AACApE,KAAK,CAACuO,qBAAqB,CAACvO,KAAK,CAACiO,mBAAmB,CAAC;AAEtDnR,WAAW,CAAC,SAAS,CAAC,CAAC0R,iBAAiB,CAAC,OAAO,EAAExO,KAAK,CAAC;AACxDrD,MAAM,CAAC,SAAS,CAAC,CAAC8R,YAAY,CAAC,OAAO,EAAEzO,KAAK,CAAC;AAC9C3D,OAAO,CAAC,SAAS,CAAC,GAAG2D,KAAK"},"metadata":{},"sourceType":"script","externalDependencies":[]}